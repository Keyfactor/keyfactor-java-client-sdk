/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.ModelsCustomReport;
import com.keyfactor.command.client.model.ModelsCustomReportCreationRequest;
import com.keyfactor.command.client.model.ModelsCustomReportUpdateRequest;
import com.keyfactor.command.client.model.ModelsReport;
import com.keyfactor.command.client.model.ModelsReportParameters;
import com.keyfactor.command.client.model.ModelsReportParametersRequest;
import com.keyfactor.command.client.model.ModelsReportRequestModel;
import com.keyfactor.command.client.model.ModelsReportSchedule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportsCreateCustomReport
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCreateCustomReportCall(String xKeyfactorRequestedWith, ModelsCustomReportCreationRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Reports/Custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsCreateCustomReportValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCustomReportCreationRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsCreateCustomReport(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling reportsCreateCustomReport(Async)");
        }

        return reportsCreateCustomReportCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates a custom report
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCustomReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCustomReport reportsCreateCustomReport(String xKeyfactorRequestedWith, ModelsCustomReportCreationRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCustomReport> localVarResp = reportsCreateCustomReportWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates a custom report
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCustomReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCustomReport> reportsCreateCustomReportWithHttpInfo(String xKeyfactorRequestedWith, ModelsCustomReportCreationRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsCreateCustomReportValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCustomReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a custom report (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCreateCustomReportAsync(String xKeyfactorRequestedWith, ModelsCustomReportCreationRequest request, String xKeyfactorApiVersion, final ApiCallback<ModelsCustomReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsCreateCustomReportValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCustomReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsCreateReportSchedule
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCreateReportScheduleCall(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/Reports/{id}/Schedules"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsCreateReportScheduleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsCreateReportSchedule(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsCreateReportSchedule(Async)");
        }

        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling reportsCreateReportSchedule(Async)");
        }

        return reportsCreateReportScheduleCall(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion, _callback);

    }

    /**
     * Create a built-in report&#39;s schedule that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsReportSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsReportSchedule reportsCreateReportSchedule(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsReportSchedule> localVarResp = reportsCreateReportScheduleWithHttpInfo(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Create a built-in report&#39;s schedule that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsReportSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsReportSchedule> reportsCreateReportScheduleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsCreateReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsReportSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a built-in report&#39;s schedule that matches the id of the report. (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCreateReportScheduleAsync(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion, final ApiCallback<ModelsReportSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsCreateReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsReportSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsDeleteReport
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsDeleteReportCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Custom/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsDeleteReportValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsDeleteReport(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsDeleteReport(Async)");
        }

        return reportsDeleteReportCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Delete custom report that matches the id
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void reportsDeleteReport(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        reportsDeleteReportWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Delete custom report that matches the id
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportsDeleteReportWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsDeleteReportValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete custom report that matches the id (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsDeleteReportAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsDeleteReportValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsDeleteReportSchedule
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsDeleteReportScheduleCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Schedules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsDeleteReportScheduleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsDeleteReportSchedule(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsDeleteReportSchedule(Async)");
        }

        return reportsDeleteReportScheduleCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Delete a built-in report&#39;s schedule that matches the id of the schedule.
     * 
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void reportsDeleteReportSchedule(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        reportsDeleteReportScheduleWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Delete a built-in report&#39;s schedule that matches the id of the schedule.
     * 
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportsDeleteReportScheduleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsDeleteReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a built-in report&#39;s schedule that matches the id of the schedule. (asynchronously)
     * 
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsDeleteReportScheduleAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsDeleteReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetCustomReport
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetCustomReportCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Custom/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetCustomReportValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsGetCustomReport(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsGetCustomReport(Async)");
        }

        return reportsGetCustomReportCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns a single custom report that matches the id
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCustomReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCustomReport reportsGetCustomReport(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCustomReport> localVarResp = reportsGetCustomReportWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns a single custom report that matches the id
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCustomReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCustomReport> reportsGetCustomReportWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsGetCustomReportValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCustomReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single custom report that matches the id (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetCustomReportAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsCustomReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetCustomReportValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCustomReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetReport
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetReportValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsGetReport(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsGetReport(Async)");
        }

        return reportsGetReportCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns a single built-in report that matches the id
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsReport reportsGetReport(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsReport> localVarResp = reportsGetReportWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns a single built-in report that matches the id
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsReport> reportsGetReportWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsGetReportValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single built-in report that matches the id (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetReportValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetReportParameters
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportParametersCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/{id}/Parameters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetReportParametersValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsGetReportParameters(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsGetReportParameters(Async)");
        }

        return reportsGetReportParametersCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Get a built-in report&#39;s parameters that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;ModelsReportParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsReportParameters> reportsGetReportParameters(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<ModelsReportParameters>> localVarResp = reportsGetReportParametersWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a built-in report&#39;s parameters that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;ModelsReportParameters&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsReportParameters>> reportsGetReportParametersWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsGetReportParametersValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<ModelsReportParameters>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a built-in report&#39;s parameters that matches the id of the report. (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportParametersAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<List<ModelsReportParameters>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetReportParametersValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsReportParameters>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetReportSchedule
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportScheduleCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Schedules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetReportScheduleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsGetReportSchedule(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsGetReportSchedule(Async)");
        }

        return reportsGetReportScheduleCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Get a built-in report&#39;s schedule that matches the id of the schedule.
     * 
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsReportSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsReportSchedule reportsGetReportSchedule(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsReportSchedule> localVarResp = reportsGetReportScheduleWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a built-in report&#39;s schedule that matches the id of the schedule.
     * 
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsReportSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsReportSchedule> reportsGetReportScheduleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsGetReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsReportSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a built-in report&#39;s schedule that matches the id of the schedule. (asynchronously)
     * 
     * @param id Report Schedule identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportScheduleAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsReportSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsReportSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetReportSchedules
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportSchedulesCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/{id}/Schedules"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pqQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.queryString", pqQueryString));
        }

        if (pqPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.pageReturned", pqPageReturned));
        }

        if (pqReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.returnLimit", pqReturnLimit));
        }

        if (pqSortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortField", pqSortField));
        }

        if (pqSortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortAscending", pqSortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetReportSchedulesValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsGetReportSchedules(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsGetReportSchedules(Async)");
        }

        return reportsGetReportSchedulesCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);

    }

    /**
     * Get a built-in report&#39;s schedules that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;ModelsReportSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsReportSchedule> reportsGetReportSchedules(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        ApiResponse<List<ModelsReportSchedule>> localVarResp = reportsGetReportSchedulesWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending);
        return localVarResp.getData();
    }

    /**
     * Get a built-in report&#39;s schedules that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;ModelsReportSchedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsReportSchedule>> reportsGetReportSchedulesWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        okhttp3.Call localVarCall = reportsGetReportSchedulesValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, null);
        Type localVarReturnType = new TypeToken<List<ModelsReportSchedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a built-in report&#39;s schedules that matches the id of the report. (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetReportSchedulesAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback<List<ModelsReportSchedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetReportSchedulesValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsReportSchedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsQueryCustomReports
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsQueryCustomReportsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.queryString", queryQueryString));
        }

        if (queryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.pageReturned", queryPageReturned));
        }

        if (queryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.returnLimit", queryReturnLimit));
        }

        if (querySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortField", querySortField));
        }

        if (querySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortAscending", querySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsQueryCustomReportsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsQueryCustomReports(Async)");
        }

        return reportsQueryCustomReportsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);

    }

    /**
     * Returns all custom reports according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;ModelsCustomReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsCustomReport> reportsQueryCustomReports(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        ApiResponse<List<ModelsCustomReport>> localVarResp = reportsQueryCustomReportsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns all custom reports according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;ModelsCustomReport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsCustomReport>> reportsQueryCustomReportsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        okhttp3.Call localVarCall = reportsQueryCustomReportsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, null);
        Type localVarReturnType = new TypeToken<List<ModelsCustomReport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all custom reports according to the provided filter and output parameters (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsQueryCustomReportsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback<List<ModelsCustomReport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsQueryCustomReportsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsCustomReport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsQueryReports
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsQueryReportsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.queryString", queryQueryString));
        }

        if (queryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.pageReturned", queryPageReturned));
        }

        if (queryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.returnLimit", queryReturnLimit));
        }

        if (querySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortField", querySortField));
        }

        if (querySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortAscending", querySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsQueryReportsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsQueryReports(Async)");
        }

        return reportsQueryReportsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);

    }

    /**
     * Returns all built-in reports according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;ModelsReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsReport> reportsQueryReports(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        ApiResponse<List<ModelsReport>> localVarResp = reportsQueryReportsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns all built-in reports according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;ModelsReport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsReport>> reportsQueryReportsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        okhttp3.Call localVarCall = reportsQueryReportsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, null);
        Type localVarReturnType = new TypeToken<List<ModelsReport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all built-in reports according to the provided filter and output parameters (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsQueryReportsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback<List<ModelsReport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsQueryReportsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsReport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsUpdateCustomReport
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateCustomReportCall(String xKeyfactorRequestedWith, ModelsCustomReportUpdateRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Reports/Custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsUpdateCustomReportValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCustomReportUpdateRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsUpdateCustomReport(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling reportsUpdateCustomReport(Async)");
        }

        return reportsUpdateCustomReportCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Updates a custom report that matches the id
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCustomReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCustomReport reportsUpdateCustomReport(String xKeyfactorRequestedWith, ModelsCustomReportUpdateRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCustomReport> localVarResp = reportsUpdateCustomReportWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Updates a custom report that matches the id
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCustomReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCustomReport> reportsUpdateCustomReportWithHttpInfo(String xKeyfactorRequestedWith, ModelsCustomReportUpdateRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsUpdateCustomReportValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCustomReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a custom report that matches the id (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Report Information (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateCustomReportAsync(String xKeyfactorRequestedWith, ModelsCustomReportUpdateRequest request, String xKeyfactorApiVersion, final ApiCallback<ModelsCustomReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsUpdateCustomReportValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCustomReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsUpdateReport
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request This object is used to update the Favorite, In Navigator and the Remove Duplicates if the &#39;Uses Collections&#39; is true. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateReportCall(String xKeyfactorRequestedWith, ModelsReportRequestModel request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsUpdateReportValidateBeforeCall(String xKeyfactorRequestedWith, ModelsReportRequestModel request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsUpdateReport(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling reportsUpdateReport(Async)");
        }

        return reportsUpdateReportCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Updates a single built-in report that matches the id. Only some fields can be updated.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request This object is used to update the Favorite, In Navigator and the Remove Duplicates if the &#39;Uses Collections&#39; is true. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsReport reportsUpdateReport(String xKeyfactorRequestedWith, ModelsReportRequestModel request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsReport> localVarResp = reportsUpdateReportWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Updates a single built-in report that matches the id. Only some fields can be updated.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request This object is used to update the Favorite, In Navigator and the Remove Duplicates if the &#39;Uses Collections&#39; is true. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsReport> reportsUpdateReportWithHttpInfo(String xKeyfactorRequestedWith, ModelsReportRequestModel request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsUpdateReportValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a single built-in report that matches the id. Only some fields can be updated. (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request This object is used to update the Favorite, In Navigator and the Remove Duplicates if the &#39;Uses Collections&#39; is true. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateReportAsync(String xKeyfactorRequestedWith, ModelsReportRequestModel request, String xKeyfactorApiVersion, final ApiCallback<ModelsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsUpdateReportValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsUpdateReportParameters
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A List of the parameters to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateReportParametersCall(Integer id, String xKeyfactorRequestedWith, List<ModelsReportParametersRequest> request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Reports/{id}/Parameters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsUpdateReportParametersValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<ModelsReportParametersRequest> request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsUpdateReportParameters(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsUpdateReportParameters(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling reportsUpdateReportParameters(Async)");
        }

        return reportsUpdateReportParametersCall(id, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Update a built-in report&#39;s parameters that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A List of the parameters to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;ModelsReportParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsReportParameters> reportsUpdateReportParameters(Integer id, String xKeyfactorRequestedWith, List<ModelsReportParametersRequest> request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<ModelsReportParameters>> localVarResp = reportsUpdateReportParametersWithHttpInfo(id, xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Update a built-in report&#39;s parameters that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A List of the parameters to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;ModelsReportParameters&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsReportParameters>> reportsUpdateReportParametersWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<ModelsReportParametersRequest> request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsUpdateReportParametersValidateBeforeCall(id, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<ModelsReportParameters>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a built-in report&#39;s parameters that matches the id of the report. (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A List of the parameters to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateReportParametersAsync(Integer id, String xKeyfactorRequestedWith, List<ModelsReportParametersRequest> request, String xKeyfactorApiVersion, final ApiCallback<List<ModelsReportParameters>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsUpdateReportParametersValidateBeforeCall(id, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsReportParameters>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsUpdateReportSchedule
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateReportScheduleCall(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/Reports/{id}/Schedules"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsUpdateReportScheduleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsUpdateReportSchedule(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling reportsUpdateReportSchedule(Async)");
        }

        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling reportsUpdateReportSchedule(Async)");
        }

        return reportsUpdateReportScheduleCall(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion, _callback);

    }

    /**
     * Update a built-in report&#39;s schedule that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsReportSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsReportSchedule reportsUpdateReportSchedule(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsReportSchedule> localVarResp = reportsUpdateReportScheduleWithHttpInfo(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Update a built-in report&#39;s schedule that matches the id of the report.
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsReportSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsReportSchedule> reportsUpdateReportScheduleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = reportsUpdateReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsReportSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a built-in report&#39;s schedule that matches the id of the report. (asynchronously)
     * 
     * @param id Report identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param schedule Report Schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUpdateReportScheduleAsync(Integer id, String xKeyfactorRequestedWith, ModelsReportSchedule schedule, String xKeyfactorApiVersion, final ApiCallback<ModelsReportSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsUpdateReportScheduleValidateBeforeCall(id, xKeyfactorRequestedWith, schedule, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsReportSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
