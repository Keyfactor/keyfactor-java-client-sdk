/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.CoreModelsEnrollmentEnrollmentTemplateCAResponse;
import com.keyfactor.command.client.model.KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsEnrollmentEnrollmentManagementRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse;
import com.keyfactor.command.client.model.ModelsCSRContents;
import com.keyfactor.command.client.model.ModelsEnrollmentAvailableRenewal;
import com.keyfactor.command.client.model.ModelsEnrollmentCSREnrollmentRequest;
import com.keyfactor.command.client.model.ModelsEnrollmentCSREnrollmentResponse;
import com.keyfactor.command.client.model.ModelsEnrollmentExistingEnrollmentManagementRequest;
import com.keyfactor.command.client.model.ModelsEnrollmentPFXEnrollmentRequest;
import com.keyfactor.command.client.model.ModelsEnrollmentPFXEnrollmentResponse;
import com.keyfactor.command.client.model.ModelsEnrollmentRenewalRequest;
import com.keyfactor.command.client.model.ModelsEnrollmentRenewalResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EnrollmentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnrollmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnrollmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enrollmentAddToExistingCertStores
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Id of the existing certificate (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentAddToExistingCertStoresCall(String xKeyfactorRequestedWith, ModelsEnrollmentExistingEnrollmentManagementRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Enrollment/PFX/Replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentAddToExistingCertStoresValidateBeforeCall(String xKeyfactorRequestedWith, ModelsEnrollmentExistingEnrollmentManagementRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentAddToExistingCertStores(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling enrollmentAddToExistingCertStores(Async)");
        }

        return enrollmentAddToExistingCertStoresCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates management jobs to install a newly enrolled pfx into the same certificate stores as the previous certificate
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Id of the existing certificate (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse enrollmentAddToExistingCertStores(String xKeyfactorRequestedWith, ModelsEnrollmentExistingEnrollmentManagementRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse> localVarResp = enrollmentAddToExistingCertStoresWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates management jobs to install a newly enrolled pfx into the same certificate stores as the previous certificate
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Id of the existing certificate (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse> enrollmentAddToExistingCertStoresWithHttpInfo(String xKeyfactorRequestedWith, ModelsEnrollmentExistingEnrollmentManagementRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentAddToExistingCertStoresValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates management jobs to install a newly enrolled pfx into the same certificate stores as the previous certificate (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Id of the existing certificate (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentAddToExistingCertStoresAsync(String xKeyfactorRequestedWith, ModelsEnrollmentExistingEnrollmentManagementRequest request, String xKeyfactorApiVersion, final ApiCallback<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentAddToExistingCertStoresValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentAvailableRenewalId
     * @param id The Keyfactor certificate Id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentAvailableRenewalIdCall(Integer id, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Enrollment/AvailableRenewal/Id/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentAvailableRenewalIdValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enrollmentAvailableRenewalId(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentAvailableRenewalId(Async)");
        }

        return enrollmentAvailableRenewalIdCall(id, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns the type of renewal available for a given certificate.
     * ### Available Renewal Types ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | None                 |  | 1             | Seeded PFX                |  | 2                | One-click                   |
     * @param id The Keyfactor certificate Id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsEnrollmentAvailableRenewal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrollmentAvailableRenewal enrollmentAvailableRenewalId(Integer id, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsEnrollmentAvailableRenewal> localVarResp = enrollmentAvailableRenewalIdWithHttpInfo(id, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the type of renewal available for a given certificate.
     * ### Available Renewal Types ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | None                 |  | 1             | Seeded PFX                |  | 2                | One-click                   |
     * @param id The Keyfactor certificate Id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsEnrollmentAvailableRenewal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrollmentAvailableRenewal> enrollmentAvailableRenewalIdWithHttpInfo(Integer id, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentAvailableRenewalIdValidateBeforeCall(id, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentAvailableRenewal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the type of renewal available for a given certificate. (asynchronously)
     * ### Available Renewal Types ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | None                 |  | 1             | Seeded PFX                |  | 2                | One-click                   |
     * @param id The Keyfactor certificate Id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentAvailableRenewalIdAsync(Integer id, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback<ModelsEnrollmentAvailableRenewal> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentAvailableRenewalIdValidateBeforeCall(id, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentAvailableRenewal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentAvailableRenewalThumbprint
     * @param thumbprint The certificate thumbprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentAvailableRenewalThumbprintCall(String thumbprint, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Enrollment/AvailableRenewal/Thumbprint/{thumbprint}"
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentAvailableRenewalThumbprintValidateBeforeCall(String thumbprint, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling enrollmentAvailableRenewalThumbprint(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentAvailableRenewalThumbprint(Async)");
        }

        return enrollmentAvailableRenewalThumbprintCall(thumbprint, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns the type of renewal available for a given certificate.
     * 
     * @param thumbprint The certificate thumbprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsEnrollmentAvailableRenewal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrollmentAvailableRenewal enrollmentAvailableRenewalThumbprint(String thumbprint, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsEnrollmentAvailableRenewal> localVarResp = enrollmentAvailableRenewalThumbprintWithHttpInfo(thumbprint, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the type of renewal available for a given certificate.
     * 
     * @param thumbprint The certificate thumbprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsEnrollmentAvailableRenewal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrollmentAvailableRenewal> enrollmentAvailableRenewalThumbprintWithHttpInfo(String thumbprint, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentAvailableRenewalThumbprintValidateBeforeCall(thumbprint, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentAvailableRenewal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the type of renewal available for a given certificate. (asynchronously)
     * 
     * @param thumbprint The certificate thumbprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentAvailableRenewalThumbprintAsync(String thumbprint, String xKeyfactorRequestedWith, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback<ModelsEnrollmentAvailableRenewal> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentAvailableRenewalThumbprintValidateBeforeCall(thumbprint, xKeyfactorRequestedWith, collectionId, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentAvailableRenewal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentGetMyCSRContext
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentGetMyCSRContextCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Enrollment/CSR/Context/My";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentGetMyCSRContextValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentGetMyCSRContext(Async)");
        }

        return enrollmentGetMyCSRContextCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns the list of available CSR enrollment templates and their associated CA mappings that the calling user has permissions on
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return CoreModelsEnrollmentEnrollmentTemplateCAResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CoreModelsEnrollmentEnrollmentTemplateCAResponse enrollmentGetMyCSRContext(String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<CoreModelsEnrollmentEnrollmentTemplateCAResponse> localVarResp = enrollmentGetMyCSRContextWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the list of available CSR enrollment templates and their associated CA mappings that the calling user has permissions on
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;CoreModelsEnrollmentEnrollmentTemplateCAResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreModelsEnrollmentEnrollmentTemplateCAResponse> enrollmentGetMyCSRContextWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentGetMyCSRContextValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<CoreModelsEnrollmentEnrollmentTemplateCAResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of available CSR enrollment templates and their associated CA mappings that the calling user has permissions on (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentGetMyCSRContextAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<CoreModelsEnrollmentEnrollmentTemplateCAResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentGetMyCSRContextValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<CoreModelsEnrollmentEnrollmentTemplateCAResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentGetMyPFXContext
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentGetMyPFXContextCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Enrollment/PFX/Context/My";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentGetMyPFXContextValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentGetMyPFXContext(Async)");
        }

        return enrollmentGetMyPFXContextCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns the list of available PFX enrollment templates and their associated CA mappings that the calling user has permissions on
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return CoreModelsEnrollmentEnrollmentTemplateCAResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CoreModelsEnrollmentEnrollmentTemplateCAResponse enrollmentGetMyPFXContext(String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<CoreModelsEnrollmentEnrollmentTemplateCAResponse> localVarResp = enrollmentGetMyPFXContextWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the list of available PFX enrollment templates and their associated CA mappings that the calling user has permissions on
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;CoreModelsEnrollmentEnrollmentTemplateCAResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreModelsEnrollmentEnrollmentTemplateCAResponse> enrollmentGetMyPFXContextWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentGetMyPFXContextValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<CoreModelsEnrollmentEnrollmentTemplateCAResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of available PFX enrollment templates and their associated CA mappings that the calling user has permissions on (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentGetMyPFXContextAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<CoreModelsEnrollmentEnrollmentTemplateCAResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentGetMyPFXContextValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<CoreModelsEnrollmentEnrollmentTemplateCAResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentGetTemplateEnrollmentSettings
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentGetTemplateEnrollmentSettingsCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Enrollment/Settings/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentGetTemplateEnrollmentSettingsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enrollmentGetTemplateEnrollmentSettings(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentGetTemplateEnrollmentSettings(Async)");
        }

        return enrollmentGetTemplateEnrollmentSettingsCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Gets the template settings to use during enrollment. The response will be the resolved values for the settings.  If there is a template specific setting, the template specific setting will be used in the response.  If there is not a template specific setting, the global setting will be used in the response.
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse enrollmentGetTemplateEnrollmentSettings(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse> localVarResp = enrollmentGetTemplateEnrollmentSettingsWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the template settings to use during enrollment. The response will be the resolved values for the settings.  If there is a template specific setting, the template specific setting will be used in the response.  If there is not a template specific setting, the global setting will be used in the response.
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse> enrollmentGetTemplateEnrollmentSettingsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentGetTemplateEnrollmentSettingsValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the template settings to use during enrollment. The response will be the resolved values for the settings.  If there is a template specific setting, the template specific setting will be used in the response.  If there is not a template specific setting, the global setting will be used in the response. (asynchronously)
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentGetTemplateEnrollmentSettingsAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentGetTemplateEnrollmentSettingsValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsTemplatesTemplateEnrollmentSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentInstallPFXToCertStore
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Ids and management job properties of the cert stores to add the pfx to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentInstallPFXToCertStoreCall(String xKeyfactorRequestedWith, KeyfactorApiModelsEnrollmentEnrollmentManagementRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Enrollment/PFX/Deploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentInstallPFXToCertStoreValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsEnrollmentEnrollmentManagementRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentInstallPFXToCertStore(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling enrollmentInstallPFXToCertStore(Async)");
        }

        return enrollmentInstallPFXToCertStoreCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates management jobs to install a newly enrolled pfx in to one or more certificate stores
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Ids and management job properties of the cert stores to add the pfx to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse enrollmentInstallPFXToCertStore(String xKeyfactorRequestedWith, KeyfactorApiModelsEnrollmentEnrollmentManagementRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse> localVarResp = enrollmentInstallPFXToCertStoreWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates management jobs to install a newly enrolled pfx in to one or more certificate stores
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Ids and management job properties of the cert stores to add the pfx to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse> enrollmentInstallPFXToCertStoreWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsEnrollmentEnrollmentManagementRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentInstallPFXToCertStoreValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates management jobs to install a newly enrolled pfx in to one or more certificate stores (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The request to create the management jobs, which includes the request Id of the new pfx and the Ids and management job properties of the cert stores to add the pfx to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentInstallPFXToCertStoreAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsEnrollmentEnrollmentManagementRequest request, String xKeyfactorApiVersion, final ApiCallback<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentInstallPFXToCertStoreValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorAPIModelsEnrollmentEnrollmentManagementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentPostCSREnroll
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PEM, DER] (required)
     * @param request Information needed to perform the CSR Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentPostCSREnrollCall(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentCSREnrollmentRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Enrollment/CSR";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        if (xCertificateformat != null) {
            localVarHeaderParams.put("x-certificateformat", localVarApiClient.parameterToString(xCertificateformat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentPostCSREnrollValidateBeforeCall(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentCSREnrollmentRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentPostCSREnroll(Async)");
        }

        // verify the required parameter 'xCertificateformat' is set
        if (xCertificateformat == null) {
            throw new ApiException("Missing the required parameter 'xCertificateformat' when calling enrollmentPostCSREnroll(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling enrollmentPostCSREnroll(Async)");
        }

        return enrollmentPostCSREnrollCall(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Performs a CSR Enrollment based upon the provided request
     * ### Subject Alternative Name Flags ###  | Value              | Description               |  |--------------------|---------------------------|  | other              | OtherName                 |  | rfc822             | RFC822Name                |  | dns                | DNSName                   |  | x400               | X400Address               |  | directory          | DirectoryName             |  | ediparty           | EdipartyName              |  | uri                | UniformResourceIdentifier |  | ip                 | IPAddress                 |  | ip4                | IPv4Address               |  | ip6                | IPv6Address               |  | registeredid       | RegisteredId              |  | ms_ntprincipalname | MS_NTPrincipalName        |  | ms_ntdsreplication | MS_NTDSReplication        |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PEM, DER] (required)
     * @param request Information needed to perform the CSR Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsEnrollmentCSREnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrollmentCSREnrollmentResponse enrollmentPostCSREnroll(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentCSREnrollmentRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsEnrollmentCSREnrollmentResponse> localVarResp = enrollmentPostCSREnrollWithHttpInfo(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Performs a CSR Enrollment based upon the provided request
     * ### Subject Alternative Name Flags ###  | Value              | Description               |  |--------------------|---------------------------|  | other              | OtherName                 |  | rfc822             | RFC822Name                |  | dns                | DNSName                   |  | x400               | X400Address               |  | directory          | DirectoryName             |  | ediparty           | EdipartyName              |  | uri                | UniformResourceIdentifier |  | ip                 | IPAddress                 |  | ip4                | IPv4Address               |  | ip6                | IPv6Address               |  | registeredid       | RegisteredId              |  | ms_ntprincipalname | MS_NTPrincipalName        |  | ms_ntdsreplication | MS_NTDSReplication        |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PEM, DER] (required)
     * @param request Information needed to perform the CSR Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsEnrollmentCSREnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrollmentCSREnrollmentResponse> enrollmentPostCSREnrollWithHttpInfo(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentCSREnrollmentRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentPostCSREnrollValidateBeforeCall(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentCSREnrollmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a CSR Enrollment based upon the provided request (asynchronously)
     * ### Subject Alternative Name Flags ###  | Value              | Description               |  |--------------------|---------------------------|  | other              | OtherName                 |  | rfc822             | RFC822Name                |  | dns                | DNSName                   |  | x400               | X400Address               |  | directory          | DirectoryName             |  | ediparty           | EdipartyName              |  | uri                | UniformResourceIdentifier |  | ip                 | IPAddress                 |  | ip4                | IPv4Address               |  | ip6                | IPv6Address               |  | registeredid       | RegisteredId              |  | ms_ntprincipalname | MS_NTPrincipalName        |  | ms_ntdsreplication | MS_NTDSReplication        |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PEM, DER] (required)
     * @param request Information needed to perform the CSR Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentPostCSREnrollAsync(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentCSREnrollmentRequest request, String xKeyfactorApiVersion, final ApiCallback<ModelsEnrollmentCSREnrollmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentPostCSREnrollValidateBeforeCall(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentCSREnrollmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentPostPFXEnroll
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PFX, Zip, STORE] (required)
     * @param request The information needed to perform the PFX Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentPostPFXEnrollCall(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentPFXEnrollmentRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Enrollment/PFX";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        if (xCertificateformat != null) {
            localVarHeaderParams.put("x-certificateformat", localVarApiClient.parameterToString(xCertificateformat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentPostPFXEnrollValidateBeforeCall(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentPFXEnrollmentRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentPostPFXEnroll(Async)");
        }

        // verify the required parameter 'xCertificateformat' is set
        if (xCertificateformat == null) {
            throw new ApiException("Missing the required parameter 'xCertificateformat' when calling enrollmentPostPFXEnroll(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling enrollmentPostPFXEnroll(Async)");
        }

        return enrollmentPostPFXEnrollCall(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Performs a PFX Enrollment based upon the provided request
     * ### IMPORTANT:   - The &lt;b&gt;&#39;RenewalCertificateId&#39;&lt;/b&gt; field in the request should be set to &lt;b&gt;null&lt;/b&gt; if the certificate is not being renewed as part of the enrollment. A value of &lt;b&gt;0&lt;/b&gt; will produce an error.    ### Subject Alternative Name Flags ###  | Value              | Description               |  |--------------------|---------------------------|  | other              | OtherName                 |  | rfc822             | RFC822Name                |  | dns                | DNSName                   |  | x400               | X400Address               |  | directory          | DirectoryName             |  | ediparty           | EdipartyName              |  | uri                | UniformResourceIdentifier |  | ip                 | IPAddress                 |  | ip4                | IPv4Address               |  | ip6                | IPv6Address               |  | registeredid       | RegisteredId              |  | ms_ntprincipalname | MS_NTPrincipalName        |  | ms_ntdsreplication | MS_NTDSReplication        |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PFX, Zip, STORE] (required)
     * @param request The information needed to perform the PFX Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsEnrollmentPFXEnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrollmentPFXEnrollmentResponse enrollmentPostPFXEnroll(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentPFXEnrollmentRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsEnrollmentPFXEnrollmentResponse> localVarResp = enrollmentPostPFXEnrollWithHttpInfo(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Performs a PFX Enrollment based upon the provided request
     * ### IMPORTANT:   - The &lt;b&gt;&#39;RenewalCertificateId&#39;&lt;/b&gt; field in the request should be set to &lt;b&gt;null&lt;/b&gt; if the certificate is not being renewed as part of the enrollment. A value of &lt;b&gt;0&lt;/b&gt; will produce an error.    ### Subject Alternative Name Flags ###  | Value              | Description               |  |--------------------|---------------------------|  | other              | OtherName                 |  | rfc822             | RFC822Name                |  | dns                | DNSName                   |  | x400               | X400Address               |  | directory          | DirectoryName             |  | ediparty           | EdipartyName              |  | uri                | UniformResourceIdentifier |  | ip                 | IPAddress                 |  | ip4                | IPv4Address               |  | ip6                | IPv6Address               |  | registeredid       | RegisteredId              |  | ms_ntprincipalname | MS_NTPrincipalName        |  | ms_ntdsreplication | MS_NTDSReplication        |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PFX, Zip, STORE] (required)
     * @param request The information needed to perform the PFX Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsEnrollmentPFXEnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrollmentPFXEnrollmentResponse> enrollmentPostPFXEnrollWithHttpInfo(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentPFXEnrollmentRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentPostPFXEnrollValidateBeforeCall(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentPFXEnrollmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a PFX Enrollment based upon the provided request (asynchronously)
     * ### IMPORTANT:   - The &lt;b&gt;&#39;RenewalCertificateId&#39;&lt;/b&gt; field in the request should be set to &lt;b&gt;null&lt;/b&gt; if the certificate is not being renewed as part of the enrollment. A value of &lt;b&gt;0&lt;/b&gt; will produce an error.    ### Subject Alternative Name Flags ###  | Value              | Description               |  |--------------------|---------------------------|  | other              | OtherName                 |  | rfc822             | RFC822Name                |  | dns                | DNSName                   |  | x400               | X400Address               |  | directory          | DirectoryName             |  | ediparty           | EdipartyName              |  | uri                | UniformResourceIdentifier |  | ip                 | IPAddress                 |  | ip4                | IPv4Address               |  | ip6                | IPv6Address               |  | registeredid       | RegisteredId              |  | ms_ntprincipalname | MS_NTPrincipalName        |  | ms_ntdsreplication | MS_NTDSReplication        |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xCertificateformat Desired format [PFX, Zip, STORE] (required)
     * @param request The information needed to perform the PFX Enrollment (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentPostPFXEnrollAsync(String xKeyfactorRequestedWith, String xCertificateformat, ModelsEnrollmentPFXEnrollmentRequest request, String xKeyfactorApiVersion, final ApiCallback<ModelsEnrollmentPFXEnrollmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentPostPFXEnrollValidateBeforeCall(xKeyfactorRequestedWith, xCertificateformat, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentPFXEnrollmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentPostParsedCSR
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param csr CSR to be parsed (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentPostParsedCSRCall(String xKeyfactorRequestedWith, ModelsCSRContents csr, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = csr;

        // create path and map variables
        String localVarPath = "/Enrollment/CSR/Parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentPostParsedCSRValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCSRContents csr, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentPostParsedCSR(Async)");
        }

        // verify the required parameter 'csr' is set
        if (csr == null) {
            throw new ApiException("Missing the required parameter 'csr' when calling enrollmentPostParsedCSR(Async)");
        }

        return enrollmentPostParsedCSRCall(xKeyfactorRequestedWith, csr, xKeyfactorApiVersion, _callback);

    }

    /**
     * Parses the provided CSR and returns the properties
     * This functionality is equivalent to the result of pasting a CSR into the field within the Management Portal CSR Enrollment page.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param csr CSR to be parsed (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> enrollmentPostParsedCSR(String xKeyfactorRequestedWith, ModelsCSRContents csr, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<String>> localVarResp = enrollmentPostParsedCSRWithHttpInfo(xKeyfactorRequestedWith, csr, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Parses the provided CSR and returns the properties
     * This functionality is equivalent to the result of pasting a CSR into the field within the Management Portal CSR Enrollment page.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param csr CSR to be parsed (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> enrollmentPostParsedCSRWithHttpInfo(String xKeyfactorRequestedWith, ModelsCSRContents csr, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentPostParsedCSRValidateBeforeCall(xKeyfactorRequestedWith, csr, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parses the provided CSR and returns the properties (asynchronously)
     * This functionality is equivalent to the result of pasting a CSR into the field within the Management Portal CSR Enrollment page.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param csr CSR to be parsed (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentPostParsedCSRAsync(String xKeyfactorRequestedWith, ModelsCSRContents csr, String xKeyfactorApiVersion, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentPostParsedCSRValidateBeforeCall(xKeyfactorRequestedWith, csr, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollmentRenew
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The information needed to perform the renewal (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentRenewCall(String xKeyfactorRequestedWith, ModelsEnrollmentRenewalRequest request, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Enrollment/Renew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollmentRenewValidateBeforeCall(String xKeyfactorRequestedWith, ModelsEnrollmentRenewalRequest request, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling enrollmentRenew(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling enrollmentRenew(Async)");
        }

        return enrollmentRenewCall(xKeyfactorRequestedWith, request, collectionId, xKeyfactorApiVersion, _callback);

    }

    /**
     * Performs a renewal based upon the passed in request
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The information needed to perform the renewal (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsEnrollmentRenewalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrollmentRenewalResponse enrollmentRenew(String xKeyfactorRequestedWith, ModelsEnrollmentRenewalRequest request, Integer collectionId, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsEnrollmentRenewalResponse> localVarResp = enrollmentRenewWithHttpInfo(xKeyfactorRequestedWith, request, collectionId, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Performs a renewal based upon the passed in request
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The information needed to perform the renewal (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsEnrollmentRenewalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrollmentRenewalResponse> enrollmentRenewWithHttpInfo(String xKeyfactorRequestedWith, ModelsEnrollmentRenewalRequest request, Integer collectionId, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = enrollmentRenewValidateBeforeCall(xKeyfactorRequestedWith, request, collectionId, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentRenewalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a renewal based upon the passed in request (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The information needed to perform the renewal (required)
     * @param collectionId The collection id for the given certificate (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollmentRenewAsync(String xKeyfactorRequestedWith, ModelsEnrollmentRenewalRequest request, Integer collectionId, String xKeyfactorApiVersion, final ApiCallback<ModelsEnrollmentRenewalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollmentRenewValidateBeforeCall(xKeyfactorRequestedWith, request, collectionId, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrollmentRenewalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
