/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringOCSPParametersRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringOCSPParametersResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MonitoringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MonitoringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonitoringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for monitoringAddRevocationMonitoring
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringAddRevocationMonitoringCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest endpoint, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpoint;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringAddRevocationMonitoringValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest endpoint, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringAddRevocationMonitoring(Async)");
        }

        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling monitoringAddRevocationMonitoring(Async)");
        }

        return monitoringAddRevocationMonitoringCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, _callback);

    }

    /**
     * Add a revocation monitoring endpoint
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse monitoringAddRevocationMonitoring(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest endpoint, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> localVarResp = monitoringAddRevocationMonitoringWithHttpInfo(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Add a revocation monitoring endpoint
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> monitoringAddRevocationMonitoringWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest endpoint, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringAddRevocationMonitoringValidateBeforeCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a revocation monitoring endpoint (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringAddRevocationMonitoringAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest endpoint, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringAddRevocationMonitoringValidateBeforeCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringDeleteRevocationMonitoring
     * @param id Id for the revocation monitoring endpoint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringDeleteRevocationMonitoringCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringDeleteRevocationMonitoringValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling monitoringDeleteRevocationMonitoring(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringDeleteRevocationMonitoring(Async)");
        }

        return monitoringDeleteRevocationMonitoringCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Delete a revocation monitoring endpoint
     * 
     * @param id Id for the revocation monitoring endpoint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void monitoringDeleteRevocationMonitoring(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        monitoringDeleteRevocationMonitoringWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Delete a revocation monitoring endpoint
     * 
     * @param id Id for the revocation monitoring endpoint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> monitoringDeleteRevocationMonitoringWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringDeleteRevocationMonitoringValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a revocation monitoring endpoint (asynchronously)
     * 
     * @param id Id for the revocation monitoring endpoint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringDeleteRevocationMonitoringAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringDeleteRevocationMonitoringValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringEditRevocationMonitoring
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringEditRevocationMonitoringCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest endpoint, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpoint;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringEditRevocationMonitoringValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest endpoint, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringEditRevocationMonitoring(Async)");
        }

        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling monitoringEditRevocationMonitoring(Async)");
        }

        return monitoringEditRevocationMonitoringCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, _callback);

    }

    /**
     * Edit a revocation monitoring endpoint
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse monitoringEditRevocationMonitoring(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest endpoint, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> localVarResp = monitoringEditRevocationMonitoringWithHttpInfo(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Edit a revocation monitoring endpoint
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> monitoringEditRevocationMonitoringWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest endpoint, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringEditRevocationMonitoringValidateBeforeCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a revocation monitoring endpoint (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringEditRevocationMonitoringAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest endpoint, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringEditRevocationMonitoringValidateBeforeCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringGetRevocationMonitoring
     * @param id Id for the endpoint to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringGetRevocationMonitoringCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringGetRevocationMonitoringValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling monitoringGetRevocationMonitoring(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringGetRevocationMonitoring(Async)");
        }

        return monitoringGetRevocationMonitoringCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Get a revocation monitoring endpoint
     * 
     * @param id Id for the endpoint to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse monitoringGetRevocationMonitoring(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> localVarResp = monitoringGetRevocationMonitoringWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a revocation monitoring endpoint
     * 
     * @param id Id for the endpoint to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> monitoringGetRevocationMonitoringWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringGetRevocationMonitoringValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a revocation monitoring endpoint (asynchronously)
     * 
     * @param id Id for the endpoint to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringGetRevocationMonitoringAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringGetRevocationMonitoringValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringGetRevocationMonitoringEndpoints
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringGetRevocationMonitoringEndpointsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagedQueryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.queryString", pagedQueryQueryString));
        }

        if (pagedQueryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.pageReturned", pagedQueryPageReturned));
        }

        if (pagedQueryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.returnLimit", pagedQueryReturnLimit));
        }

        if (pagedQuerySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.sortField", pagedQuerySortField));
        }

        if (pagedQuerySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.sortAscending", pagedQuerySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringGetRevocationMonitoringEndpointsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringGetRevocationMonitoringEndpoints(Async)");
        }

        return monitoringGetRevocationMonitoringEndpointsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending, _callback);

    }

    /**
     * Gets all revocation monitoring endpoints according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse> monitoringGetRevocationMonitoringEndpoints(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>> localVarResp = monitoringGetRevocationMonitoringEndpointsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending);
        return localVarResp.getData();
    }

    /**
     * Gets all revocation monitoring endpoints according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>> monitoringGetRevocationMonitoringEndpointsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending) throws ApiException {
        okhttp3.Call localVarCall = monitoringGetRevocationMonitoringEndpointsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all revocation monitoring endpoints according to the provided filter and output parameters (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringGetRevocationMonitoringEndpointsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending, final ApiCallback<List<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringGetRevocationMonitoringEndpointsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringResolveOCSP
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringResolveOCSPCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringOCSPParametersRequest endpoint, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpoint;

        // create path and map variables
        String localVarPath = "/Monitoring/ResolveOCSP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringResolveOCSPValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringOCSPParametersRequest endpoint, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringResolveOCSP(Async)");
        }

        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling monitoringResolveOCSP(Async)");
        }

        return monitoringResolveOCSPCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, _callback);

    }

    /**
     * Resolve the Certificate authority given
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsMonitoringOCSPParametersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsMonitoringOCSPParametersResponse monitoringResolveOCSP(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringOCSPParametersRequest endpoint, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsMonitoringOCSPParametersResponse> localVarResp = monitoringResolveOCSPWithHttpInfo(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Resolve the Certificate authority given
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsMonitoringOCSPParametersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsMonitoringOCSPParametersResponse> monitoringResolveOCSPWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringOCSPParametersRequest endpoint, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringResolveOCSPValidateBeforeCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringOCSPParametersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resolve the Certificate authority given (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param endpoint Information for the new endpoint (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringResolveOCSPAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringOCSPParametersRequest endpoint, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsMonitoringOCSPParametersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringResolveOCSPValidateBeforeCall(xKeyfactorRequestedWith, endpoint, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringOCSPParametersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringTestAllRevocationMonitoringAlert
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringTestAllRevocationMonitoringAlertCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revocationMonitoringAlertTestRequest;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation/TestAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringTestAllRevocationMonitoringAlertValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringTestAllRevocationMonitoringAlert(Async)");
        }

        // verify the required parameter 'revocationMonitoringAlertTestRequest' is set
        if (revocationMonitoringAlertTestRequest == null) {
            throw new ApiException("Missing the required parameter 'revocationMonitoringAlertTestRequest' when calling monitoringTestAllRevocationMonitoringAlert(Async)");
        }

        return monitoringTestAllRevocationMonitoringAlertCall(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Test All Alerts
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse monitoringTestAllRevocationMonitoringAlert(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse> localVarResp = monitoringTestAllRevocationMonitoringAlertWithHttpInfo(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Test All Alerts
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse> monitoringTestAllRevocationMonitoringAlertWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringTestAllRevocationMonitoringAlertValidateBeforeCall(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test All Alerts (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringTestAllRevocationMonitoringAlertAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringTestAllRevocationMonitoringAlertValidateBeforeCall(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for monitoringTestRevocationMonitoringAlert
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringTestRevocationMonitoringAlertCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revocationMonitoringAlertTestRequest;

        // create path and map variables
        String localVarPath = "/Monitoring/Revocation/Test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call monitoringTestRevocationMonitoringAlertValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling monitoringTestRevocationMonitoringAlert(Async)");
        }

        // verify the required parameter 'revocationMonitoringAlertTestRequest' is set
        if (revocationMonitoringAlertTestRequest == null) {
            throw new ApiException("Missing the required parameter 'revocationMonitoringAlertTestRequest' when calling monitoringTestRevocationMonitoringAlert(Async)");
        }

        return monitoringTestRevocationMonitoringAlertCall(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Test Alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse monitoringTestRevocationMonitoringAlert(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse> localVarResp = monitoringTestRevocationMonitoringAlertWithHttpInfo(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Test Alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse> monitoringTestRevocationMonitoringAlertWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = monitoringTestRevocationMonitoringAlertValidateBeforeCall(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test Alert (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param revocationMonitoringAlertTestRequest Information about the revocation monitoring alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call monitoringTestRevocationMonitoringAlertAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest revocationMonitoringAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = monitoringTestRevocationMonitoringAlertValidateBeforeCall(xKeyfactorRequestedWith, revocationMonitoringAlertTestRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
