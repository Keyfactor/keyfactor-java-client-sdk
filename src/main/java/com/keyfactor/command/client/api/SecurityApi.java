/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.ModelsSecurityIdentitiesSecurityIdentityLookupResponse;
import com.keyfactor.command.client.model.ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SecurityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for securityDeleteSecurityIdentity
     * @param id The ID of the security identity to be deleted. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityDeleteSecurityIdentityCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Identities/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityDeleteSecurityIdentityValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityDeleteSecurityIdentity(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityDeleteSecurityIdentity(Async)");
        }

        return securityDeleteSecurityIdentityCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes the security identity whose ID is provided.
     * 
     * @param id The ID of the security identity to be deleted. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void securityDeleteSecurityIdentity(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        securityDeleteSecurityIdentityWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes the security identity whose ID is provided.
     * 
     * @param id The ID of the security identity to be deleted. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityDeleteSecurityIdentityWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityDeleteSecurityIdentityValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the security identity whose ID is provided. (asynchronously)
     * 
     * @param id The ID of the security identity to be deleted. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityDeleteSecurityIdentityAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityDeleteSecurityIdentityValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityIdentityPermissions
     * @param id The identifier of the security identity (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityIdentityPermissionsCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Identities/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityIdentityPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityIdentityPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityIdentityPermissions(Async)");
        }

        return securityIdentityPermissionsCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Gets an object representing the permissions of the identity associated with the provided identifier.
     * 
     * @param id The identifier of the security identity (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse securityIdentityPermissions(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse> localVarResp = securityIdentityPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an object representing the permissions of the identity associated with the provided identifier.
     * 
     * @param id The identifier of the security identity (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse> securityIdentityPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityIdentityPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an object representing the permissions of the identity associated with the provided identifier. (asynchronously)
     * 
     * @param id The identifier of the security identity (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityIdentityPermissionsAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityIdentityPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsSecurityIdentitiesSecurityIdentityPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityLookupIdentity
     * @param accountName The name of an identity we wish to check. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityLookupIdentityCall(String accountName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Identities/Lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityLookupIdentityValidateBeforeCall(String accountName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling securityLookupIdentity(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityLookupIdentity(Async)");
        }

        return securityLookupIdentityCall(accountName, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Validates that the identity with the name given exists.
     * 
     * @param accountName The name of an identity we wish to check. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsSecurityIdentitiesSecurityIdentityLookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSecurityIdentitiesSecurityIdentityLookupResponse securityLookupIdentity(String accountName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsSecurityIdentitiesSecurityIdentityLookupResponse> localVarResp = securityLookupIdentityWithHttpInfo(accountName, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Validates that the identity with the name given exists.
     * 
     * @param accountName The name of an identity we wish to check. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsSecurityIdentitiesSecurityIdentityLookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSecurityIdentitiesSecurityIdentityLookupResponse> securityLookupIdentityWithHttpInfo(String accountName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityLookupIdentityValidateBeforeCall(accountName, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsSecurityIdentitiesSecurityIdentityLookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates that the identity with the name given exists. (asynchronously)
     * 
     * @param accountName The name of an identity we wish to check. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityLookupIdentityAsync(String accountName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsSecurityIdentitiesSecurityIdentityLookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityLookupIdentityValidateBeforeCall(accountName, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsSecurityIdentitiesSecurityIdentityLookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
