/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.ModelsCSRContents;
import com.keyfactor.command.client.model.ModelsCSRGenerationResponseModel;
import com.keyfactor.command.client.model.ModelsEnrollmentCSRGenerationRequest;
import com.keyfactor.command.client.model.ModelsPendingCSRResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CsrGenerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CsrGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CsrGenerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cSRGenerationDeleteCSR
     * @param id Keyfactor identifer of the CSR to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationDeleteCSRCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CSRGeneration/Pending/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cSRGenerationDeleteCSRValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cSRGenerationDeleteCSR(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling cSRGenerationDeleteCSR(Async)");
        }

        return cSRGenerationDeleteCSRCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes a CSR associated with the provided identifier
     * 
     * @param id Keyfactor identifer of the CSR to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void cSRGenerationDeleteCSR(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        cSRGenerationDeleteCSRWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes a CSR associated with the provided identifier
     * 
     * @param id Keyfactor identifer of the CSR to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cSRGenerationDeleteCSRWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = cSRGenerationDeleteCSRValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a CSR associated with the provided identifier (asynchronously)
     * 
     * @param id Keyfactor identifer of the CSR to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationDeleteCSRAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cSRGenerationDeleteCSRValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cSRGenerationDeleteCSRs
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers for the CSRs to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationDeleteCSRsCall(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/CSRGeneration/Pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cSRGenerationDeleteCSRsValidateBeforeCall(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling cSRGenerationDeleteCSRs(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling cSRGenerationDeleteCSRs(Async)");
        }

        return cSRGenerationDeleteCSRsCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes the CSRs associated with the provided identifiers
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers for the CSRs to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void cSRGenerationDeleteCSRs(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion) throws ApiException {
        cSRGenerationDeleteCSRsWithHttpInfo(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion);
    }

    /**
     * Deletes the CSRs associated with the provided identifiers
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers for the CSRs to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cSRGenerationDeleteCSRsWithHttpInfo(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = cSRGenerationDeleteCSRsValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the CSRs associated with the provided identifiers (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers for the CSRs to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationDeleteCSRsAsync(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cSRGenerationDeleteCSRsValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cSRGenerationDownload
     * @param id Keyfactor identifier of the CSR (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationDownloadCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CSRGeneration/Pending/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cSRGenerationDownloadValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cSRGenerationDownload(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling cSRGenerationDownload(Async)");
        }

        return cSRGenerationDownloadCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns a previously generated CSR associated with the provided identifier
     * 
     * @param id Keyfactor identifier of the CSR (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCSRGenerationResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCSRGenerationResponseModel cSRGenerationDownload(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCSRGenerationResponseModel> localVarResp = cSRGenerationDownloadWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns a previously generated CSR associated with the provided identifier
     * 
     * @param id Keyfactor identifier of the CSR (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCSRGenerationResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCSRGenerationResponseModel> cSRGenerationDownloadWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = cSRGenerationDownloadValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCSRGenerationResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a previously generated CSR associated with the provided identifier (asynchronously)
     * 
     * @param id Keyfactor identifier of the CSR (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationDownloadAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsCSRGenerationResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = cSRGenerationDownloadValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCSRGenerationResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cSRGenerationGetPendingCSRs
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param sqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param sqPageReturned The current page within the result set to be returned (optional)
     * @param sqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param sqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param sqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationGetPendingCSRsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String sqQueryString, Integer sqPageReturned, Integer sqReturnLimit, String sqSortField, Integer sqSortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CSRGeneration/Pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sqQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sq.queryString", sqQueryString));
        }

        if (sqPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sq.pageReturned", sqPageReturned));
        }

        if (sqReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sq.returnLimit", sqReturnLimit));
        }

        if (sqSortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sq.sortField", sqSortField));
        }

        if (sqSortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sq.sortAscending", sqSortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cSRGenerationGetPendingCSRsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String sqQueryString, Integer sqPageReturned, Integer sqReturnLimit, String sqSortField, Integer sqSortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling cSRGenerationGetPendingCSRs(Async)");
        }

        return cSRGenerationGetPendingCSRsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, sqQueryString, sqPageReturned, sqReturnLimit, sqSortField, sqSortAscending, _callback);

    }

    /**
     * Returns a list of the currently pending CSRs according to the provided query
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param sqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param sqPageReturned The current page within the result set to be returned (optional)
     * @param sqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param sqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param sqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;ModelsPendingCSRResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsPendingCSRResponse> cSRGenerationGetPendingCSRs(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String sqQueryString, Integer sqPageReturned, Integer sqReturnLimit, String sqSortField, Integer sqSortAscending) throws ApiException {
        ApiResponse<List<ModelsPendingCSRResponse>> localVarResp = cSRGenerationGetPendingCSRsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, sqQueryString, sqPageReturned, sqReturnLimit, sqSortField, sqSortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns a list of the currently pending CSRs according to the provided query
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param sqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param sqPageReturned The current page within the result set to be returned (optional)
     * @param sqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param sqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param sqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;ModelsPendingCSRResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsPendingCSRResponse>> cSRGenerationGetPendingCSRsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String sqQueryString, Integer sqPageReturned, Integer sqReturnLimit, String sqSortField, Integer sqSortAscending) throws ApiException {
        okhttp3.Call localVarCall = cSRGenerationGetPendingCSRsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, sqQueryString, sqPageReturned, sqReturnLimit, sqSortField, sqSortAscending, null);
        Type localVarReturnType = new TypeToken<List<ModelsPendingCSRResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of the currently pending CSRs according to the provided query (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param sqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param sqPageReturned The current page within the result set to be returned (optional)
     * @param sqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param sqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param sqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationGetPendingCSRsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String sqQueryString, Integer sqPageReturned, Integer sqReturnLimit, String sqSortField, Integer sqSortAscending, final ApiCallback<List<ModelsPendingCSRResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cSRGenerationGetPendingCSRsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, sqQueryString, sqPageReturned, sqReturnLimit, sqSortField, sqSortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsPendingCSRResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cSRGenerationPostGenerate
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param context CSR properties used to define the request - Key type [RSA, ECC], Key sizes (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521), template short name or OID (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationPostGenerateCall(String xKeyfactorRequestedWith, ModelsEnrollmentCSRGenerationRequest context, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = context;

        // create path and map variables
        String localVarPath = "/CSRGeneration/Generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cSRGenerationPostGenerateValidateBeforeCall(String xKeyfactorRequestedWith, ModelsEnrollmentCSRGenerationRequest context, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling cSRGenerationPostGenerate(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling cSRGenerationPostGenerate(Async)");
        }

        return cSRGenerationPostGenerateCall(xKeyfactorRequestedWith, context, xKeyfactorApiVersion, _callback);

    }

    /**
     * Generates a CSR according the properties provided
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param context CSR properties used to define the request - Key type [RSA, ECC], Key sizes (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521), template short name or OID (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCSRContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsCSRContents cSRGenerationPostGenerate(String xKeyfactorRequestedWith, ModelsEnrollmentCSRGenerationRequest context, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCSRContents> localVarResp = cSRGenerationPostGenerateWithHttpInfo(xKeyfactorRequestedWith, context, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Generates a CSR according the properties provided
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param context CSR properties used to define the request - Key type [RSA, ECC], Key sizes (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521), template short name or OID (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCSRContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsCSRContents> cSRGenerationPostGenerateWithHttpInfo(String xKeyfactorRequestedWith, ModelsEnrollmentCSRGenerationRequest context, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = cSRGenerationPostGenerateValidateBeforeCall(xKeyfactorRequestedWith, context, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCSRContents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a CSR according the properties provided (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param context CSR properties used to define the request - Key type [RSA, ECC], Key sizes (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521), template short name or OID (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cSRGenerationPostGenerateAsync(String xKeyfactorRequestedWith, ModelsEnrollmentCSRGenerationRequest context, String xKeyfactorApiVersion, final ApiCallback<ModelsCSRContents> _callback) throws ApiException {

        okhttp3.Call localVarCall = cSRGenerationPostGenerateValidateBeforeCall(xKeyfactorRequestedWith, context, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCSRContents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
