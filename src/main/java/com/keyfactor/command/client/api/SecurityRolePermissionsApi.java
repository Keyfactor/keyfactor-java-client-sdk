/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesAreaPermissionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesContainerPermissionRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesContainerPermissionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SecurityRolePermissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityRolePermissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityRolePermissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for securityRolePermissionsAddCollectionPermissions
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsAddCollectionPermissionsCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionPermissions;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Collections"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsAddCollectionPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsAddCollectionPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsAddCollectionPermissions(Async)");
        }

        // verify the required parameter 'collectionPermissions' is set
        if (collectionPermissions == null) {
            throw new ApiException("Missing the required parameter 'collectionPermissions' when calling securityRolePermissionsAddCollectionPermissions(Async)");
        }

        return securityRolePermissionsAddCollectionPermissionsCall(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion, _callback);

    }

    /**
     * Adds collection permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Permission Display Name   |  |---------------|---------------------------|  | Read          | Read                      |  | EditMetadata  | Edit Metadata             |  | Recover       | Download with Private Key |  | Revoke        | Revoke                    |  | Delete        | Delete                    |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse> securityRolePermissionsAddCollectionPermissions(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> localVarResp = securityRolePermissionsAddCollectionPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Adds collection permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Permission Display Name   |  |---------------|---------------------------|  | Read          | Read                      |  | EditMetadata  | Edit Metadata             |  | Recover       | Download with Private Key |  | Revoke        | Revoke                    |  | Delete        | Delete                    |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> securityRolePermissionsAddCollectionPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsAddCollectionPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds collection permissions to the security role that matches the id. (asynchronously)
     * ### Valid Permissions ###  | Permission    | Permission Display Name   |  |---------------|---------------------------|  | Read          | Read                      |  | EditMetadata  | Edit Metadata             |  | Recover       | Download with Private Key |  | Revoke        | Revoke                    |  | Delete        | Delete                    |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsAddCollectionPermissionsAsync(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsAddCollectionPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsAddContainerPermissions
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsAddContainerPermissionsCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerPermissions;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Containers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsAddContainerPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsAddContainerPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsAddContainerPermissions(Async)");
        }

        // verify the required parameter 'containerPermissions' is set
        if (containerPermissions == null) {
            throw new ApiException("Missing the required parameter 'containerPermissions' when calling securityRolePermissionsAddContainerPermissions(Async)");
        }

        return securityRolePermissionsAddContainerPermissionsCall(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion, _callback);

    }

    /**
     * Adds container permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Requisite Permissions |  |---------------|-----------------------|  | Read          |                       |  | Schedule      | Read                  |  | Modify        | Read, Schedule        |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesContainerPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse> securityRolePermissionsAddContainerPermissions(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> localVarResp = securityRolePermissionsAddContainerPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Adds container permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Requisite Permissions |  |---------------|-----------------------|  | Read          |                       |  | Schedule      | Read                  |  | Modify        | Read, Schedule        |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesContainerPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> securityRolePermissionsAddContainerPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsAddContainerPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds container permissions to the security role that matches the id. (asynchronously)
     * ### Valid Permissions ###  | Permission    | Requisite Permissions |  |---------------|-----------------------|  | Read          |                       |  | Schedule      | Read                  |  | Modify        | Read, Schedule        |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsAddContainerPermissionsAsync(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsAddContainerPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsAddGlobalPermissions
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsAddGlobalPermissionsCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalPermissions;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Global"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsAddGlobalPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsAddGlobalPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsAddGlobalPermissions(Async)");
        }

        // verify the required parameter 'globalPermissions' is set
        if (globalPermissions == null) {
            throw new ApiException("Missing the required parameter 'globalPermissions' when calling securityRolePermissionsAddGlobalPermissions(Async)");
        }

        return securityRolePermissionsAddGlobalPermissionsCall(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion, _callback);

    }

    /**
     * Adds global permissions to the security role that matches the id.
     * ### Valid Global Permissions ###  | Area                          | Permission        |  |-------------------------------|-------------------|  | AdminPortal                   | Read              |  | AgentAutoRegistration         | Read              |  | AgentAutoRegistration         | Modify            |  | AgentManagement               | Read              |  | AgentManagement               | Modify            |  | API                           | Read              |  | ApplicationSettings           | Read              |  | ApplicationSettings           | Modify            |  | Auditing                      | Read              |  | CertificateCollections        | Modify            |  | CertificateEnrollment         | EnrollPFX         |  | CertificateEnrollment         | EnrollCSR         |  | CertificateEnrollment         | CsrGeneration     |  | CertificateEnrollment         | PendingCsr        |  | CertificateMetadataTypes      | Read              |  | CertificateMetadataTypes      | Modify            |  | Certificates                  | Read              |  | Certificates                  | EditMetadata      |  | Certificates                  | Import            |  | Certificates                  | Recover           |  | Certificates                  | Revoke            |  | Certificates                  | Delete            |  | Certificates                  | ImportPrivateKey  |  | CertificateStoreManagement    | Read              |  | CertificateStoreManagement    | Schedule          |  | CertificateStoreManagement    | Modify            |  | Dashboard                     | Read              |  | Dashboard                     | RiskHeader        |  | EventHandlerRegistration      | Read              |  | EventHandlerRegistration      | Modify            |  | MacAutoEnrollManagement       | Read              |  | MacAutoEnrollManagement       | Modify            |  | Monitoring                    | Read              |  | Monitoring                    | Modify            |  | Monitoring                    | Test              |  | PkiManagement                 | Read              |  | PkiManagement                 | Modify            |  | PrivilegedAccessManagement    | Read              |  | PrivilegedAccessManagement    | Modify            |  | Reports                       | Read              |  | Reports                       | Modify            |  | SecuritySettings              | Read              |  | SecuritySettings              | Modify            |  | SSH                           | User              |  | SSH                           | ServerAdmin       |  | SSH                           | EnterpriseAdmin   |  | SslManagement                 | Read              |  | SslManagement                 | Modify            |  | SystemSettings                | Read              |  | SystemSettings                | Modify            |  | WorkflowDefinitions           | Read              |  | WorkflowDefinitions           | Modify            |  | WorkflowInstances             | ReadAll           |  | WorkflowInstances             | ReadAssignedToMe  |  | WorkflowInstances             | ReadMy            |  | WorkflowInstances             | Manage            |  | WorkflowManagement            | Read              |  | WorkflowManagement            | Modify            |  | WorkflowManagement            | Test              |  | WorkflowManagement            | Participate       |  | WorkflowManagement            | Manage            |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse> securityRolePermissionsAddGlobalPermissions(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> localVarResp = securityRolePermissionsAddGlobalPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Adds global permissions to the security role that matches the id.
     * ### Valid Global Permissions ###  | Area                          | Permission        |  |-------------------------------|-------------------|  | AdminPortal                   | Read              |  | AgentAutoRegistration         | Read              |  | AgentAutoRegistration         | Modify            |  | AgentManagement               | Read              |  | AgentManagement               | Modify            |  | API                           | Read              |  | ApplicationSettings           | Read              |  | ApplicationSettings           | Modify            |  | Auditing                      | Read              |  | CertificateCollections        | Modify            |  | CertificateEnrollment         | EnrollPFX         |  | CertificateEnrollment         | EnrollCSR         |  | CertificateEnrollment         | CsrGeneration     |  | CertificateEnrollment         | PendingCsr        |  | CertificateMetadataTypes      | Read              |  | CertificateMetadataTypes      | Modify            |  | Certificates                  | Read              |  | Certificates                  | EditMetadata      |  | Certificates                  | Import            |  | Certificates                  | Recover           |  | Certificates                  | Revoke            |  | Certificates                  | Delete            |  | Certificates                  | ImportPrivateKey  |  | CertificateStoreManagement    | Read              |  | CertificateStoreManagement    | Schedule          |  | CertificateStoreManagement    | Modify            |  | Dashboard                     | Read              |  | Dashboard                     | RiskHeader        |  | EventHandlerRegistration      | Read              |  | EventHandlerRegistration      | Modify            |  | MacAutoEnrollManagement       | Read              |  | MacAutoEnrollManagement       | Modify            |  | Monitoring                    | Read              |  | Monitoring                    | Modify            |  | Monitoring                    | Test              |  | PkiManagement                 | Read              |  | PkiManagement                 | Modify            |  | PrivilegedAccessManagement    | Read              |  | PrivilegedAccessManagement    | Modify            |  | Reports                       | Read              |  | Reports                       | Modify            |  | SecuritySettings              | Read              |  | SecuritySettings              | Modify            |  | SSH                           | User              |  | SSH                           | ServerAdmin       |  | SSH                           | EnterpriseAdmin   |  | SslManagement                 | Read              |  | SslManagement                 | Modify            |  | SystemSettings                | Read              |  | SystemSettings                | Modify            |  | WorkflowDefinitions           | Read              |  | WorkflowDefinitions           | Modify            |  | WorkflowInstances             | ReadAll           |  | WorkflowInstances             | ReadAssignedToMe  |  | WorkflowInstances             | ReadMy            |  | WorkflowInstances             | Manage            |  | WorkflowManagement            | Read              |  | WorkflowManagement            | Modify            |  | WorkflowManagement            | Test              |  | WorkflowManagement            | Participate       |  | WorkflowManagement            | Manage            |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> securityRolePermissionsAddGlobalPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsAddGlobalPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds global permissions to the security role that matches the id. (asynchronously)
     * ### Valid Global Permissions ###  | Area                          | Permission        |  |-------------------------------|-------------------|  | AdminPortal                   | Read              |  | AgentAutoRegistration         | Read              |  | AgentAutoRegistration         | Modify            |  | AgentManagement               | Read              |  | AgentManagement               | Modify            |  | API                           | Read              |  | ApplicationSettings           | Read              |  | ApplicationSettings           | Modify            |  | Auditing                      | Read              |  | CertificateCollections        | Modify            |  | CertificateEnrollment         | EnrollPFX         |  | CertificateEnrollment         | EnrollCSR         |  | CertificateEnrollment         | CsrGeneration     |  | CertificateEnrollment         | PendingCsr        |  | CertificateMetadataTypes      | Read              |  | CertificateMetadataTypes      | Modify            |  | Certificates                  | Read              |  | Certificates                  | EditMetadata      |  | Certificates                  | Import            |  | Certificates                  | Recover           |  | Certificates                  | Revoke            |  | Certificates                  | Delete            |  | Certificates                  | ImportPrivateKey  |  | CertificateStoreManagement    | Read              |  | CertificateStoreManagement    | Schedule          |  | CertificateStoreManagement    | Modify            |  | Dashboard                     | Read              |  | Dashboard                     | RiskHeader        |  | EventHandlerRegistration      | Read              |  | EventHandlerRegistration      | Modify            |  | MacAutoEnrollManagement       | Read              |  | MacAutoEnrollManagement       | Modify            |  | Monitoring                    | Read              |  | Monitoring                    | Modify            |  | Monitoring                    | Test              |  | PkiManagement                 | Read              |  | PkiManagement                 | Modify            |  | PrivilegedAccessManagement    | Read              |  | PrivilegedAccessManagement    | Modify            |  | Reports                       | Read              |  | Reports                       | Modify            |  | SecuritySettings              | Read              |  | SecuritySettings              | Modify            |  | SSH                           | User              |  | SSH                           | ServerAdmin       |  | SSH                           | EnterpriseAdmin   |  | SslManagement                 | Read              |  | SslManagement                 | Modify            |  | SystemSettings                | Read              |  | SystemSettings                | Modify            |  | WorkflowDefinitions           | Read              |  | WorkflowDefinitions           | Modify            |  | WorkflowInstances             | ReadAll           |  | WorkflowInstances             | ReadAssignedToMe  |  | WorkflowInstances             | ReadMy            |  | WorkflowInstances             | Manage            |  | WorkflowManagement            | Read              |  | WorkflowManagement            | Modify            |  | WorkflowManagement            | Test              |  | WorkflowManagement            | Participate       |  | WorkflowManagement            | Manage            |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsAddGlobalPermissionsAsync(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsAddGlobalPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsGetCollectionPermissionsForRole
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetCollectionPermissionsForRoleCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Collections"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsGetCollectionPermissionsForRoleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsGetCollectionPermissionsForRole(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsGetCollectionPermissionsForRole(Async)");
        }

        return securityRolePermissionsGetCollectionPermissionsForRoleCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns all collection permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse> securityRolePermissionsGetCollectionPermissionsForRole(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> localVarResp = securityRolePermissionsGetCollectionPermissionsForRoleWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all collection permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> securityRolePermissionsGetCollectionPermissionsForRoleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsGetCollectionPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all collection permissions associated with the security role that matches the id. (asynchronously)
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetCollectionPermissionsForRoleAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsGetCollectionPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsGetContainerPermissionsForRole
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetContainerPermissionsForRoleCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Containers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsGetContainerPermissionsForRoleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsGetContainerPermissionsForRole(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsGetContainerPermissionsForRole(Async)");
        }

        return securityRolePermissionsGetContainerPermissionsForRoleCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns all container permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesContainerPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse> securityRolePermissionsGetContainerPermissionsForRole(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> localVarResp = securityRolePermissionsGetContainerPermissionsForRoleWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all container permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesContainerPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> securityRolePermissionsGetContainerPermissionsForRoleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsGetContainerPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all container permissions associated with the security role that matches the id. (asynchronously)
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetContainerPermissionsForRoleAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsGetContainerPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsGetGlobalPermissionsForRole
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetGlobalPermissionsForRoleCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Global"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsGetGlobalPermissionsForRoleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsGetGlobalPermissionsForRole(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsGetGlobalPermissionsForRole(Async)");
        }

        return securityRolePermissionsGetGlobalPermissionsForRoleCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns all global permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse> securityRolePermissionsGetGlobalPermissionsForRole(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> localVarResp = securityRolePermissionsGetGlobalPermissionsForRoleWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all global permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> securityRolePermissionsGetGlobalPermissionsForRoleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsGetGlobalPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all global permissions associated with the security role that matches the id. (asynchronously)
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetGlobalPermissionsForRoleAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsGetGlobalPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsGetPermissionsForRole
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetPermissionsForRoleCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsGetPermissionsForRoleValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsGetPermissionsForRole(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsGetPermissionsForRole(Async)");
        }

        return securityRolePermissionsGetPermissionsForRoleCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns all permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesAreaPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesAreaPermissionResponse> securityRolePermissionsGetPermissionsForRole(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesAreaPermissionResponse>> localVarResp = securityRolePermissionsGetPermissionsForRoleWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all permissions associated with the security role that matches the id.
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesAreaPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesAreaPermissionResponse>> securityRolePermissionsGetPermissionsForRoleWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsGetPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesAreaPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all permissions associated with the security role that matches the id. (asynchronously)
     * 
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsGetPermissionsForRoleAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesAreaPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsGetPermissionsForRoleValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesAreaPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsSetCollectionPermissions
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsSetCollectionPermissionsCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionPermissions;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Collections"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsSetCollectionPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsSetCollectionPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsSetCollectionPermissions(Async)");
        }

        // verify the required parameter 'collectionPermissions' is set
        if (collectionPermissions == null) {
            throw new ApiException("Missing the required parameter 'collectionPermissions' when calling securityRolePermissionsSetCollectionPermissions(Async)");
        }

        return securityRolePermissionsSetCollectionPermissionsCall(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion, _callback);

    }

    /**
     * Sets collection permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Permission Display Name   |  |---------------|---------------------------|  | Read          | Read                      |  | EditMetadata  | Edit Metadata             |  | Recover       | Download with Private Key |  | Revoke        | Revoke                    |  | Delete        | Delete                    |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse> securityRolePermissionsSetCollectionPermissions(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> localVarResp = securityRolePermissionsSetCollectionPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Sets collection permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Permission Display Name   |  |---------------|---------------------------|  | Read          | Read                      |  | EditMetadata  | Edit Metadata             |  | Recover       | Download with Private Key |  | Revoke        | Revoke                    |  | Delete        | Delete                    |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> securityRolePermissionsSetCollectionPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsSetCollectionPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets collection permissions to the security role that matches the id. (asynchronously)
     * ### Valid Permissions ###  | Permission    | Permission Display Name   |  |---------------|---------------------------|  | Read          | Read                      |  | EditMetadata  | Edit Metadata             |  | Recover       | Download with Private Key |  | Revoke        | Revoke                    |  | Delete        | Delete                    |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param collectionPermissions Collections permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsSetCollectionPermissionsAsync(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionRequest> collectionPermissions, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsSetCollectionPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, collectionPermissions, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesCollectionPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsSetContainerPermissions
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsSetContainerPermissionsCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerPermissions;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Containers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsSetContainerPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsSetContainerPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsSetContainerPermissions(Async)");
        }

        // verify the required parameter 'containerPermissions' is set
        if (containerPermissions == null) {
            throw new ApiException("Missing the required parameter 'containerPermissions' when calling securityRolePermissionsSetContainerPermissions(Async)");
        }

        return securityRolePermissionsSetContainerPermissionsCall(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion, _callback);

    }

    /**
     * Sets container permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Requisite Permissions |  |---------------|-----------------------|  | Read          |                       |  | Schedule      | Read                  |  | Modify        | Read, Schedule        |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesContainerPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse> securityRolePermissionsSetContainerPermissions(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> localVarResp = securityRolePermissionsSetContainerPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Sets container permissions to the security role that matches the id.
     * ### Valid Permissions ###  | Permission    | Requisite Permissions |  |---------------|-----------------------|  | Read          |                       |  | Schedule      | Read                  |  | Modify        | Read, Schedule        |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesContainerPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> securityRolePermissionsSetContainerPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsSetContainerPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets container permissions to the security role that matches the id. (asynchronously)
     * ### Valid Permissions ###  | Permission    | Requisite Permissions |  |---------------|-----------------------|  | Read          |                       |  | Schedule      | Read                  |  | Modify        | Read, Schedule        |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param containerPermissions Container permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsSetContainerPermissionsAsync(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesContainerPermissionRequest> containerPermissions, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsSetContainerPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, containerPermissions, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesContainerPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRolePermissionsSetGlobalPermissions
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsSetGlobalPermissionsCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalPermissions;

        // create path and map variables
        String localVarPath = "/Security/Roles/{id}/Permissions/Global"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRolePermissionsSetGlobalPermissionsValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling securityRolePermissionsSetGlobalPermissions(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling securityRolePermissionsSetGlobalPermissions(Async)");
        }

        // verify the required parameter 'globalPermissions' is set
        if (globalPermissions == null) {
            throw new ApiException("Missing the required parameter 'globalPermissions' when calling securityRolePermissionsSetGlobalPermissions(Async)");
        }

        return securityRolePermissionsSetGlobalPermissionsCall(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion, _callback);

    }

    /**
     * Adds global permissions to the security role that matches the id.
     * ### Valid Global Permissions ###  | Area                          | Permission        |  |-------------------------------|-------------------|  | AdminPortal                   | Read              |  | AgentAutoRegistration         | Read              |  | AgentAutoRegistration         | Modify            |  | AgentManagement               | Read              |  | AgentManagement               | Modify            |  | API                           | Read              |  | ApplicationSettings           | Read              |  | ApplicationSettings           | Modify            |  | Auditing                      | Read              |  | CertificateCollections        | Modify            |  | CertificateEnrollment         | EnrollPFX         |  | CertificateEnrollment         | EnrollCSR         |  | CertificateEnrollment         | CsrGeneration     |  | CertificateEnrollment         | PendingCsr        |  | CertificateMetadataTypes      | Read              |  | CertificateMetadataTypes      | Modify            |  | Certificates                  | Read              |  | Certificates                  | EditMetadata      |  | Certificates                  | Import            |  | Certificates                  | Recover           |  | Certificates                  | Revoke            |  | Certificates                  | Delete            |  | Certificates                  | ImportPrivateKey  |  | CertificateStoreManagement    | Read              |  | CertificateStoreManagement    | Schedule          |  | CertificateStoreManagement    | Modify            |  | Dashboard                     | Read              |  | Dashboard                     | RiskHeader        |  | EventHandlerRegistration      | Read              |  | EventHandlerRegistration      | Modify            |  | MacAutoEnrollManagement       | Read              |  | MacAutoEnrollManagement       | Modify            |  | Monitoring                    | Read              |  | Monitoring                    | Modify            |  | Monitoring                    | Test              |  | PkiManagement                 | Read              |  | PkiManagement                 | Modify            |  | PrivilegedAccessManagement    | Read              |  | PrivilegedAccessManagement    | Modify            |  | Reports                       | Read              |  | Reports                       | Modify            |  | SecuritySettings              | Read              |  | SecuritySettings              | Modify            |  | SSH                           | User              |  | SSH                           | ServerAdmin       |  | SSH                           | EnterpriseAdmin   |  | SslManagement                 | Read              |  | SslManagement                 | Modify            |  | SystemSettings                | Read              |  | SystemSettings                | Modify            |  | WorkflowDefinitions           | Read              |  | WorkflowDefinitions           | Modify            |  | WorkflowInstances             | ReadAll           |  | WorkflowInstances             | ReadAssignedToMe  |  | WorkflowInstances             | ReadMy            |  | WorkflowInstances             | Manage            |  | WorkflowManagement            | Read              |  | WorkflowManagement            | Modify            |  | WorkflowManagement            | Test              |  | WorkflowManagement            | Participate       |  | WorkflowManagement            | Manage            |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse> securityRolePermissionsSetGlobalPermissions(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> localVarResp = securityRolePermissionsSetGlobalPermissionsWithHttpInfo(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Adds global permissions to the security role that matches the id.
     * ### Valid Global Permissions ###  | Area                          | Permission        |  |-------------------------------|-------------------|  | AdminPortal                   | Read              |  | AgentAutoRegistration         | Read              |  | AgentAutoRegistration         | Modify            |  | AgentManagement               | Read              |  | AgentManagement               | Modify            |  | API                           | Read              |  | ApplicationSettings           | Read              |  | ApplicationSettings           | Modify            |  | Auditing                      | Read              |  | CertificateCollections        | Modify            |  | CertificateEnrollment         | EnrollPFX         |  | CertificateEnrollment         | EnrollCSR         |  | CertificateEnrollment         | CsrGeneration     |  | CertificateEnrollment         | PendingCsr        |  | CertificateMetadataTypes      | Read              |  | CertificateMetadataTypes      | Modify            |  | Certificates                  | Read              |  | Certificates                  | EditMetadata      |  | Certificates                  | Import            |  | Certificates                  | Recover           |  | Certificates                  | Revoke            |  | Certificates                  | Delete            |  | Certificates                  | ImportPrivateKey  |  | CertificateStoreManagement    | Read              |  | CertificateStoreManagement    | Schedule          |  | CertificateStoreManagement    | Modify            |  | Dashboard                     | Read              |  | Dashboard                     | RiskHeader        |  | EventHandlerRegistration      | Read              |  | EventHandlerRegistration      | Modify            |  | MacAutoEnrollManagement       | Read              |  | MacAutoEnrollManagement       | Modify            |  | Monitoring                    | Read              |  | Monitoring                    | Modify            |  | Monitoring                    | Test              |  | PkiManagement                 | Read              |  | PkiManagement                 | Modify            |  | PrivilegedAccessManagement    | Read              |  | PrivilegedAccessManagement    | Modify            |  | Reports                       | Read              |  | Reports                       | Modify            |  | SecuritySettings              | Read              |  | SecuritySettings              | Modify            |  | SSH                           | User              |  | SSH                           | ServerAdmin       |  | SSH                           | EnterpriseAdmin   |  | SslManagement                 | Read              |  | SslManagement                 | Modify            |  | SystemSettings                | Read              |  | SystemSettings                | Modify            |  | WorkflowDefinitions           | Read              |  | WorkflowDefinitions           | Modify            |  | WorkflowInstances             | ReadAll           |  | WorkflowInstances             | ReadAssignedToMe  |  | WorkflowInstances             | ReadMy            |  | WorkflowInstances             | Manage            |  | WorkflowManagement            | Read              |  | WorkflowManagement            | Modify            |  | WorkflowManagement            | Test              |  | WorkflowManagement            | Participate       |  | WorkflowManagement            | Manage            |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> securityRolePermissionsSetGlobalPermissionsWithHttpInfo(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = securityRolePermissionsSetGlobalPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds global permissions to the security role that matches the id. (asynchronously)
     * ### Valid Global Permissions ###  | Area                          | Permission        |  |-------------------------------|-------------------|  | AdminPortal                   | Read              |  | AgentAutoRegistration         | Read              |  | AgentAutoRegistration         | Modify            |  | AgentManagement               | Read              |  | AgentManagement               | Modify            |  | API                           | Read              |  | ApplicationSettings           | Read              |  | ApplicationSettings           | Modify            |  | Auditing                      | Read              |  | CertificateCollections        | Modify            |  | CertificateEnrollment         | EnrollPFX         |  | CertificateEnrollment         | EnrollCSR         |  | CertificateEnrollment         | CsrGeneration     |  | CertificateEnrollment         | PendingCsr        |  | CertificateMetadataTypes      | Read              |  | CertificateMetadataTypes      | Modify            |  | Certificates                  | Read              |  | Certificates                  | EditMetadata      |  | Certificates                  | Import            |  | Certificates                  | Recover           |  | Certificates                  | Revoke            |  | Certificates                  | Delete            |  | Certificates                  | ImportPrivateKey  |  | CertificateStoreManagement    | Read              |  | CertificateStoreManagement    | Schedule          |  | CertificateStoreManagement    | Modify            |  | Dashboard                     | Read              |  | Dashboard                     | RiskHeader        |  | EventHandlerRegistration      | Read              |  | EventHandlerRegistration      | Modify            |  | MacAutoEnrollManagement       | Read              |  | MacAutoEnrollManagement       | Modify            |  | Monitoring                    | Read              |  | Monitoring                    | Modify            |  | Monitoring                    | Test              |  | PkiManagement                 | Read              |  | PkiManagement                 | Modify            |  | PrivilegedAccessManagement    | Read              |  | PrivilegedAccessManagement    | Modify            |  | Reports                       | Read              |  | Reports                       | Modify            |  | SecuritySettings              | Read              |  | SecuritySettings              | Modify            |  | SSH                           | User              |  | SSH                           | ServerAdmin       |  | SSH                           | EnterpriseAdmin   |  | SslManagement                 | Read              |  | SslManagement                 | Modify            |  | SystemSettings                | Read              |  | SystemSettings                | Modify            |  | WorkflowDefinitions           | Read              |  | WorkflowDefinitions           | Modify            |  | WorkflowInstances             | ReadAll           |  | WorkflowInstances             | ReadAssignedToMe  |  | WorkflowInstances             | ReadMy            |  | WorkflowInstances             | Manage            |  | WorkflowManagement            | Read              |  | WorkflowManagement            | Modify            |  | WorkflowManagement            | Test              |  | WorkflowManagement            | Participate       |  | WorkflowManagement            | Manage            |
     * @param id Security role identifier (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param globalPermissions Global permissions (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRolePermissionsSetGlobalPermissionsAsync(Integer id, String xKeyfactorRequestedWith, List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionRequest> globalPermissions, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRolePermissionsSetGlobalPermissionsValidateBeforeCall(id, xKeyfactorRequestedWith, globalPermissions, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsSecurityRolesIdentitiesSecurityRolesGlobalPermissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
