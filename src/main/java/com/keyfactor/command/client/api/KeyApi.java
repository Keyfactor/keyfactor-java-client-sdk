/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.ModelsSSHKeysKeyGenerationRequest;
import com.keyfactor.command.client.model.ModelsSSHKeysKeyResponse;
import com.keyfactor.command.client.model.ModelsSSHKeysKeyUpdateRequest;
import com.keyfactor.command.client.model.ModelsSSHKeysUnmanagedKeyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KeyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keyDeleteUnmanagedKey
     * @param id Keyfactor identifer of the Key to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyDeleteUnmanagedKeyCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SSH/Keys/Unmanaged/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyDeleteUnmanagedKeyValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling keyDeleteUnmanagedKey(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyDeleteUnmanagedKey(Async)");
        }

        return keyDeleteUnmanagedKeyCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes Unmanaged Key associated with the provided identifier
     * 
     * @param id Keyfactor identifer of the Key to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void keyDeleteUnmanagedKey(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        keyDeleteUnmanagedKeyWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes Unmanaged Key associated with the provided identifier
     * 
     * @param id Keyfactor identifer of the Key to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> keyDeleteUnmanagedKeyWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = keyDeleteUnmanagedKeyValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes Unmanaged Key associated with the provided identifier (asynchronously)
     * 
     * @param id Keyfactor identifer of the Key to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyDeleteUnmanagedKeyAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyDeleteUnmanagedKeyValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyDeleteUnmanagedKeys
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Keyfactor identifers of the Keys to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyDeleteUnmanagedKeysCall(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/SSH/Keys/Unmanaged";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyDeleteUnmanagedKeysValidateBeforeCall(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyDeleteUnmanagedKeys(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling keyDeleteUnmanagedKeys(Async)");
        }

        return keyDeleteUnmanagedKeysCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes Unmanaged Keys associated with the provided identifiers
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Keyfactor identifers of the Keys to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void keyDeleteUnmanagedKeys(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion) throws ApiException {
        keyDeleteUnmanagedKeysWithHttpInfo(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion);
    }

    /**
     * Deletes Unmanaged Keys associated with the provided identifiers
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Keyfactor identifers of the Keys to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> keyDeleteUnmanagedKeysWithHttpInfo(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = keyDeleteUnmanagedKeysValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes Unmanaged Keys associated with the provided identifiers (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Keyfactor identifers of the Keys to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyDeleteUnmanagedKeysAsync(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyDeleteUnmanagedKeysValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyGenerateKey
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param generationRequest Object containing information about the key to be generated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGenerateKeyCall(String xKeyfactorRequestedWith, ModelsSSHKeysKeyGenerationRequest generationRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generationRequest;

        // create path and map variables
        String localVarPath = "/SSH/Keys/MyKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyGenerateKeyValidateBeforeCall(String xKeyfactorRequestedWith, ModelsSSHKeysKeyGenerationRequest generationRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyGenerateKey(Async)");
        }

        // verify the required parameter 'generationRequest' is set
        if (generationRequest == null) {
            throw new ApiException("Missing the required parameter 'generationRequest' when calling keyGenerateKey(Async)");
        }

        return keyGenerateKeyCall(xKeyfactorRequestedWith, generationRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Generates an SSH Key Pair for the requesting user.
     * ### SSH Key Algorithms ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | Unknown                 |  | 1             | ECDSA                |  | 2                | Ed25519                   |  | 3                | RSA                   |    ### Private Key Formats ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | Unknown                 |  | 1             | OpenSSH                |  | 2                | PKCS8                   |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param generationRequest Object containing information about the key to be generated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsSSHKeysKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSSHKeysKeyResponse keyGenerateKey(String xKeyfactorRequestedWith, ModelsSSHKeysKeyGenerationRequest generationRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsSSHKeysKeyResponse> localVarResp = keyGenerateKeyWithHttpInfo(xKeyfactorRequestedWith, generationRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Generates an SSH Key Pair for the requesting user.
     * ### SSH Key Algorithms ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | Unknown                 |  | 1             | ECDSA                |  | 2                | Ed25519                   |  | 3                | RSA                   |    ### Private Key Formats ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | Unknown                 |  | 1             | OpenSSH                |  | 2                | PKCS8                   |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param generationRequest Object containing information about the key to be generated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsSSHKeysKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSSHKeysKeyResponse> keyGenerateKeyWithHttpInfo(String xKeyfactorRequestedWith, ModelsSSHKeysKeyGenerationRequest generationRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = keyGenerateKeyValidateBeforeCall(xKeyfactorRequestedWith, generationRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates an SSH Key Pair for the requesting user. (asynchronously)
     * ### SSH Key Algorithms ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | Unknown                 |  | 1             | ECDSA                |  | 2                | Ed25519                   |  | 3                | RSA                   |    ### Private Key Formats ###  | Value              | Description               |  |--------------------|---------------------------|  | 0              | Unknown                 |  | 1             | OpenSSH                |  | 2                | PKCS8                   |
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param generationRequest Object containing information about the key to be generated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGenerateKeyAsync(String xKeyfactorRequestedWith, ModelsSSHKeysKeyGenerationRequest generationRequest, String xKeyfactorApiVersion, final ApiCallback<ModelsSSHKeysKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyGenerateKeyValidateBeforeCall(xKeyfactorRequestedWith, generationRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyGetMyKey
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorKeyPassphrase Key password (required)
     * @param includePrivateKey Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGetMyKeyCall(String xKeyfactorRequestedWith, String xKeyfactorKeyPassphrase, Boolean includePrivateKey, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SSH/Keys/MyKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includePrivateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePrivateKey", includePrivateKey));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        if (xKeyfactorKeyPassphrase != null) {
            localVarHeaderParams.put("x-keyfactor-key-passphrase", localVarApiClient.parameterToString(xKeyfactorKeyPassphrase));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyGetMyKeyValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorKeyPassphrase, Boolean includePrivateKey, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyGetMyKey(Async)");
        }

        // verify the required parameter 'xKeyfactorKeyPassphrase' is set
        if (xKeyfactorKeyPassphrase == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorKeyPassphrase' when calling keyGetMyKey(Async)");
        }

        return keyGetMyKeyCall(xKeyfactorRequestedWith, xKeyfactorKeyPassphrase, includePrivateKey, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns the current key of the requesting user
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorKeyPassphrase Key password (required)
     * @param includePrivateKey Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsSSHKeysKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSSHKeysKeyResponse keyGetMyKey(String xKeyfactorRequestedWith, String xKeyfactorKeyPassphrase, Boolean includePrivateKey, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsSSHKeysKeyResponse> localVarResp = keyGetMyKeyWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorKeyPassphrase, includePrivateKey, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the current key of the requesting user
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorKeyPassphrase Key password (required)
     * @param includePrivateKey Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsSSHKeysKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSSHKeysKeyResponse> keyGetMyKeyWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorKeyPassphrase, Boolean includePrivateKey, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = keyGetMyKeyValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorKeyPassphrase, includePrivateKey, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the current key of the requesting user (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorKeyPassphrase Key password (required)
     * @param includePrivateKey Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGetMyKeyAsync(String xKeyfactorRequestedWith, String xKeyfactorKeyPassphrase, Boolean includePrivateKey, String xKeyfactorApiVersion, final ApiCallback<ModelsSSHKeysKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyGetMyKeyValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorKeyPassphrase, includePrivateKey, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyGetUnmanagedKey
     * @param id The id of the key to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGetUnmanagedKeyCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SSH/Keys/Unmanaged/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyGetUnmanagedKeyValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling keyGetUnmanagedKey(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyGetUnmanagedKey(Async)");
        }

        return keyGetUnmanagedKeyCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns an unmanaged SSH key with provided id.
     * 
     * @param id The id of the key to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsSSHKeysUnmanagedKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSSHKeysUnmanagedKeyResponse keyGetUnmanagedKey(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsSSHKeysUnmanagedKeyResponse> localVarResp = keyGetUnmanagedKeyWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns an unmanaged SSH key with provided id.
     * 
     * @param id The id of the key to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsSSHKeysUnmanagedKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSSHKeysUnmanagedKeyResponse> keyGetUnmanagedKeyWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = keyGetUnmanagedKeyValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysUnmanagedKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an unmanaged SSH key with provided id. (asynchronously)
     * 
     * @param id The id of the key to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGetUnmanagedKeyAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<ModelsSSHKeysUnmanagedKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyGetUnmanagedKeyValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysUnmanagedKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyGetUnmanagedKeys
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGetUnmanagedKeysCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SSH/Keys/Unmanaged";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pqQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.queryString", pqQueryString));
        }

        if (pqPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.pageReturned", pqPageReturned));
        }

        if (pqReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.returnLimit", pqReturnLimit));
        }

        if (pqSortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortField", pqSortField));
        }

        if (pqSortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortAscending", pqSortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyGetUnmanagedKeysValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyGetUnmanagedKeys(Async)");
        }

        return keyGetUnmanagedKeysCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);

    }

    /**
     * Returns Unmanaged SSH keys
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;ModelsSSHKeysUnmanagedKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsSSHKeysUnmanagedKeyResponse> keyGetUnmanagedKeys(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        ApiResponse<List<ModelsSSHKeysUnmanagedKeyResponse>> localVarResp = keyGetUnmanagedKeysWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns Unmanaged SSH keys
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;ModelsSSHKeysUnmanagedKeyResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsSSHKeysUnmanagedKeyResponse>> keyGetUnmanagedKeysWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        okhttp3.Call localVarCall = keyGetUnmanagedKeysValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, null);
        Type localVarReturnType = new TypeToken<List<ModelsSSHKeysUnmanagedKeyResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns Unmanaged SSH keys (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyGetUnmanagedKeysAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pqQueryString, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback<List<ModelsSSHKeysUnmanagedKeyResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyGetUnmanagedKeysValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqQueryString, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsSSHKeysUnmanagedKeyResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyUpdate
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keyUpdateRequest Updated state of the SSH key (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyUpdateCall(String xKeyfactorRequestedWith, ModelsSSHKeysKeyUpdateRequest keyUpdateRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyUpdateRequest;

        // create path and map variables
        String localVarPath = "/SSH/Keys/MyKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyUpdateValidateBeforeCall(String xKeyfactorRequestedWith, ModelsSSHKeysKeyUpdateRequest keyUpdateRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling keyUpdate(Async)");
        }

        // verify the required parameter 'keyUpdateRequest' is set
        if (keyUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'keyUpdateRequest' when calling keyUpdate(Async)");
        }

        return keyUpdateCall(xKeyfactorRequestedWith, keyUpdateRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Updates the requesting user&#39;s SSH key
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keyUpdateRequest Updated state of the SSH key (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsSSHKeysKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSSHKeysKeyResponse keyUpdate(String xKeyfactorRequestedWith, ModelsSSHKeysKeyUpdateRequest keyUpdateRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsSSHKeysKeyResponse> localVarResp = keyUpdateWithHttpInfo(xKeyfactorRequestedWith, keyUpdateRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Updates the requesting user&#39;s SSH key
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keyUpdateRequest Updated state of the SSH key (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsSSHKeysKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSSHKeysKeyResponse> keyUpdateWithHttpInfo(String xKeyfactorRequestedWith, ModelsSSHKeysKeyUpdateRequest keyUpdateRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = keyUpdateValidateBeforeCall(xKeyfactorRequestedWith, keyUpdateRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the requesting user&#39;s SSH key (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keyUpdateRequest Updated state of the SSH key (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyUpdateAsync(String xKeyfactorRequestedWith, ModelsSSHKeysKeyUpdateRequest keyUpdateRequest, String xKeyfactorApiVersion, final ApiCallback<ModelsSSHKeysKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyUpdateValidateBeforeCall(xKeyfactorRequestedWith, keyUpdateRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsSSHKeysKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
