/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CertificateStoreTypeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificateStoreTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificateStoreTypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateStoreTypeCreateCertificateStoreType
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties for the new type (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeCreateCertificateStoreTypeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest certStoreType, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certStoreType;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeCreateCertificateStoreTypeValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest certStoreType, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeCreateCertificateStoreType(Async)");
        }

        // verify the required parameter 'certStoreType' is set
        if (certStoreType == null) {
            throw new ApiException("Missing the required parameter 'certStoreType' when calling certificateStoreTypeCreateCertificateStoreType(Async)");
        }

        return certificateStoreTypeCreateCertificateStoreTypeCall(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates a new certificate store type with the provided properties
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties for the new type (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse certificateStoreTypeCreateCertificateStoreType(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest certStoreType, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> localVarResp = certificateStoreTypeCreateCertificateStoreTypeWithHttpInfo(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates a new certificate store type with the provided properties
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties for the new type (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> certificateStoreTypeCreateCertificateStoreTypeWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest certStoreType, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeCreateCertificateStoreTypeValidateBeforeCall(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new certificate store type with the provided properties (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties for the new type (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeCreateCertificateStoreTypeAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest certStoreType, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeCreateCertificateStoreTypeValidateBeforeCall(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreTypeDeleteCertificateStoreType
     * @param id Keyfactor identifier of the certificate store type to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeDeleteCertificateStoreTypeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeDeleteCertificateStoreTypeValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling certificateStoreTypeDeleteCertificateStoreType(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeDeleteCertificateStoreType(Async)");
        }

        return certificateStoreTypeDeleteCertificateStoreTypeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes a certificate store type according to the provided identifier
     * This will ignore individual delete failures, and continue processing certificate stores.
     * @param id Keyfactor identifier of the certificate store type to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreTypeDeleteCertificateStoreType(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreTypeDeleteCertificateStoreTypeWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes a certificate store type according to the provided identifier
     * This will ignore individual delete failures, and continue processing certificate stores.
     * @param id Keyfactor identifier of the certificate store type to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreTypeDeleteCertificateStoreTypeWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeDeleteCertificateStoreTypeValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a certificate store type according to the provided identifier (asynchronously)
     * This will ignore individual delete failures, and continue processing certificate stores.
     * @param id Keyfactor identifier of the certificate store type to be deleted (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeDeleteCertificateStoreTypeAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeDeleteCertificateStoreTypeValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreTypeDeleteCertificateStoreTypes
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers of the certificate store types to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeDeleteCertificateStoreTypesCall(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeDeleteCertificateStoreTypesValidateBeforeCall(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeDeleteCertificateStoreTypes(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling certificateStoreTypeDeleteCertificateStoreTypes(Async)");
        }

        return certificateStoreTypeDeleteCertificateStoreTypesCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes certificate store types according to the provided identifiers
     * This will ignore individual delete failures, and continue processing the array.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers of the certificate store types to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreTypeDeleteCertificateStoreTypes(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreTypeDeleteCertificateStoreTypesWithHttpInfo(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion);
    }

    /**
     * Deletes certificate store types according to the provided identifiers
     * This will ignore individual delete failures, and continue processing the array.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers of the certificate store types to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreTypeDeleteCertificateStoreTypesWithHttpInfo(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeDeleteCertificateStoreTypesValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes certificate store types according to the provided identifiers (asynchronously)
     * This will ignore individual delete failures, and continue processing the array.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers of the certificate store types to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeDeleteCertificateStoreTypesAsync(String xKeyfactorRequestedWith, List<Integer> ids, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeDeleteCertificateStoreTypesValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreTypeGetCertificateStoreType0
     * @param id Keyfactor identifier of the certificate store type (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeGetCertificateStoreType0Call(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeGetCertificateStoreType0ValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling certificateStoreTypeGetCertificateStoreType0(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeGetCertificateStoreType0(Async)");
        }

        return certificateStoreTypeGetCertificateStoreType0Call(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns a single certificate store type that matches id
     * 
     * @param id Keyfactor identifier of the certificate store type (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse certificateStoreTypeGetCertificateStoreType0(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> localVarResp = certificateStoreTypeGetCertificateStoreType0WithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns a single certificate store type that matches id
     * 
     * @param id Keyfactor identifier of the certificate store type (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> certificateStoreTypeGetCertificateStoreType0WithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeGetCertificateStoreType0ValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single certificate store type that matches id (asynchronously)
     * 
     * @param id Keyfactor identifier of the certificate store type (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeGetCertificateStoreType0Async(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeGetCertificateStoreType0ValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreTypeGetCertificateStoreType1
     * @param name Short name of the certificate store type to return (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeGetCertificateStoreType1Call(String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes/Name/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeGetCertificateStoreType1ValidateBeforeCall(String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateStoreTypeGetCertificateStoreType1(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeGetCertificateStoreType1(Async)");
        }

        return certificateStoreTypeGetCertificateStoreType1Call(name, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns a single certificate store type that matches the provided short name
     * 
     * @param name Short name of the certificate store type to return (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> certificateStoreTypeGetCertificateStoreType1(String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>> localVarResp = certificateStoreTypeGetCertificateStoreType1WithHttpInfo(name, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns a single certificate store type that matches the provided short name
     * 
     * @param name Short name of the certificate store type to return (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>> certificateStoreTypeGetCertificateStoreType1WithHttpInfo(String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeGetCertificateStoreType1ValidateBeforeCall(name, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single certificate store type that matches the provided short name (asynchronously)
     * 
     * @param name Short name of the certificate store type to return (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeGetCertificateStoreType1Async(String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeGetCertificateStoreType1ValidateBeforeCall(name, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreTypeGetTypes
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param cstqueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param cstqueryPageReturned The current page within the result set to be returned (optional)
     * @param cstqueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param cstquerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param cstquerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeGetTypesCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String cstqueryQueryString, Integer cstqueryPageReturned, Integer cstqueryReturnLimit, String cstquerySortField, Integer cstquerySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cstqueryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cstquery.queryString", cstqueryQueryString));
        }

        if (cstqueryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cstquery.pageReturned", cstqueryPageReturned));
        }

        if (cstqueryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cstquery.returnLimit", cstqueryReturnLimit));
        }

        if (cstquerySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cstquery.sortField", cstquerySortField));
        }

        if (cstquerySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cstquery.sortAscending", cstquerySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeGetTypesValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String cstqueryQueryString, Integer cstqueryPageReturned, Integer cstqueryReturnLimit, String cstquerySortField, Integer cstquerySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeGetTypes(Async)");
        }

        return certificateStoreTypeGetTypesCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, cstqueryQueryString, cstqueryPageReturned, cstqueryReturnLimit, cstquerySortField, cstquerySortAscending, _callback);

    }

    /**
     * Returns all certificate store types according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param cstqueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param cstqueryPageReturned The current page within the result set to be returned (optional)
     * @param cstqueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param cstquerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param cstquerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> certificateStoreTypeGetTypes(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String cstqueryQueryString, Integer cstqueryPageReturned, Integer cstqueryReturnLimit, String cstquerySortField, Integer cstquerySortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>> localVarResp = certificateStoreTypeGetTypesWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, cstqueryQueryString, cstqueryPageReturned, cstqueryReturnLimit, cstquerySortField, cstquerySortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns all certificate store types according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param cstqueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param cstqueryPageReturned The current page within the result set to be returned (optional)
     * @param cstqueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param cstquerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param cstquerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>> certificateStoreTypeGetTypesWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String cstqueryQueryString, Integer cstqueryPageReturned, Integer cstqueryReturnLimit, String cstquerySortField, Integer cstquerySortAscending) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeGetTypesValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, cstqueryQueryString, cstqueryPageReturned, cstqueryReturnLimit, cstquerySortField, cstquerySortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all certificate store types according to the provided filter and output parameters (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param cstqueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param cstqueryPageReturned The current page within the result set to be returned (optional)
     * @param cstqueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param cstquerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param cstquerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeGetTypesAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String cstqueryQueryString, Integer cstqueryPageReturned, Integer cstqueryReturnLimit, String cstquerySortField, Integer cstquerySortAscending, final ApiCallback<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeGetTypesValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, cstqueryQueryString, cstqueryPageReturned, cstqueryReturnLimit, cstquerySortField, cstquerySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreTypeUpdateCertificateStoreType
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeUpdateCertificateStoreTypeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest certStoreType, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certStoreType;

        // create path and map variables
        String localVarPath = "/CertificateStoreTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreTypeUpdateCertificateStoreTypeValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest certStoreType, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreTypeUpdateCertificateStoreType(Async)");
        }

        // verify the required parameter 'certStoreType' is set
        if (certStoreType == null) {
            throw new ApiException("Missing the required parameter 'certStoreType' when calling certificateStoreTypeUpdateCertificateStoreType(Async)");
        }

        return certificateStoreTypeUpdateCertificateStoreTypeCall(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion, _callback);

    }

    /**
     * Updates an existing certificate store type with the provided properties
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse certificateStoreTypeUpdateCertificateStoreType(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest certStoreType, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> localVarResp = certificateStoreTypeUpdateCertificateStoreTypeWithHttpInfo(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Updates an existing certificate store type with the provided properties
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> certificateStoreTypeUpdateCertificateStoreTypeWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest certStoreType, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreTypeUpdateCertificateStoreTypeValidateBeforeCall(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing certificate store type with the provided properties (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param certStoreType Certificate store type properties to be updated (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreTypeUpdateCertificateStoreTypeAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest certStoreType, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreTypeUpdateCertificateStoreTypeValidateBeforeCall(xKeyfactorRequestedWith, certStoreType, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
