/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresAddCertificateRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresReenrollmentRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsCertificateStoresRemoveCertificateRequest;
import com.keyfactor.command.client.model.ModelsCertStoreNewPasswordRequest;
import com.keyfactor.command.client.model.ModelsCertStoresSchedule;
import com.keyfactor.command.client.model.ModelsCertificateStoreCreateServerRequest;
import com.keyfactor.command.client.model.ModelsCertificateStoreInventory;
import com.keyfactor.command.client.model.ModelsCertificateStoreServerResponse;
import com.keyfactor.command.client.model.ModelsCertificateStoreUpdateServerRequest;
import com.keyfactor.command.client.model.ModelsDiscoveryJobRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CertificateStoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificateStoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificateStoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateStoreAddCertificate
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param addRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreAddCertificateCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresAddCertificateRequest addRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRequest;

        // create path and map variables
        String localVarPath = "/CertificateStores/Certificates/Add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreAddCertificateValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresAddCertificateRequest addRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreAddCertificate(Async)");
        }

        // verify the required parameter 'addRequest' is set
        if (addRequest == null) {
            throw new ApiException("Missing the required parameter 'addRequest' when calling certificateStoreAddCertificate(Async)");
        }

        return certificateStoreAddCertificateCall(xKeyfactorRequestedWith, addRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Configures a management job to add a certificate to one or more stores with the provided schedule
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param addRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UUID> certificateStoreAddCertificate(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresAddCertificateRequest addRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = certificateStoreAddCertificateWithHttpInfo(xKeyfactorRequestedWith, addRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Configures a management job to add a certificate to one or more stores with the provided schedule
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param addRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UUID>> certificateStoreAddCertificateWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresAddCertificateRequest addRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreAddCertificateValidateBeforeCall(xKeyfactorRequestedWith, addRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Configures a management job to add a certificate to one or more stores with the provided schedule (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param addRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreAddCertificateAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresAddCertificateRequest addRequest, String xKeyfactorApiVersion, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreAddCertificateValidateBeforeCall(xKeyfactorRequestedWith, addRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreApprovePending
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keystores Certificate stores to be approved (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreApprovePendingCall(String xKeyfactorRequestedWith, List<KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest> keystores, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keystores;

        // create path and map variables
        String localVarPath = "/CertificateStores/Approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreApprovePendingValidateBeforeCall(String xKeyfactorRequestedWith, List<KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest> keystores, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreApprovePending(Async)");
        }

        // verify the required parameter 'keystores' is set
        if (keystores == null) {
            throw new ApiException("Missing the required parameter 'keystores' when calling certificateStoreApprovePending(Async)");
        }

        return certificateStoreApprovePendingCall(xKeyfactorRequestedWith, keystores, xKeyfactorApiVersion, _callback);

    }

    /**
     * Approves the provided certificate stores to make them available for management
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keystores Certificate stores to be approved (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreApprovePending(String xKeyfactorRequestedWith, List<KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest> keystores, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreApprovePendingWithHttpInfo(xKeyfactorRequestedWith, keystores, xKeyfactorApiVersion);
    }

    /**
     * Approves the provided certificate stores to make them available for management
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keystores Certificate stores to be approved (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreApprovePendingWithHttpInfo(String xKeyfactorRequestedWith, List<KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest> keystores, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreApprovePendingValidateBeforeCall(xKeyfactorRequestedWith, keystores, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Approves the provided certificate stores to make them available for management (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param keystores Certificate stores to be approved (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreApprovePendingAsync(String xKeyfactorRequestedWith, List<KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest> keystores, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreApprovePendingValidateBeforeCall(xKeyfactorRequestedWith, keystores, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreConfigureDiscoveryJob
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param discoveryJobRequest Configuration properties of the discovery job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreConfigureDiscoveryJobCall(String xKeyfactorRequestedWith, ModelsDiscoveryJobRequest discoveryJobRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discoveryJobRequest;

        // create path and map variables
        String localVarPath = "/CertificateStores/DiscoveryJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreConfigureDiscoveryJobValidateBeforeCall(String xKeyfactorRequestedWith, ModelsDiscoveryJobRequest discoveryJobRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreConfigureDiscoveryJob(Async)");
        }

        // verify the required parameter 'discoveryJobRequest' is set
        if (discoveryJobRequest == null) {
            throw new ApiException("Missing the required parameter 'discoveryJobRequest' when calling certificateStoreConfigureDiscoveryJob(Async)");
        }

        return certificateStoreConfigureDiscoveryJobCall(xKeyfactorRequestedWith, discoveryJobRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Configures a discovery job to locate currently unmanaged certificate stores
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param discoveryJobRequest Configuration properties of the discovery job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreConfigureDiscoveryJob(String xKeyfactorRequestedWith, ModelsDiscoveryJobRequest discoveryJobRequest, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreConfigureDiscoveryJobWithHttpInfo(xKeyfactorRequestedWith, discoveryJobRequest, xKeyfactorApiVersion);
    }

    /**
     * Configures a discovery job to locate currently unmanaged certificate stores
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param discoveryJobRequest Configuration properties of the discovery job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreConfigureDiscoveryJobWithHttpInfo(String xKeyfactorRequestedWith, ModelsDiscoveryJobRequest discoveryJobRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreConfigureDiscoveryJobValidateBeforeCall(xKeyfactorRequestedWith, discoveryJobRequest, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configures a discovery job to locate currently unmanaged certificate stores (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param discoveryJobRequest Configuration properties of the discovery job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreConfigureDiscoveryJobAsync(String xKeyfactorRequestedWith, ModelsDiscoveryJobRequest discoveryJobRequest, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreConfigureDiscoveryJobValidateBeforeCall(xKeyfactorRequestedWith, discoveryJobRequest, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreCreateCertificateStoreServer
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Certificate store server to be created with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call certificateStoreCreateCertificateStoreServerCall(String xKeyfactorRequestedWith, ModelsCertificateStoreCreateServerRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/CertificateStores/Server";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreCreateCertificateStoreServerValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCertificateStoreCreateServerRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreCreateCertificateStoreServer(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling certificateStoreCreateCertificateStoreServer(Async)");
        }

        return certificateStoreCreateCertificateStoreServerCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates a new certificate store server with the provided properties
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Certificate store server to be created with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCertificateStoreServerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ModelsCertificateStoreServerResponse certificateStoreCreateCertificateStoreServer(String xKeyfactorRequestedWith, ModelsCertificateStoreCreateServerRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCertificateStoreServerResponse> localVarResp = certificateStoreCreateCertificateStoreServerWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates a new certificate store server with the provided properties
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Certificate store server to be created with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCertificateStoreServerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ModelsCertificateStoreServerResponse> certificateStoreCreateCertificateStoreServerWithHttpInfo(String xKeyfactorRequestedWith, ModelsCertificateStoreCreateServerRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreCreateCertificateStoreServerValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCertificateStoreServerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new certificate store server with the provided properties (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Certificate store server to be created with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call certificateStoreCreateCertificateStoreServerAsync(String xKeyfactorRequestedWith, ModelsCertificateStoreCreateServerRequest request, String xKeyfactorApiVersion, final ApiCallback<ModelsCertificateStoreServerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreCreateCertificateStoreServerValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCertificateStoreServerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreDeleteCertificateStore
     * @param id Keyfactor certificate store identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreDeleteCertificateStoreCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CertificateStores/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreDeleteCertificateStoreValidateBeforeCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling certificateStoreDeleteCertificateStore(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreDeleteCertificateStore(Async)");
        }

        return certificateStoreDeleteCertificateStoreCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes a persisted certificate store by its Keyfactor identifier
     * 
     * @param id Keyfactor certificate store identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreDeleteCertificateStore(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreDeleteCertificateStoreWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes a persisted certificate store by its Keyfactor identifier
     * 
     * @param id Keyfactor certificate store identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreDeleteCertificateStoreWithHttpInfo(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreDeleteCertificateStoreValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a persisted certificate store by its Keyfactor identifier (asynchronously)
     * 
     * @param id Keyfactor certificate store identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreDeleteCertificateStoreAsync(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreDeleteCertificateStoreValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreDeleteCertificateStores
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers (GUID) for the certificate stores to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreDeleteCertificateStoresCall(String xKeyfactorRequestedWith, List<UUID> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/CertificateStores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreDeleteCertificateStoresValidateBeforeCall(String xKeyfactorRequestedWith, List<UUID> ids, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreDeleteCertificateStores(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling certificateStoreDeleteCertificateStores(Async)");
        }

        return certificateStoreDeleteCertificateStoresCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes multiple persisted certificate store entities by their identifiers
     * This will ignore individual delete failures, and continue processing the array.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers (GUID) for the certificate stores to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreDeleteCertificateStores(String xKeyfactorRequestedWith, List<UUID> ids, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreDeleteCertificateStoresWithHttpInfo(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion);
    }

    /**
     * Deletes multiple persisted certificate store entities by their identifiers
     * This will ignore individual delete failures, and continue processing the array.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers (GUID) for the certificate stores to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreDeleteCertificateStoresWithHttpInfo(String xKeyfactorRequestedWith, List<UUID> ids, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreDeleteCertificateStoresValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes multiple persisted certificate store entities by their identifiers (asynchronously)
     * This will ignore individual delete failures, and continue processing the array.
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param ids Array of Keyfactor identifiers (GUID) for the certificate stores to be deleted (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreDeleteCertificateStoresAsync(String xKeyfactorRequestedWith, List<UUID> ids, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreDeleteCertificateStoresValidateBeforeCall(xKeyfactorRequestedWith, ids, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreGetCertificateStoreInventory
     * @param id Keyfactor identifier (GUID) of the certificate store (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreGetCertificateStoreInventoryCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CertificateStores/{id}/Inventory"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.pageReturned", queryPageReturned));
        }

        if (queryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.returnLimit", queryReturnLimit));
        }

        if (querySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortField", querySortField));
        }

        if (querySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortAscending", querySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreGetCertificateStoreInventoryValidateBeforeCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling certificateStoreGetCertificateStoreInventory(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreGetCertificateStoreInventory(Async)");
        }

        return certificateStoreGetCertificateStoreInventoryCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);

    }

    /**
     * Returns a single certificate store&#39;s inventory associated with the provided id
     * 
     * @param id Keyfactor identifier (GUID) of the certificate store (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;ModelsCertificateStoreInventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsCertificateStoreInventory> certificateStoreGetCertificateStoreInventory(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        ApiResponse<List<ModelsCertificateStoreInventory>> localVarResp = certificateStoreGetCertificateStoreInventoryWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, queryPageReturned, queryReturnLimit, querySortField, querySortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns a single certificate store&#39;s inventory associated with the provided id
     * 
     * @param id Keyfactor identifier (GUID) of the certificate store (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;ModelsCertificateStoreInventory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsCertificateStoreInventory>> certificateStoreGetCertificateStoreInventoryWithHttpInfo(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreGetCertificateStoreInventoryValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, null);
        Type localVarReturnType = new TypeToken<List<ModelsCertificateStoreInventory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single certificate store&#39;s inventory associated with the provided id (asynchronously)
     * 
     * @param id Keyfactor identifier (GUID) of the certificate store (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreGetCertificateStoreInventoryAsync(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback<List<ModelsCertificateStoreInventory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreGetCertificateStoreInventoryValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsCertificateStoreInventory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreRemoveCertificate
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param removalRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreRemoveCertificateCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresRemoveCertificateRequest removalRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removalRequest;

        // create path and map variables
        String localVarPath = "/CertificateStores/Certificates/Remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreRemoveCertificateValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresRemoveCertificateRequest removalRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreRemoveCertificate(Async)");
        }

        // verify the required parameter 'removalRequest' is set
        if (removalRequest == null) {
            throw new ApiException("Missing the required parameter 'removalRequest' when calling certificateStoreRemoveCertificate(Async)");
        }

        return certificateStoreRemoveCertificateCall(xKeyfactorRequestedWith, removalRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Configures a management job to remove a certificate from one or more stores with the provided schedule
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param removalRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UUID> certificateStoreRemoveCertificate(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresRemoveCertificateRequest removalRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = certificateStoreRemoveCertificateWithHttpInfo(xKeyfactorRequestedWith, removalRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Configures a management job to remove a certificate from one or more stores with the provided schedule
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param removalRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UUID>> certificateStoreRemoveCertificateWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresRemoveCertificateRequest removalRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreRemoveCertificateValidateBeforeCall(xKeyfactorRequestedWith, removalRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Configures a management job to remove a certificate from one or more stores with the provided schedule (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param removalRequest Configuration details of the management job (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreRemoveCertificateAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresRemoveCertificateRequest removalRequest, String xKeyfactorApiVersion, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreRemoveCertificateValidateBeforeCall(xKeyfactorRequestedWith, removalRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreSchedule
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param futureSchedule Certificate store identifiers and the desired schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreScheduleCall(String xKeyfactorRequestedWith, ModelsCertStoresSchedule futureSchedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = futureSchedule;

        // create path and map variables
        String localVarPath = "/CertificateStores/Schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreScheduleValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCertStoresSchedule futureSchedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreSchedule(Async)");
        }

        // verify the required parameter 'futureSchedule' is set
        if (futureSchedule == null) {
            throw new ApiException("Missing the required parameter 'futureSchedule' when calling certificateStoreSchedule(Async)");
        }

        return certificateStoreScheduleCall(xKeyfactorRequestedWith, futureSchedule, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates an inventory schedule for the provided certificate stores
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param futureSchedule Certificate store identifiers and the desired schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreSchedule(String xKeyfactorRequestedWith, ModelsCertStoresSchedule futureSchedule, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreScheduleWithHttpInfo(xKeyfactorRequestedWith, futureSchedule, xKeyfactorApiVersion);
    }

    /**
     * Creates an inventory schedule for the provided certificate stores
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param futureSchedule Certificate store identifiers and the desired schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreScheduleWithHttpInfo(String xKeyfactorRequestedWith, ModelsCertStoresSchedule futureSchedule, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreScheduleValidateBeforeCall(xKeyfactorRequestedWith, futureSchedule, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates an inventory schedule for the provided certificate stores (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param futureSchedule Certificate store identifiers and the desired schedule (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreScheduleAsync(String xKeyfactorRequestedWith, ModelsCertStoresSchedule futureSchedule, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreScheduleValidateBeforeCall(xKeyfactorRequestedWith, futureSchedule, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreScheduleForReenrollment
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param reenroll An object that contains a Keystore Id, a Agent Guid, a string SubjectName and string Alias (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreScheduleForReenrollmentCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresReenrollmentRequest reenroll, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reenroll;

        // create path and map variables
        String localVarPath = "/CertificateStores/Reenrollment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreScheduleForReenrollmentValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresReenrollmentRequest reenroll, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreScheduleForReenrollment(Async)");
        }

        // verify the required parameter 'reenroll' is set
        if (reenroll == null) {
            throw new ApiException("Missing the required parameter 'reenroll' when calling certificateStoreScheduleForReenrollment(Async)");
        }

        return certificateStoreScheduleForReenrollmentCall(xKeyfactorRequestedWith, reenroll, xKeyfactorApiVersion, _callback);

    }

    /**
     * Schedules a certificate store for reenrollment
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param reenroll An object that contains a Keystore Id, a Agent Guid, a string SubjectName and string Alias (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreScheduleForReenrollment(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresReenrollmentRequest reenroll, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreScheduleForReenrollmentWithHttpInfo(xKeyfactorRequestedWith, reenroll, xKeyfactorApiVersion);
    }

    /**
     * Schedules a certificate store for reenrollment
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param reenroll An object that contains a Keystore Id, a Agent Guid, a string SubjectName and string Alias (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreScheduleForReenrollmentWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresReenrollmentRequest reenroll, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreScheduleForReenrollmentValidateBeforeCall(xKeyfactorRequestedWith, reenroll, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedules a certificate store for reenrollment (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param reenroll An object that contains a Keystore Id, a Agent Guid, a string SubjectName and string Alias (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreScheduleForReenrollmentAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsCertificateStoresReenrollmentRequest reenroll, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreScheduleForReenrollmentValidateBeforeCall(xKeyfactorRequestedWith, reenroll, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreSetPassword
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param passwordRequest Identifier of the certificate store and the password to be applied to it (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreSetPasswordCall(String xKeyfactorRequestedWith, ModelsCertStoreNewPasswordRequest passwordRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordRequest;

        // create path and map variables
        String localVarPath = "/CertificateStores/Password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreSetPasswordValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCertStoreNewPasswordRequest passwordRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreSetPassword(Async)");
        }

        // verify the required parameter 'passwordRequest' is set
        if (passwordRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordRequest' when calling certificateStoreSetPassword(Async)");
        }

        return certificateStoreSetPasswordCall(xKeyfactorRequestedWith, passwordRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Sets a password for the requested certificate store
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param passwordRequest Identifier of the certificate store and the password to be applied to it (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificateStoreSetPassword(String xKeyfactorRequestedWith, ModelsCertStoreNewPasswordRequest passwordRequest, String xKeyfactorApiVersion) throws ApiException {
        certificateStoreSetPasswordWithHttpInfo(xKeyfactorRequestedWith, passwordRequest, xKeyfactorApiVersion);
    }

    /**
     * Sets a password for the requested certificate store
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param passwordRequest Identifier of the certificate store and the password to be applied to it (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateStoreSetPasswordWithHttpInfo(String xKeyfactorRequestedWith, ModelsCertStoreNewPasswordRequest passwordRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreSetPasswordValidateBeforeCall(xKeyfactorRequestedWith, passwordRequest, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets a password for the requested certificate store (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param passwordRequest Identifier of the certificate store and the password to be applied to it (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateStoreSetPasswordAsync(String xKeyfactorRequestedWith, ModelsCertStoreNewPasswordRequest passwordRequest, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreSetPasswordValidateBeforeCall(xKeyfactorRequestedWith, passwordRequest, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateStoreUpdateCertificateStoreServer
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Server to be updated with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call certificateStoreUpdateCertificateStoreServerCall(String xKeyfactorRequestedWith, ModelsCertificateStoreUpdateServerRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/CertificateStores/Server";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateStoreUpdateCertificateStoreServerValidateBeforeCall(String xKeyfactorRequestedWith, ModelsCertificateStoreUpdateServerRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling certificateStoreUpdateCertificateStoreServer(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling certificateStoreUpdateCertificateStoreServer(Async)");
        }

        return certificateStoreUpdateCertificateStoreServerCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Updates a given certificate store server with the properties of the provided instance
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Server to be updated with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ModelsCertificateStoreServerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ModelsCertificateStoreServerResponse certificateStoreUpdateCertificateStoreServer(String xKeyfactorRequestedWith, ModelsCertificateStoreUpdateServerRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<ModelsCertificateStoreServerResponse> localVarResp = certificateStoreUpdateCertificateStoreServerWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Updates a given certificate store server with the properties of the provided instance
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Server to be updated with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;ModelsCertificateStoreServerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ModelsCertificateStoreServerResponse> certificateStoreUpdateCertificateStoreServerWithHttpInfo(String xKeyfactorRequestedWith, ModelsCertificateStoreUpdateServerRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateStoreUpdateCertificateStoreServerValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<ModelsCertificateStoreServerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a given certificate store server with the properties of the provided instance (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request Server to be updated with the provided properties (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call certificateStoreUpdateCertificateStoreServerAsync(String xKeyfactorRequestedWith, ModelsCertificateStoreUpdateServerRequest request, String xKeyfactorApiVersion, final ApiCallback<ModelsCertificateStoreServerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateStoreUpdateCertificateStoreServerValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsCertificateStoreServerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
