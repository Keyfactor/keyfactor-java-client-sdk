/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsAlertScheduleAlertScheduleRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsExpirationExpirationAlertCreationRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsExpirationExpirationAlertTestAllRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsExpirationExpirationAlertTestRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsAlertsExpirationExpirationAlertUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpirationAlertApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpirationAlertApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpirationAlertApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expirationAlertAddExpirationAlert
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the new alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertAddExpirationAlertCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertCreationRequest req, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = req;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertAddExpirationAlertValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertCreationRequest req, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertAddExpirationAlert(Async)");
        }

        // verify the required parameter 'req' is set
        if (req == null) {
            throw new ApiException("Missing the required parameter 'req' when calling expirationAlertAddExpirationAlert(Async)");
        }

        return expirationAlertAddExpirationAlertCall(xKeyfactorRequestedWith, req, xKeyfactorApiVersion, _callback);

    }

    /**
     * Add an expiration alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the new alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse expirationAlertAddExpirationAlert(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertCreationRequest req, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> localVarResp = expirationAlertAddExpirationAlertWithHttpInfo(xKeyfactorRequestedWith, req, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Add an expiration alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the new alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> expirationAlertAddExpirationAlertWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertCreationRequest req, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertAddExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, req, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an expiration alert (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the new alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertAddExpirationAlertAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertCreationRequest req, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertAddExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, req, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertDeleteExpirationAlert
     * @param id Id for the expiration alert (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertDeleteExpirationAlertCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertDeleteExpirationAlertValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling expirationAlertDeleteExpirationAlert(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertDeleteExpirationAlert(Async)");
        }

        return expirationAlertDeleteExpirationAlertCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Delete an expiration alert
     * 
     * @param id Id for the expiration alert (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void expirationAlertDeleteExpirationAlert(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        expirationAlertDeleteExpirationAlertWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Delete an expiration alert
     * 
     * @param id Id for the expiration alert (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expirationAlertDeleteExpirationAlertWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertDeleteExpirationAlertValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an expiration alert (asynchronously)
     * 
     * @param id Id for the expiration alert (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertDeleteExpirationAlertAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertDeleteExpirationAlertValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertEditExpirationAlert
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the expiration alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertEditExpirationAlertCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertUpdateRequest req, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = req;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertEditExpirationAlertValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertUpdateRequest req, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertEditExpirationAlert(Async)");
        }

        // verify the required parameter 'req' is set
        if (req == null) {
            throw new ApiException("Missing the required parameter 'req' when calling expirationAlertEditExpirationAlert(Async)");
        }

        return expirationAlertEditExpirationAlertCall(xKeyfactorRequestedWith, req, xKeyfactorApiVersion, _callback);

    }

    /**
     * Edit an expiration alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the expiration alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse expirationAlertEditExpirationAlert(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertUpdateRequest req, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> localVarResp = expirationAlertEditExpirationAlertWithHttpInfo(xKeyfactorRequestedWith, req, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Edit an expiration alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the expiration alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> expirationAlertEditExpirationAlertWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertUpdateRequest req, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertEditExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, req, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an expiration alert (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param req Information for the expiration alert (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertEditExpirationAlertAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertUpdateRequest req, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertEditExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, req, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertEditSchedule
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param newSchedule  (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertEditScheduleCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsAlertScheduleAlertScheduleRequest newSchedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newSchedule;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration/Schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertEditScheduleValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsAlertScheduleAlertScheduleRequest newSchedule, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertEditSchedule(Async)");
        }

        // verify the required parameter 'newSchedule' is set
        if (newSchedule == null) {
            throw new ApiException("Missing the required parameter 'newSchedule' when calling expirationAlertEditSchedule(Async)");
        }

        return expirationAlertEditScheduleCall(xKeyfactorRequestedWith, newSchedule, xKeyfactorApiVersion, _callback);

    }

    /**
     * Edit schedule
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param newSchedule  (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse expirationAlertEditSchedule(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsAlertScheduleAlertScheduleRequest newSchedule, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse> localVarResp = expirationAlertEditScheduleWithHttpInfo(xKeyfactorRequestedWith, newSchedule, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Edit schedule
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param newSchedule  (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse> expirationAlertEditScheduleWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsAlertScheduleAlertScheduleRequest newSchedule, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertEditScheduleValidateBeforeCall(xKeyfactorRequestedWith, newSchedule, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit schedule (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param newSchedule  (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertEditScheduleAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsAlertScheduleAlertScheduleRequest newSchedule, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertEditScheduleValidateBeforeCall(xKeyfactorRequestedWith, newSchedule, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertGetExpirationAlert
     * @param id Id for the expiration alert to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertGetExpirationAlertCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertGetExpirationAlertValidateBeforeCall(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling expirationAlertGetExpirationAlert(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertGetExpirationAlert(Async)");
        }

        return expirationAlertGetExpirationAlertCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Get an expiration alert
     * 
     * @param id Id for the expiration alert to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse expirationAlertGetExpirationAlert(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> localVarResp = expirationAlertGetExpirationAlertWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Get an expiration alert
     * 
     * @param id Id for the expiration alert to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> expirationAlertGetExpirationAlertWithHttpInfo(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertGetExpirationAlertValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an expiration alert (asynchronously)
     * 
     * @param id Id for the expiration alert to get (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertGetExpirationAlertAsync(Integer id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertGetExpirationAlertValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertGetExpirationAlerts
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertGetExpirationAlertsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagedQueryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.queryString", pagedQueryQueryString));
        }

        if (pagedQueryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.pageReturned", pagedQueryPageReturned));
        }

        if (pagedQueryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.returnLimit", pagedQueryReturnLimit));
        }

        if (pagedQuerySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.sortField", pagedQuerySortField));
        }

        if (pagedQuerySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagedQuery.sortAscending", pagedQuerySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertGetExpirationAlertsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertGetExpirationAlerts(Async)");
        }

        return expirationAlertGetExpirationAlertsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending, _callback);

    }

    /**
     * Gets all expiration alerts according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse> expirationAlertGetExpirationAlerts(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>> localVarResp = expirationAlertGetExpirationAlertsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending);
        return localVarResp.getData();
    }

    /**
     * Gets all expiration alerts according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>> expirationAlertGetExpirationAlertsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertGetExpirationAlertsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all expiration alerts according to the provided filter and output parameters (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pagedQueryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param pagedQueryPageReturned The current page within the result set to be returned (optional)
     * @param pagedQueryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pagedQuerySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param pagedQuerySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertGetExpirationAlertsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String pagedQueryQueryString, Integer pagedQueryPageReturned, Integer pagedQueryReturnLimit, String pagedQuerySortField, Integer pagedQuerySortAscending, final ApiCallback<List<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertGetExpirationAlertsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pagedQueryQueryString, pagedQueryPageReturned, pagedQueryReturnLimit, pagedQuerySortField, pagedQuerySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsAlertsExpirationExpirationAlertDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertGetSchedule
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertGetScheduleCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration/Schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertGetScheduleValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertGetSchedule(Async)");
        }

        return expirationAlertGetScheduleCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Get the schedule for expiration alerts
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse expirationAlertGetSchedule(String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse> localVarResp = expirationAlertGetScheduleWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the schedule for expiration alerts
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse> expirationAlertGetScheduleWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertGetScheduleValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the schedule for expiration alerts (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertGetScheduleAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertGetScheduleValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsAlertScheduleAlertScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertTestAllExpirationAlert
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertTestAllExpirationAlertCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestAllRequest expirationAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expirationAlertTestRequest;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration/TestAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertTestAllExpirationAlertValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestAllRequest expirationAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertTestAllExpirationAlert(Async)");
        }

        // verify the required parameter 'expirationAlertTestRequest' is set
        if (expirationAlertTestRequest == null) {
            throw new ApiException("Missing the required parameter 'expirationAlertTestRequest' when calling expirationAlertTestAllExpirationAlert(Async)");
        }

        return expirationAlertTestAllExpirationAlertCall(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Test All Expiration Alerts
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse expirationAlertTestAllExpirationAlert(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestAllRequest expirationAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse> localVarResp = expirationAlertTestAllExpirationAlertWithHttpInfo(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Test All Expiration Alerts
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse> expirationAlertTestAllExpirationAlertWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestAllRequest expirationAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertTestAllExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test All Expiration Alerts (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertTestAllExpirationAlertAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestAllRequest expirationAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertTestAllExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirationAlertTestExpirationAlert
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertTestExpirationAlertCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestRequest expirationAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expirationAlertTestRequest;

        // create path and map variables
        String localVarPath = "/Alerts/Expiration/Test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirationAlertTestExpirationAlertValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestRequest expirationAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling expirationAlertTestExpirationAlert(Async)");
        }

        // verify the required parameter 'expirationAlertTestRequest' is set
        if (expirationAlertTestRequest == null) {
            throw new ApiException("Missing the required parameter 'expirationAlertTestRequest' when calling expirationAlertTestExpirationAlert(Async)");
        }

        return expirationAlertTestExpirationAlertCall(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion, _callback);

    }

    /**
     * Test an Expiration Alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse expirationAlertTestExpirationAlert(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestRequest expirationAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse> localVarResp = expirationAlertTestExpirationAlertWithHttpInfo(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Test an Expiration Alert
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse> expirationAlertTestExpirationAlertWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestRequest expirationAlertTestRequest, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = expirationAlertTestExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test an Expiration Alert (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param expirationAlertTestRequest Information about the expiration alert test (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirationAlertTestExpirationAlertAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsAlertsExpirationExpirationAlertTestRequest expirationAlertTestRequest, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirationAlertTestExpirationAlertValidateBeforeCall(xKeyfactorRequestedWith, expirationAlertTestRequest, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
