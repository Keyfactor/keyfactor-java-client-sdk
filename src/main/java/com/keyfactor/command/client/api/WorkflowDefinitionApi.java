/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsAvailableStepQueryResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsAvailableStepResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsDefinitionCreateRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsDefinitionQueryResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsDefinitionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsDefinitionStepRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsDefinitionUpdateRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowDefinitionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowDefinitionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowDefinitionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workflowDefinitionConfigureDefinitionSteps
     * @param definitionId The Id of the definition. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A collection of {KeyfactorApi.Models.Workflows.DefinitionStepRequest} defining the steps to set on the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionConfigureDefinitionStepsCall(UUID definitionId, String xKeyfactorRequestedWith, List<KeyfactorApiModelsWorkflowsDefinitionStepRequest> request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/{definitionId}/Steps"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionConfigureDefinitionStepsValidateBeforeCall(UUID definitionId, String xKeyfactorRequestedWith, List<KeyfactorApiModelsWorkflowsDefinitionStepRequest> request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling workflowDefinitionConfigureDefinitionSteps(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionConfigureDefinitionSteps(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling workflowDefinitionConfigureDefinitionSteps(Async)");
        }

        return workflowDefinitionConfigureDefinitionStepsCall(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Sets the provided steps on the latest version of the definition.
     * If the latest version is also the published version, a new version will be created and the steps will be set on that new version.
     * @param definitionId The Id of the definition. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A collection of {KeyfactorApi.Models.Workflows.DefinitionStepRequest} defining the steps to set on the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsWorkflowsDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsWorkflowsDefinitionResponse workflowDefinitionConfigureDefinitionSteps(UUID definitionId, String xKeyfactorRequestedWith, List<KeyfactorApiModelsWorkflowsDefinitionStepRequest> request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> localVarResp = workflowDefinitionConfigureDefinitionStepsWithHttpInfo(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Sets the provided steps on the latest version of the definition.
     * If the latest version is also the published version, a new version will be created and the steps will be set on that new version.
     * @param definitionId The Id of the definition. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A collection of {KeyfactorApi.Models.Workflows.DefinitionStepRequest} defining the steps to set on the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsWorkflowsDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> workflowDefinitionConfigureDefinitionStepsWithHttpInfo(UUID definitionId, String xKeyfactorRequestedWith, List<KeyfactorApiModelsWorkflowsDefinitionStepRequest> request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionConfigureDefinitionStepsValidateBeforeCall(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the provided steps on the latest version of the definition. (asynchronously)
     * If the latest version is also the published version, a new version will be created and the steps will be set on that new version.
     * @param definitionId The Id of the definition. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A collection of {KeyfactorApi.Models.Workflows.DefinitionStepRequest} defining the steps to set on the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionConfigureDefinitionStepsAsync(UUID definitionId, String xKeyfactorRequestedWith, List<KeyfactorApiModelsWorkflowsDefinitionStepRequest> request, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsWorkflowsDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionConfigureDefinitionStepsValidateBeforeCall(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionCreateNewDefinition
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A {KeyfactorApi.Models.Workflows.DefinitionCreateRequest} with the display name, description, key and type of the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionCreateNewDefinitionCall(String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionCreateRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionCreateNewDefinitionValidateBeforeCall(String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionCreateRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionCreateNewDefinition(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling workflowDefinitionCreateNewDefinition(Async)");
        }

        return workflowDefinitionCreateNewDefinitionCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Creates a new base definition without any steps.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A {KeyfactorApi.Models.Workflows.DefinitionCreateRequest} with the display name, description, key and type of the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsWorkflowsDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsWorkflowsDefinitionResponse workflowDefinitionCreateNewDefinition(String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionCreateRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> localVarResp = workflowDefinitionCreateNewDefinitionWithHttpInfo(xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates a new base definition without any steps.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A {KeyfactorApi.Models.Workflows.DefinitionCreateRequest} with the display name, description, key and type of the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsWorkflowsDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> workflowDefinitionCreateNewDefinitionWithHttpInfo(String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionCreateRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionCreateNewDefinitionValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new base definition without any steps. (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request A {KeyfactorApi.Models.Workflows.DefinitionCreateRequest} with the display name, description, key and type of the definition. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionCreateNewDefinitionAsync(String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionCreateRequest request, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsWorkflowsDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionCreateNewDefinitionValidateBeforeCall(xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionDelete
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionDeleteCall(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/{definitionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionDeleteValidateBeforeCall(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling workflowDefinitionDelete(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionDelete(Async)");
        }

        return workflowDefinitionDeleteCall(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes the definition matching the given Id.
     * 
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void workflowDefinitionDelete(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        workflowDefinitionDeleteWithHttpInfo(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes the definition matching the given Id.
     * 
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowDefinitionDeleteWithHttpInfo(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionDeleteValidateBeforeCall(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the definition matching the given Id. (asynchronously)
     * 
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionDeleteAsync(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionDeleteValidateBeforeCall(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionGet
     * @param definitionId The Id of the definition to retrieve. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param definitionVersion The version to retrieve. If this value is not specified, the latest version will be returned. (optional)
     * @param exportable Indicates if the response should be cleansed of role ids for export. (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionGetCall(UUID definitionId, String xKeyfactorRequestedWith, Integer definitionVersion, Boolean exportable, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/{definitionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (definitionVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("definitionVersion", definitionVersion));
        }

        if (exportable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportable", exportable));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionGetValidateBeforeCall(UUID definitionId, String xKeyfactorRequestedWith, Integer definitionVersion, Boolean exportable, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling workflowDefinitionGet(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionGet(Async)");
        }

        return workflowDefinitionGetCall(definitionId, xKeyfactorRequestedWith, definitionVersion, exportable, xKeyfactorApiVersion, _callback);

    }

    /**
     * Gets a workflow definition.
     * 
     * @param definitionId The Id of the definition to retrieve. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param definitionVersion The version to retrieve. If this value is not specified, the latest version will be returned. (optional)
     * @param exportable Indicates if the response should be cleansed of role ids for export. (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsWorkflowsDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsWorkflowsDefinitionResponse workflowDefinitionGet(UUID definitionId, String xKeyfactorRequestedWith, Integer definitionVersion, Boolean exportable, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> localVarResp = workflowDefinitionGetWithHttpInfo(definitionId, xKeyfactorRequestedWith, definitionVersion, exportable, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a workflow definition.
     * 
     * @param definitionId The Id of the definition to retrieve. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param definitionVersion The version to retrieve. If this value is not specified, the latest version will be returned. (optional)
     * @param exportable Indicates if the response should be cleansed of role ids for export. (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsWorkflowsDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> workflowDefinitionGetWithHttpInfo(UUID definitionId, String xKeyfactorRequestedWith, Integer definitionVersion, Boolean exportable, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionGetValidateBeforeCall(definitionId, xKeyfactorRequestedWith, definitionVersion, exportable, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a workflow definition. (asynchronously)
     * 
     * @param definitionId The Id of the definition to retrieve. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param definitionVersion The version to retrieve. If this value is not specified, the latest version will be returned. (optional)
     * @param exportable Indicates if the response should be cleansed of role ids for export. (optional)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionGetAsync(UUID definitionId, String xKeyfactorRequestedWith, Integer definitionVersion, Boolean exportable, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsWorkflowsDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionGetValidateBeforeCall(definitionId, xKeyfactorRequestedWith, definitionVersion, exportable, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionGetStepSchema
     * @param extensionName The extension name of a specific step in the step schema. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionGetStepSchemaCall(String extensionName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/Steps/{extensionName}"
            .replace("{" + "extensionName" + "}", localVarApiClient.escapeString(extensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionGetStepSchemaValidateBeforeCall(String extensionName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extensionName' is set
        if (extensionName == null) {
            throw new ApiException("Missing the required parameter 'extensionName' when calling workflowDefinitionGetStepSchema(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionGetStepSchema(Async)");
        }

        return workflowDefinitionGetStepSchemaCall(extensionName, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Gets the schema of a given step with the specified extension name.
     * 
     * @param extensionName The extension name of a specific step in the step schema. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsWorkflowsAvailableStepResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsWorkflowsAvailableStepResponse workflowDefinitionGetStepSchema(String extensionName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsWorkflowsAvailableStepResponse> localVarResp = workflowDefinitionGetStepSchemaWithHttpInfo(extensionName, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the schema of a given step with the specified extension name.
     * 
     * @param extensionName The extension name of a specific step in the step schema. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsWorkflowsAvailableStepResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsWorkflowsAvailableStepResponse> workflowDefinitionGetStepSchemaWithHttpInfo(String extensionName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionGetStepSchemaValidateBeforeCall(extensionName, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsAvailableStepResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the schema of a given step with the specified extension name. (asynchronously)
     * 
     * @param extensionName The extension name of a specific step in the step schema. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionGetStepSchemaAsync(String extensionName, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsWorkflowsAvailableStepResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionGetStepSchemaValidateBeforeCall(extensionName, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsAvailableStepResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionPublishDefinition
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionPublishDefinitionCall(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/{definitionId}/Publish"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionPublishDefinitionValidateBeforeCall(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling workflowDefinitionPublishDefinition(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionPublishDefinition(Async)");
        }

        return workflowDefinitionPublishDefinitionCall(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Makes the most recent version of a Workflow Definition the published version.
     * 
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsWorkflowsDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsWorkflowsDefinitionResponse workflowDefinitionPublishDefinition(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> localVarResp = workflowDefinitionPublishDefinitionWithHttpInfo(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Makes the most recent version of a Workflow Definition the published version.
     * 
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsWorkflowsDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> workflowDefinitionPublishDefinitionWithHttpInfo(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionPublishDefinitionValidateBeforeCall(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Makes the most recent version of a Workflow Definition the published version. (asynchronously)
     * 
     * @param definitionId The Workflow Definition Id. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionPublishDefinitionAsync(UUID definitionId, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsWorkflowsDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionPublishDefinitionValidateBeforeCall(definitionId, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionQuery
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionQueryCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.queryString", queryQueryString));
        }

        if (queryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.pageReturned", queryPageReturned));
        }

        if (queryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.returnLimit", queryReturnLimit));
        }

        if (querySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortField", querySortField));
        }

        if (querySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortAscending", querySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionQueryValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionQuery(Async)");
        }

        return workflowDefinitionQueryCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);

    }

    /**
     * Gets the Definitions matching the query specifications.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsWorkflowsDefinitionQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsWorkflowsDefinitionQueryResponse> workflowDefinitionQuery(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsWorkflowsDefinitionQueryResponse>> localVarResp = workflowDefinitionQueryWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending);
        return localVarResp.getData();
    }

    /**
     * Gets the Definitions matching the query specifications.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsWorkflowsDefinitionQueryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsWorkflowsDefinitionQueryResponse>> workflowDefinitionQueryWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionQueryValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsWorkflowsDefinitionQueryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Definitions matching the query specifications. (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionQueryAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback<List<KeyfactorApiModelsWorkflowsDefinitionQueryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionQueryValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsWorkflowsDefinitionQueryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionQueryAvailableSteps
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionQueryAvailableStepsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/Steps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.queryString", queryQueryString));
        }

        if (queryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.pageReturned", queryPageReturned));
        }

        if (queryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.returnLimit", queryReturnLimit));
        }

        if (querySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortField", querySortField));
        }

        if (querySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortAscending", querySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionQueryAvailableStepsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionQueryAvailableSteps(Async)");
        }

        return workflowDefinitionQueryAvailableStepsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);

    }

    /**
     * Gets the result set of available steps for a given query.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsWorkflowsAvailableStepQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse> workflowDefinitionQueryAvailableSteps(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse>> localVarResp = workflowDefinitionQueryAvailableStepsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending);
        return localVarResp.getData();
    }

    /**
     * Gets the result set of available steps for a given query.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsWorkflowsAvailableStepQueryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse>> workflowDefinitionQueryAvailableStepsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionQueryAvailableStepsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the result set of available steps for a given query. (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionQueryAvailableStepsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback<List<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionQueryAvailableStepsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionQueryWorkflowTypes
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionQueryWorkflowTypesCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/Types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.queryString", queryQueryString));
        }

        if (queryPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.pageReturned", queryPageReturned));
        }

        if (queryReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.returnLimit", queryReturnLimit));
        }

        if (querySortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortField", querySortField));
        }

        if (querySortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query.sortAscending", querySortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionQueryWorkflowTypesValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionQueryWorkflowTypes(Async)");
        }

        return workflowDefinitionQueryWorkflowTypesCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);

    }

    /**
     * Performs a query against the workflow types in the system.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse> workflowDefinitionQueryWorkflowTypes(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse>> localVarResp = workflowDefinitionQueryWorkflowTypesWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending);
        return localVarResp.getData();
    }

    /**
     * Performs a query against the workflow types in the system.
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse>> workflowDefinitionQueryWorkflowTypesWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionQueryWorkflowTypesValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a query against the workflow types in the system. (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param queryQueryString Contents of the query (ex: field1 -eq value1 AND field2 -gt value2) (optional)
     * @param queryPageReturned The current page within the result set to be returned (optional)
     * @param queryReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param querySortField Field by which the results should be sorted (view results via Management Portal for sortable columns) (optional)
     * @param querySortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionQueryWorkflowTypesAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, String queryQueryString, Integer queryPageReturned, Integer queryReturnLimit, String querySortField, Integer querySortAscending, final ApiCallback<List<KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionQueryWorkflowTypesValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, queryQueryString, queryPageReturned, queryReturnLimit, querySortField, querySortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowDefinitionUpdateExistingDefinition
     * @param definitionId The Id of the definition to update. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The {KeyfactorApi.Models.Workflows.DefinitionUpdateRequest} holding the updated DispalyName and Description. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionUpdateExistingDefinitionCall(UUID definitionId, String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionUpdateRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/Workflow/Definitions/{definitionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowDefinitionUpdateExistingDefinitionValidateBeforeCall(UUID definitionId, String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionUpdateRequest request, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling workflowDefinitionUpdateExistingDefinition(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling workflowDefinitionUpdateExistingDefinition(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling workflowDefinitionUpdateExistingDefinition(Async)");
        }

        return workflowDefinitionUpdateExistingDefinitionCall(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);

    }

    /**
     * Updates the existing definition&#39;s DisplayName and Description.
     * 
     * @param definitionId The Id of the definition to update. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The {KeyfactorApi.Models.Workflows.DefinitionUpdateRequest} holding the updated DispalyName and Description. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsWorkflowsDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsWorkflowsDefinitionResponse workflowDefinitionUpdateExistingDefinition(UUID definitionId, String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionUpdateRequest request, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> localVarResp = workflowDefinitionUpdateExistingDefinitionWithHttpInfo(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Updates the existing definition&#39;s DisplayName and Description.
     * 
     * @param definitionId The Id of the definition to update. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The {KeyfactorApi.Models.Workflows.DefinitionUpdateRequest} holding the updated DispalyName and Description. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsWorkflowsDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsWorkflowsDefinitionResponse> workflowDefinitionUpdateExistingDefinitionWithHttpInfo(UUID definitionId, String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionUpdateRequest request, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowDefinitionUpdateExistingDefinitionValidateBeforeCall(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the existing definition&#39;s DisplayName and Description. (asynchronously)
     * 
     * @param definitionId The Id of the definition to update. (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param request The {KeyfactorApi.Models.Workflows.DefinitionUpdateRequest} holding the updated DispalyName and Description. (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowDefinitionUpdateExistingDefinitionAsync(UUID definitionId, String xKeyfactorRequestedWith, KeyfactorApiModelsWorkflowsDefinitionUpdateRequest request, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsWorkflowsDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowDefinitionUpdateExistingDefinitionValidateBeforeCall(definitionId, xKeyfactorRequestedWith, request, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsWorkflowsDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
