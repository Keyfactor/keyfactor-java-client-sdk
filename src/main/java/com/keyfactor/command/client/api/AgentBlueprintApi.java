/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.api;

import com.keyfactor.command.client.ApiCallback;
import com.keyfactor.command.client.ApiClient;
import com.keyfactor.command.client.ApiException;
import com.keyfactor.command.client.ApiResponse;
import com.keyfactor.command.client.Configuration;
import com.keyfactor.command.client.Pair;
import com.keyfactor.command.client.ProgressRequestBody;
import com.keyfactor.command.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.command.client.model.KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsOrchestratorsAgentBlueprintResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AgentBlueprintApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgentBlueprintApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AgentBlueprintApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for agentBlueprintApplyBlueprint
     * @param templateId Agent blueprint to apply to the agents (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param agentIds Agents to apply the blueprints to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintApplyBlueprintCall(UUID templateId, String xKeyfactorRequestedWith, List<UUID> agentIds, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agentIds;

        // create path and map variables
        String localVarPath = "/AgentBluePrint/ApplyBlueprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintApplyBlueprintValidateBeforeCall(UUID templateId, String xKeyfactorRequestedWith, List<UUID> agentIds, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling agentBlueprintApplyBlueprint(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintApplyBlueprint(Async)");
        }

        // verify the required parameter 'agentIds' is set
        if (agentIds == null) {
            throw new ApiException("Missing the required parameter 'agentIds' when calling agentBlueprintApplyBlueprint(Async)");
        }

        return agentBlueprintApplyBlueprintCall(templateId, xKeyfactorRequestedWith, agentIds, xKeyfactorApiVersion, _callback);

    }

    /**
     * Applies the selected agent blueprint to the provided agents
     * 
     * @param templateId Agent blueprint to apply to the agents (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param agentIds Agents to apply the blueprints to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void agentBlueprintApplyBlueprint(UUID templateId, String xKeyfactorRequestedWith, List<UUID> agentIds, String xKeyfactorApiVersion) throws ApiException {
        agentBlueprintApplyBlueprintWithHttpInfo(templateId, xKeyfactorRequestedWith, agentIds, xKeyfactorApiVersion);
    }

    /**
     * Applies the selected agent blueprint to the provided agents
     * 
     * @param templateId Agent blueprint to apply to the agents (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param agentIds Agents to apply the blueprints to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> agentBlueprintApplyBlueprintWithHttpInfo(UUID templateId, String xKeyfactorRequestedWith, List<UUID> agentIds, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintApplyBlueprintValidateBeforeCall(templateId, xKeyfactorRequestedWith, agentIds, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Applies the selected agent blueprint to the provided agents (asynchronously)
     * 
     * @param templateId Agent blueprint to apply to the agents (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param agentIds Agents to apply the blueprints to (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintApplyBlueprintAsync(UUID templateId, String xKeyfactorRequestedWith, List<UUID> agentIds, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintApplyBlueprintValidateBeforeCall(templateId, xKeyfactorRequestedWith, agentIds, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentBlueprintDeleteBlueprint
     * @param id Keyfactor agent blueprint identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintDeleteBlueprintCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AgentBluePrint/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintDeleteBlueprintValidateBeforeCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling agentBlueprintDeleteBlueprint(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintDeleteBlueprint(Async)");
        }

        return agentBlueprintDeleteBlueprintCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Deletes an agent blueprint by its Keyfactor identifier
     * 
     * @param id Keyfactor agent blueprint identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void agentBlueprintDeleteBlueprint(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        agentBlueprintDeleteBlueprintWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
    }

    /**
     * Deletes an agent blueprint by its Keyfactor identifier
     * 
     * @param id Keyfactor agent blueprint identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> agentBlueprintDeleteBlueprintWithHttpInfo(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintDeleteBlueprintValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an agent blueprint by its Keyfactor identifier (asynchronously)
     * 
     * @param id Keyfactor agent blueprint identifier (GUID) (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintDeleteBlueprintAsync(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintDeleteBlueprintValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentBlueprintGenerateBlueprint
     * @param agentId Agent to generate a blueprint from (required)
     * @param name Name of the new agent blueprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGenerateBlueprintCall(UUID agentId, String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AgentBluePrint/GenerateBluePrint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (agentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("agentId", agentId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintGenerateBlueprintValidateBeforeCall(UUID agentId, String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentId' is set
        if (agentId == null) {
            throw new ApiException("Missing the required parameter 'agentId' when calling agentBlueprintGenerateBlueprint(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling agentBlueprintGenerateBlueprint(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintGenerateBlueprint(Async)");
        }

        return agentBlueprintGenerateBlueprintCall(agentId, name, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Generates an agent blueprint from the provided agents
     * 
     * @param agentId Agent to generate a blueprint from (required)
     * @param name Name of the new agent blueprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse agentBlueprintGenerateBlueprint(UUID agentId, String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> localVarResp = agentBlueprintGenerateBlueprintWithHttpInfo(agentId, name, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Generates an agent blueprint from the provided agents
     * 
     * @param agentId Agent to generate a blueprint from (required)
     * @param name Name of the new agent blueprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> agentBlueprintGenerateBlueprintWithHttpInfo(UUID agentId, String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintGenerateBlueprintValidateBeforeCall(agentId, name, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates an agent blueprint from the provided agents (asynchronously)
     * 
     * @param agentId Agent to generate a blueprint from (required)
     * @param name Name of the new agent blueprint (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGenerateBlueprintAsync(UUID agentId, String name, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintGenerateBlueprintValidateBeforeCall(agentId, name, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentBlueprintGetAgentBlueprint
     * @param id Returns a single agent blueprint associated with the provided id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetAgentBlueprintCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AgentBluePrint/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintGetAgentBlueprintValidateBeforeCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling agentBlueprintGetAgentBlueprint(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintGetAgentBlueprint(Async)");
        }

        return agentBlueprintGetAgentBlueprintCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);

    }

    /**
     * Returns an agent blueprint according to the provided filter and output parameters
     * 
     * @param id Returns a single agent blueprint associated with the provided id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse agentBlueprintGetAgentBlueprint(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        ApiResponse<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> localVarResp = agentBlueprintGetAgentBlueprintWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns an agent blueprint according to the provided filter and output parameters
     * 
     * @param id Returns a single agent blueprint associated with the provided id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @return ApiResponse&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> agentBlueprintGetAgentBlueprintWithHttpInfo(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintGetAgentBlueprintValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, null);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an agent blueprint according to the provided filter and output parameters (asynchronously)
     * 
     * @param id Returns a single agent blueprint associated with the provided id (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetAgentBlueprintAsync(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, final ApiCallback<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintGetAgentBlueprintValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentBlueprintGetAgentBlueprints
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetAgentBlueprintsCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AgentBluePrint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pqPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.pageReturned", pqPageReturned));
        }

        if (pqReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.returnLimit", pqReturnLimit));
        }

        if (pqSortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortField", pqSortField));
        }

        if (pqSortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortAscending", pqSortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintGetAgentBlueprintsValidateBeforeCall(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintGetAgentBlueprints(Async)");
        }

        return agentBlueprintGetAgentBlueprintsCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);

    }

    /**
     * Returns all agent blueprints according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> agentBlueprintGetAgentBlueprints(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>> localVarResp = agentBlueprintGetAgentBlueprintsWithHttpInfo(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending);
        return localVarResp.getData();
    }

    /**
     * Returns all agent blueprints according to the provided filter and output parameters
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>> agentBlueprintGetAgentBlueprintsWithHttpInfo(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintGetAgentBlueprintsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all agent blueprints according to the provided filter and output parameters (asynchronously)
     * 
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetAgentBlueprintsAsync(String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback<List<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintGetAgentBlueprintsValidateBeforeCall(xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentBlueprintGetBlueprintJobs
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetBlueprintJobsCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AgentBluePrint/{id}/Jobs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pqPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.pageReturned", pqPageReturned));
        }

        if (pqReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.returnLimit", pqReturnLimit));
        }

        if (pqSortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortField", pqSortField));
        }

        if (pqSortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortAscending", pqSortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintGetBlueprintJobsValidateBeforeCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling agentBlueprintGetBlueprintJobs(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintGetBlueprintJobs(Async)");
        }

        return agentBlueprintGetBlueprintJobsCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);

    }

    /**
     * Gets the agent blueprint scheduled jobs
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse> agentBlueprintGetBlueprintJobs(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse>> localVarResp = agentBlueprintGetBlueprintJobsWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending);
        return localVarResp.getData();
    }

    /**
     * Gets the agent blueprint scheduled jobs
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse>> agentBlueprintGetBlueprintJobsWithHttpInfo(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintGetBlueprintJobsValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the agent blueprint scheduled jobs (asynchronously)
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetBlueprintJobsAsync(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback<List<KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintGetBlueprintJobsValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentBlueprintGetBlueprintStores
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetBlueprintStoresCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AgentBluePrint/{id}/Stores"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pqPageReturned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.pageReturned", pqPageReturned));
        }

        if (pqReturnLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.returnLimit", pqReturnLimit));
        }

        if (pqSortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortField", pqSortField));
        }

        if (pqSortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pq.sortAscending", pqSortAscending));
        }

        if (xKeyfactorApiVersion != null) {
            localVarHeaderParams.put("x-keyfactor-api-version", localVarApiClient.parameterToString(xKeyfactorApiVersion));
        }

        if (xKeyfactorRequestedWith != null) {
            localVarHeaderParams.put("x-keyfactor-requested-with", localVarApiClient.parameterToString(xKeyfactorRequestedWith));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentBlueprintGetBlueprintStoresValidateBeforeCall(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling agentBlueprintGetBlueprintStores(Async)");
        }

        // verify the required parameter 'xKeyfactorRequestedWith' is set
        if (xKeyfactorRequestedWith == null) {
            throw new ApiException("Missing the required parameter 'xKeyfactorRequestedWith' when calling agentBlueprintGetBlueprintStores(Async)");
        }

        return agentBlueprintGetBlueprintStoresCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);

    }

    /**
     * Gets the agent blueprint certificate stores
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return List&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse> agentBlueprintGetBlueprintStores(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        ApiResponse<List<KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse>> localVarResp = agentBlueprintGetBlueprintStoresWithHttpInfo(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending);
        return localVarResp.getData();
    }

    /**
     * Gets the agent blueprint certificate stores
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @return ApiResponse&lt;List&lt;KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse>> agentBlueprintGetBlueprintStoresWithHttpInfo(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending) throws ApiException {
        okhttp3.Call localVarCall = agentBlueprintGetBlueprintStoresValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, null);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the agent blueprint certificate stores (asynchronously)
     * 
     * @param id  (required)
     * @param xKeyfactorRequestedWith Type of the request [XMLHttpRequest, APIClient] (required)
     * @param xKeyfactorApiVersion Desired version of the api, if not provided defaults to v1 (optional, default to 1)
     * @param pqPageReturned The current page within the result set to be returned (optional)
     * @param pqReturnLimit Maximum number of records to be returned in a single call (optional)
     * @param pqSortField Field by which the results should be sorted (OperationStart, OperationEnd, UserName) (optional)
     * @param pqSortAscending Field sort direction [0&#x3D;ascending, 1&#x3D;descending] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentBlueprintGetBlueprintStoresAsync(UUID id, String xKeyfactorRequestedWith, String xKeyfactorApiVersion, Integer pqPageReturned, Integer pqReturnLimit, String pqSortField, Integer pqSortAscending, final ApiCallback<List<KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentBlueprintGetBlueprintStoresValidateBeforeCall(id, xKeyfactorRequestedWith, xKeyfactorApiVersion, pqPageReturned, pqReturnLimit, pqSortField, pqSortAscending, _callback);
        Type localVarReturnType = new TypeToken<List<KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
