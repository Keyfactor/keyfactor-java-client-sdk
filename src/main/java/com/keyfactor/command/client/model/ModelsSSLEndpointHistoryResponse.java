/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.ModelsSSLEndpointHistoryResponseCertificateModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsSSLEndpointHistoryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class ModelsSSLEndpointHistoryResponse {
  public static final String SERIALIZED_NAME_HISTORY_ID = "HistoryId";
  @SerializedName(SERIALIZED_NAME_HISTORY_ID)
  private UUID historyId;

  public static final String SERIALIZED_NAME_ENDPOINT_ID = "EndpointId";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ID)
  private UUID endpointId;

  public static final String SERIALIZED_NAME_AUDIT_ID = "AuditId";
  @SerializedName(SERIALIZED_NAME_AUDIT_ID)
  private Long auditId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets jobType
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    JobTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(Integer value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return JobTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  /**
   * Gets or Sets probeType
   */
  @JsonAdapter(ProbeTypeEnum.Adapter.class)
  public enum ProbeTypeEnum {
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6);

    private Integer value;

    ProbeTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProbeTypeEnum fromValue(Integer value) {
      for (ProbeTypeEnum b : ProbeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProbeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProbeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProbeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ProbeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROBE_TYPE = "ProbeType";
  @SerializedName(SERIALIZED_NAME_PROBE_TYPE)
  private ProbeTypeEnum probeType;

  public static final String SERIALIZED_NAME_REVERSE_D_N_S = "ReverseDNS";
  @SerializedName(SERIALIZED_NAME_REVERSE_D_N_S)
  private String reverseDNS;

  public static final String SERIALIZED_NAME_HISTORY_CERTIFICATES = "HistoryCertificates";
  @SerializedName(SERIALIZED_NAME_HISTORY_CERTIFICATES)
  private List<ModelsSSLEndpointHistoryResponseCertificateModel> historyCertificates = null;

  public ModelsSSLEndpointHistoryResponse() {
  }

  public ModelsSSLEndpointHistoryResponse historyId(UUID historyId) {
    
    this.historyId = historyId;
    return this;
  }

   /**
   * Get historyId
   * @return historyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getHistoryId() {
    return historyId;
  }


  public void setHistoryId(UUID historyId) {
    this.historyId = historyId;
  }


  public ModelsSSLEndpointHistoryResponse endpointId(UUID endpointId) {
    
    this.endpointId = endpointId;
    return this;
  }

   /**
   * Get endpointId
   * @return endpointId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getEndpointId() {
    return endpointId;
  }


  public void setEndpointId(UUID endpointId) {
    this.endpointId = endpointId;
  }


  public ModelsSSLEndpointHistoryResponse auditId(Long auditId) {
    
    this.auditId = auditId;
    return this;
  }

   /**
   * Get auditId
   * @return auditId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getAuditId() {
    return auditId;
  }


  public void setAuditId(Long auditId) {
    this.auditId = auditId;
  }


  public ModelsSSLEndpointHistoryResponse timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ModelsSSLEndpointHistoryResponse status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ModelsSSLEndpointHistoryResponse jobType(JobTypeEnum jobType) {
    
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobTypeEnum getJobType() {
    return jobType;
  }


  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public ModelsSSLEndpointHistoryResponse probeType(ProbeTypeEnum probeType) {
    
    this.probeType = probeType;
    return this;
  }

   /**
   * Get probeType
   * @return probeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProbeTypeEnum getProbeType() {
    return probeType;
  }


  public void setProbeType(ProbeTypeEnum probeType) {
    this.probeType = probeType;
  }


  public ModelsSSLEndpointHistoryResponse reverseDNS(String reverseDNS) {
    
    this.reverseDNS = reverseDNS;
    return this;
  }

   /**
   * Get reverseDNS
   * @return reverseDNS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReverseDNS() {
    return reverseDNS;
  }


  public void setReverseDNS(String reverseDNS) {
    this.reverseDNS = reverseDNS;
  }


  public ModelsSSLEndpointHistoryResponse historyCertificates(List<ModelsSSLEndpointHistoryResponseCertificateModel> historyCertificates) {
    
    this.historyCertificates = historyCertificates;
    return this;
  }

  public ModelsSSLEndpointHistoryResponse addHistoryCertificatesItem(ModelsSSLEndpointHistoryResponseCertificateModel historyCertificatesItem) {
    if (this.historyCertificates == null) {
      this.historyCertificates = new ArrayList<>();
    }
    this.historyCertificates.add(historyCertificatesItem);
    return this;
  }

   /**
   * Get historyCertificates
   * @return historyCertificates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsSSLEndpointHistoryResponseCertificateModel> getHistoryCertificates() {
    return historyCertificates;
  }


  public void setHistoryCertificates(List<ModelsSSLEndpointHistoryResponseCertificateModel> historyCertificates) {
    this.historyCertificates = historyCertificates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsSSLEndpointHistoryResponse modelsSSLEndpointHistoryResponse = (ModelsSSLEndpointHistoryResponse) o;
    return Objects.equals(this.historyId, modelsSSLEndpointHistoryResponse.historyId) &&
        Objects.equals(this.endpointId, modelsSSLEndpointHistoryResponse.endpointId) &&
        Objects.equals(this.auditId, modelsSSLEndpointHistoryResponse.auditId) &&
        Objects.equals(this.timestamp, modelsSSLEndpointHistoryResponse.timestamp) &&
        Objects.equals(this.status, modelsSSLEndpointHistoryResponse.status) &&
        Objects.equals(this.jobType, modelsSSLEndpointHistoryResponse.jobType) &&
        Objects.equals(this.probeType, modelsSSLEndpointHistoryResponse.probeType) &&
        Objects.equals(this.reverseDNS, modelsSSLEndpointHistoryResponse.reverseDNS) &&
        Objects.equals(this.historyCertificates, modelsSSLEndpointHistoryResponse.historyCertificates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(historyId, endpointId, auditId, timestamp, status, jobType, probeType, reverseDNS, historyCertificates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsSSLEndpointHistoryResponse {\n");
    sb.append("    historyId: ").append(toIndentedString(historyId)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    auditId: ").append(toIndentedString(auditId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    probeType: ").append(toIndentedString(probeType)).append("\n");
    sb.append("    reverseDNS: ").append(toIndentedString(reverseDNS)).append("\n");
    sb.append("    historyCertificates: ").append(toIndentedString(historyCertificates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HistoryId");
    openapiFields.add("EndpointId");
    openapiFields.add("AuditId");
    openapiFields.add("Timestamp");
    openapiFields.add("Status");
    openapiFields.add("JobType");
    openapiFields.add("ProbeType");
    openapiFields.add("ReverseDNS");
    openapiFields.add("HistoryCertificates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsSSLEndpointHistoryResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsSSLEndpointHistoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsSSLEndpointHistoryResponse is not found in the empty JSON string", ModelsSSLEndpointHistoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsSSLEndpointHistoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsSSLEndpointHistoryResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("HistoryId") != null && !jsonObj.get("HistoryId").isJsonNull()) && !jsonObj.get("HistoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HistoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HistoryId").toString()));
      }
      if ((jsonObj.get("EndpointId") != null && !jsonObj.get("EndpointId").isJsonNull()) && !jsonObj.get("EndpointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndpointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndpointId").toString()));
      }
      if ((jsonObj.get("ReverseDNS") != null && !jsonObj.get("ReverseDNS").isJsonNull()) && !jsonObj.get("ReverseDNS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReverseDNS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReverseDNS").toString()));
      }
      if (jsonObj.get("HistoryCertificates") != null && !jsonObj.get("HistoryCertificates").isJsonNull()) {
        JsonArray jsonArrayhistoryCertificates = jsonObj.getAsJsonArray("HistoryCertificates");
        if (jsonArrayhistoryCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HistoryCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HistoryCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("HistoryCertificates").toString()));
          }

          // validate the optional field `HistoryCertificates` (array)
          for (int i = 0; i < jsonArrayhistoryCertificates.size(); i++) {
            ModelsSSLEndpointHistoryResponseCertificateModel.validateJsonObject(jsonArrayhistoryCertificates.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsSSLEndpointHistoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsSSLEndpointHistoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsSSLEndpointHistoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsSSLEndpointHistoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsSSLEndpointHistoryResponse>() {
           @Override
           public void write(JsonWriter out, ModelsSSLEndpointHistoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsSSLEndpointHistoryResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsSSLEndpointHistoryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsSSLEndpointHistoryResponse
  * @throws IOException if the JSON string is invalid with respect to ModelsSSLEndpointHistoryResponse
  */
  public static ModelsSSLEndpointHistoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsSSLEndpointHistoryResponse.class);
  }

 /**
  * Convert an instance of ModelsSSLEndpointHistoryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

