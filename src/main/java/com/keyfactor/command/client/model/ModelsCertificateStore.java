/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingKeyfactorSchedule;
import com.keyfactor.command.client.model.ModelsReenrollmentStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsCertificateStore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class ModelsCertificateStore {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "ContainerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private Integer containerId;

  public static final String SERIALIZED_NAME_CLIENT_MACHINE = "ClientMachine";
  @SerializedName(SERIALIZED_NAME_CLIENT_MACHINE)
  private String clientMachine;

  public static final String SERIALIZED_NAME_STOREPATH = "Storepath";
  @SerializedName(SERIALIZED_NAME_STOREPATH)
  private String storepath;

  public static final String SERIALIZED_NAME_CERT_STORE_INVENTORY_JOB_ID = "CertStoreInventoryJobId";
  @SerializedName(SERIALIZED_NAME_CERT_STORE_INVENTORY_JOB_ID)
  private UUID certStoreInventoryJobId;

  public static final String SERIALIZED_NAME_CERT_STORE_TYPE = "CertStoreType";
  @SerializedName(SERIALIZED_NAME_CERT_STORE_TYPE)
  private Integer certStoreType;

  public static final String SERIALIZED_NAME_APPROVED = "Approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_CREATE_IF_MISSING = "CreateIfMissing";
  @SerializedName(SERIALIZED_NAME_CREATE_IF_MISSING)
  private Boolean createIfMissing;

  public static final String SERIALIZED_NAME_PROPERTIES = "Properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  public static final String SERIALIZED_NAME_AGENT_ID = "AgentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private UUID agentId;

  public static final String SERIALIZED_NAME_AGENT_ASSIGNED = "AgentAssigned";
  @SerializedName(SERIALIZED_NAME_AGENT_ASSIGNED)
  private Boolean agentAssigned;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "ContainerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_INVENTORY_SCHEDULE = "InventorySchedule";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SCHEDULE)
  private KeyfactorCommonSchedulingKeyfactorSchedule inventorySchedule;

  public static final String SERIALIZED_NAME_REENROLLMENT_STATUS = "ReenrollmentStatus";
  @SerializedName(SERIALIZED_NAME_REENROLLMENT_STATUS)
  private ModelsReenrollmentStatus reenrollmentStatus;

  public static final String SERIALIZED_NAME_SET_NEW_PASSWORD_ALLOWED = "SetNewPasswordAllowed";
  @SerializedName(SERIALIZED_NAME_SET_NEW_PASSWORD_ALLOWED)
  private Boolean setNewPasswordAllowed;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public ModelsCertificateStore() {
  }

  
  public ModelsCertificateStore(
     String displayName
  ) {
    this();
    this.displayName = displayName;
  }

  public ModelsCertificateStore id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }




  public ModelsCertificateStore containerId(Integer containerId) {
    
    this.containerId = containerId;
    return this;
  }

   /**
   * Get containerId
   * @return containerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getContainerId() {
    return containerId;
  }


  public void setContainerId(Integer containerId) {
    this.containerId = containerId;
  }


  public ModelsCertificateStore clientMachine(String clientMachine) {
    
    this.clientMachine = clientMachine;
    return this;
  }

   /**
   * Get clientMachine
   * @return clientMachine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientMachine() {
    return clientMachine;
  }


  public void setClientMachine(String clientMachine) {
    this.clientMachine = clientMachine;
  }


  public ModelsCertificateStore storepath(String storepath) {
    
    this.storepath = storepath;
    return this;
  }

   /**
   * Get storepath
   * @return storepath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStorepath() {
    return storepath;
  }


  public void setStorepath(String storepath) {
    this.storepath = storepath;
  }


  public ModelsCertificateStore certStoreInventoryJobId(UUID certStoreInventoryJobId) {
    
    this.certStoreInventoryJobId = certStoreInventoryJobId;
    return this;
  }

   /**
   * Get certStoreInventoryJobId
   * @return certStoreInventoryJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getCertStoreInventoryJobId() {
    return certStoreInventoryJobId;
  }


  public void setCertStoreInventoryJobId(UUID certStoreInventoryJobId) {
    this.certStoreInventoryJobId = certStoreInventoryJobId;
  }


  public ModelsCertificateStore certStoreType(Integer certStoreType) {
    
    this.certStoreType = certStoreType;
    return this;
  }

   /**
   * Get certStoreType
   * @return certStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCertStoreType() {
    return certStoreType;
  }


  public void setCertStoreType(Integer certStoreType) {
    this.certStoreType = certStoreType;
  }


  public ModelsCertificateStore approved(Boolean approved) {
    
    this.approved = approved;
    return this;
  }

   /**
   * Get approved
   * @return approved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getApproved() {
    return approved;
  }


  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public ModelsCertificateStore createIfMissing(Boolean createIfMissing) {
    
    this.createIfMissing = createIfMissing;
    return this;
  }

   /**
   * Get createIfMissing
   * @return createIfMissing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCreateIfMissing() {
    return createIfMissing;
  }


  public void setCreateIfMissing(Boolean createIfMissing) {
    this.createIfMissing = createIfMissing;
  }


  public ModelsCertificateStore properties(String properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProperties() {
    return properties;
  }


  public void setProperties(String properties) {
    this.properties = properties;
  }


  public ModelsCertificateStore agentId(UUID agentId) {
    
    this.agentId = agentId;
    return this;
  }

   /**
   * Get agentId
   * @return agentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAgentId() {
    return agentId;
  }


  public void setAgentId(UUID agentId) {
    this.agentId = agentId;
  }


  public ModelsCertificateStore agentAssigned(Boolean agentAssigned) {
    
    this.agentAssigned = agentAssigned;
    return this;
  }

   /**
   * Get agentAssigned
   * @return agentAssigned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAgentAssigned() {
    return agentAssigned;
  }


  public void setAgentAssigned(Boolean agentAssigned) {
    this.agentAssigned = agentAssigned;
  }


  public ModelsCertificateStore containerName(String containerName) {
    
    this.containerName = containerName;
    return this;
  }

   /**
   * Get containerName
   * @return containerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContainerName() {
    return containerName;
  }


  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public ModelsCertificateStore inventorySchedule(KeyfactorCommonSchedulingKeyfactorSchedule inventorySchedule) {
    
    this.inventorySchedule = inventorySchedule;
    return this;
  }

   /**
   * Get inventorySchedule
   * @return inventorySchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingKeyfactorSchedule getInventorySchedule() {
    return inventorySchedule;
  }


  public void setInventorySchedule(KeyfactorCommonSchedulingKeyfactorSchedule inventorySchedule) {
    this.inventorySchedule = inventorySchedule;
  }


  public ModelsCertificateStore reenrollmentStatus(ModelsReenrollmentStatus reenrollmentStatus) {
    
    this.reenrollmentStatus = reenrollmentStatus;
    return this;
  }

   /**
   * Get reenrollmentStatus
   * @return reenrollmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelsReenrollmentStatus getReenrollmentStatus() {
    return reenrollmentStatus;
  }


  public void setReenrollmentStatus(ModelsReenrollmentStatus reenrollmentStatus) {
    this.reenrollmentStatus = reenrollmentStatus;
  }


  public ModelsCertificateStore setNewPasswordAllowed(Boolean setNewPasswordAllowed) {
    
    this.setNewPasswordAllowed = setNewPasswordAllowed;
    return this;
  }

   /**
   * Get setNewPasswordAllowed
   * @return setNewPasswordAllowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSetNewPasswordAllowed() {
    return setNewPasswordAllowed;
  }


  public void setSetNewPasswordAllowed(Boolean setNewPasswordAllowed) {
    this.setNewPasswordAllowed = setNewPasswordAllowed;
  }


  public ModelsCertificateStore password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCertificateStore modelsCertificateStore = (ModelsCertificateStore) o;
    return Objects.equals(this.id, modelsCertificateStore.id) &&
        Objects.equals(this.displayName, modelsCertificateStore.displayName) &&
        Objects.equals(this.containerId, modelsCertificateStore.containerId) &&
        Objects.equals(this.clientMachine, modelsCertificateStore.clientMachine) &&
        Objects.equals(this.storepath, modelsCertificateStore.storepath) &&
        Objects.equals(this.certStoreInventoryJobId, modelsCertificateStore.certStoreInventoryJobId) &&
        Objects.equals(this.certStoreType, modelsCertificateStore.certStoreType) &&
        Objects.equals(this.approved, modelsCertificateStore.approved) &&
        Objects.equals(this.createIfMissing, modelsCertificateStore.createIfMissing) &&
        Objects.equals(this.properties, modelsCertificateStore.properties) &&
        Objects.equals(this.agentId, modelsCertificateStore.agentId) &&
        Objects.equals(this.agentAssigned, modelsCertificateStore.agentAssigned) &&
        Objects.equals(this.containerName, modelsCertificateStore.containerName) &&
        Objects.equals(this.inventorySchedule, modelsCertificateStore.inventorySchedule) &&
        Objects.equals(this.reenrollmentStatus, modelsCertificateStore.reenrollmentStatus) &&
        Objects.equals(this.setNewPasswordAllowed, modelsCertificateStore.setNewPasswordAllowed) &&
        Objects.equals(this.password, modelsCertificateStore.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, containerId, clientMachine, storepath, certStoreInventoryJobId, certStoreType, approved, createIfMissing, properties, agentId, agentAssigned, containerName, inventorySchedule, reenrollmentStatus, setNewPasswordAllowed, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCertificateStore {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    clientMachine: ").append(toIndentedString(clientMachine)).append("\n");
    sb.append("    storepath: ").append(toIndentedString(storepath)).append("\n");
    sb.append("    certStoreInventoryJobId: ").append(toIndentedString(certStoreInventoryJobId)).append("\n");
    sb.append("    certStoreType: ").append(toIndentedString(certStoreType)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    createIfMissing: ").append(toIndentedString(createIfMissing)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    agentAssigned: ").append(toIndentedString(agentAssigned)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    inventorySchedule: ").append(toIndentedString(inventorySchedule)).append("\n");
    sb.append("    reenrollmentStatus: ").append(toIndentedString(reenrollmentStatus)).append("\n");
    sb.append("    setNewPasswordAllowed: ").append(toIndentedString(setNewPasswordAllowed)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("DisplayName");
    openapiFields.add("ContainerId");
    openapiFields.add("ClientMachine");
    openapiFields.add("Storepath");
    openapiFields.add("CertStoreInventoryJobId");
    openapiFields.add("CertStoreType");
    openapiFields.add("Approved");
    openapiFields.add("CreateIfMissing");
    openapiFields.add("Properties");
    openapiFields.add("AgentId");
    openapiFields.add("AgentAssigned");
    openapiFields.add("ContainerName");
    openapiFields.add("InventorySchedule");
    openapiFields.add("ReenrollmentStatus");
    openapiFields.add("SetNewPasswordAllowed");
    openapiFields.add("Password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsCertificateStore
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsCertificateStore.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCertificateStore is not found in the empty JSON string", ModelsCertificateStore.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsCertificateStore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCertificateStore` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("ClientMachine") != null && !jsonObj.get("ClientMachine").isJsonNull()) && !jsonObj.get("ClientMachine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientMachine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientMachine").toString()));
      }
      if ((jsonObj.get("Storepath") != null && !jsonObj.get("Storepath").isJsonNull()) && !jsonObj.get("Storepath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Storepath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Storepath").toString()));
      }
      if ((jsonObj.get("CertStoreInventoryJobId") != null && !jsonObj.get("CertStoreInventoryJobId").isJsonNull()) && !jsonObj.get("CertStoreInventoryJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertStoreInventoryJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertStoreInventoryJobId").toString()));
      }
      if ((jsonObj.get("Properties") != null && !jsonObj.get("Properties").isJsonNull()) && !jsonObj.get("Properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Properties").toString()));
      }
      if ((jsonObj.get("AgentId") != null && !jsonObj.get("AgentId").isJsonNull()) && !jsonObj.get("AgentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentId").toString()));
      }
      if ((jsonObj.get("ContainerName") != null && !jsonObj.get("ContainerName").isJsonNull()) && !jsonObj.get("ContainerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContainerName").toString()));
      }
      // validate the optional field `InventorySchedule`
      if (jsonObj.get("InventorySchedule") != null && !jsonObj.get("InventorySchedule").isJsonNull()) {
        KeyfactorCommonSchedulingKeyfactorSchedule.validateJsonObject(jsonObj.getAsJsonObject("InventorySchedule"));
      }
      // validate the optional field `ReenrollmentStatus`
      if (jsonObj.get("ReenrollmentStatus") != null && !jsonObj.get("ReenrollmentStatus").isJsonNull()) {
        ModelsReenrollmentStatus.validateJsonObject(jsonObj.getAsJsonObject("ReenrollmentStatus"));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCertificateStore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCertificateStore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCertificateStore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCertificateStore.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCertificateStore>() {
           @Override
           public void write(JsonWriter out, ModelsCertificateStore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCertificateStore read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsCertificateStore given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsCertificateStore
  * @throws IOException if the JSON string is invalid with respect to ModelsCertificateStore
  */
  public static ModelsCertificateStore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCertificateStore.class);
  }

 /**
  * Convert an instance of ModelsCertificateStore to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

