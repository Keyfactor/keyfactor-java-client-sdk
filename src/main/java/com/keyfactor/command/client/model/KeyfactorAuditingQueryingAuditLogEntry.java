/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorAuditingQueryingAuditLogEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class KeyfactorAuditingQueryingAuditLogEntry {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SIGNATURE = "Signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private Integer operation;

  /**
   * Gets or Sets level
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    LevelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(Integer value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return LevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "Level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "EntityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_AUDIT_IDENTIFIER = "AuditIdentifier";
  @SerializedName(SERIALIZED_NAME_AUDIT_IDENTIFIER)
  private String auditIdentifier;

  public static final String SERIALIZED_NAME_IMMUTABLE_IDENTIFIER = "ImmutableIdentifier";
  @SerializedName(SERIALIZED_NAME_IMMUTABLE_IDENTIFIER)
  private String immutableIdentifier;

  public KeyfactorAuditingQueryingAuditLogEntry() {
  }

  public KeyfactorAuditingQueryingAuditLogEntry id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public KeyfactorAuditingQueryingAuditLogEntry timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public KeyfactorAuditingQueryingAuditLogEntry message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public KeyfactorAuditingQueryingAuditLogEntry signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }


  public KeyfactorAuditingQueryingAuditLogEntry category(Integer category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCategory() {
    return category;
  }


  public void setCategory(Integer category) {
    this.category = category;
  }


  public KeyfactorAuditingQueryingAuditLogEntry operation(Integer operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOperation() {
    return operation;
  }


  public void setOperation(Integer operation) {
    this.operation = operation;
  }


  public KeyfactorAuditingQueryingAuditLogEntry level(LevelEnum level) {
    
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LevelEnum getLevel() {
    return level;
  }


  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public KeyfactorAuditingQueryingAuditLogEntry user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public KeyfactorAuditingQueryingAuditLogEntry entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public KeyfactorAuditingQueryingAuditLogEntry auditIdentifier(String auditIdentifier) {
    
    this.auditIdentifier = auditIdentifier;
    return this;
  }

   /**
   * Get auditIdentifier
   * @return auditIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuditIdentifier() {
    return auditIdentifier;
  }


  public void setAuditIdentifier(String auditIdentifier) {
    this.auditIdentifier = auditIdentifier;
  }


  public KeyfactorAuditingQueryingAuditLogEntry immutableIdentifier(String immutableIdentifier) {
    
    this.immutableIdentifier = immutableIdentifier;
    return this;
  }

   /**
   * Get immutableIdentifier
   * @return immutableIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImmutableIdentifier() {
    return immutableIdentifier;
  }


  public void setImmutableIdentifier(String immutableIdentifier) {
    this.immutableIdentifier = immutableIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorAuditingQueryingAuditLogEntry keyfactorAuditingQueryingAuditLogEntry = (KeyfactorAuditingQueryingAuditLogEntry) o;
    return Objects.equals(this.id, keyfactorAuditingQueryingAuditLogEntry.id) &&
        Objects.equals(this.timestamp, keyfactorAuditingQueryingAuditLogEntry.timestamp) &&
        Objects.equals(this.message, keyfactorAuditingQueryingAuditLogEntry.message) &&
        Objects.equals(this.signature, keyfactorAuditingQueryingAuditLogEntry.signature) &&
        Objects.equals(this.category, keyfactorAuditingQueryingAuditLogEntry.category) &&
        Objects.equals(this.operation, keyfactorAuditingQueryingAuditLogEntry.operation) &&
        Objects.equals(this.level, keyfactorAuditingQueryingAuditLogEntry.level) &&
        Objects.equals(this.user, keyfactorAuditingQueryingAuditLogEntry.user) &&
        Objects.equals(this.entityType, keyfactorAuditingQueryingAuditLogEntry.entityType) &&
        Objects.equals(this.auditIdentifier, keyfactorAuditingQueryingAuditLogEntry.auditIdentifier) &&
        Objects.equals(this.immutableIdentifier, keyfactorAuditingQueryingAuditLogEntry.immutableIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, message, signature, category, operation, level, user, entityType, auditIdentifier, immutableIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorAuditingQueryingAuditLogEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    auditIdentifier: ").append(toIndentedString(auditIdentifier)).append("\n");
    sb.append("    immutableIdentifier: ").append(toIndentedString(immutableIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Timestamp");
    openapiFields.add("Message");
    openapiFields.add("Signature");
    openapiFields.add("Category");
    openapiFields.add("Operation");
    openapiFields.add("Level");
    openapiFields.add("User");
    openapiFields.add("EntityType");
    openapiFields.add("AuditIdentifier");
    openapiFields.add("ImmutableIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorAuditingQueryingAuditLogEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorAuditingQueryingAuditLogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorAuditingQueryingAuditLogEntry is not found in the empty JSON string", KeyfactorAuditingQueryingAuditLogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorAuditingQueryingAuditLogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorAuditingQueryingAuditLogEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      if ((jsonObj.get("Signature") != null && !jsonObj.get("Signature").isJsonNull()) && !jsonObj.get("Signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Signature").toString()));
      }
      if ((jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) && !jsonObj.get("User").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User").toString()));
      }
      if ((jsonObj.get("EntityType") != null && !jsonObj.get("EntityType").isJsonNull()) && !jsonObj.get("EntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityType").toString()));
      }
      if ((jsonObj.get("AuditIdentifier") != null && !jsonObj.get("AuditIdentifier").isJsonNull()) && !jsonObj.get("AuditIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuditIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuditIdentifier").toString()));
      }
      if ((jsonObj.get("ImmutableIdentifier") != null && !jsonObj.get("ImmutableIdentifier").isJsonNull()) && !jsonObj.get("ImmutableIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImmutableIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImmutableIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorAuditingQueryingAuditLogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorAuditingQueryingAuditLogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorAuditingQueryingAuditLogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorAuditingQueryingAuditLogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorAuditingQueryingAuditLogEntry>() {
           @Override
           public void write(JsonWriter out, KeyfactorAuditingQueryingAuditLogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorAuditingQueryingAuditLogEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorAuditingQueryingAuditLogEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorAuditingQueryingAuditLogEntry
  * @throws IOException if the JSON string is invalid with respect to KeyfactorAuditingQueryingAuditLogEntry
  */
  public static KeyfactorAuditingQueryingAuditLogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorAuditingQueryingAuditLogEntry.class);
  }

 /**
  * Convert an instance of KeyfactorAuditingQueryingAuditLogEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

