/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingKeyfactorSchedule;
import com.keyfactor.command.client.model.ModelsKeyfactorAPISecret;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsCertificateStoresCertificateStoreUpdateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsCertificateStoresCertificateStoreUpdateRequest {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "ContainerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private Integer containerId;

  public static final String SERIALIZED_NAME_CREATE_IF_MISSING = "CreateIfMissing";
  @SerializedName(SERIALIZED_NAME_CREATE_IF_MISSING)
  private Boolean createIfMissing;

  public static final String SERIALIZED_NAME_PROPERTIES = "Properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  public static final String SERIALIZED_NAME_AGENT_ID = "AgentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private UUID agentId;

  public static final String SERIALIZED_NAME_INVENTORY_SCHEDULE = "InventorySchedule";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SCHEDULE)
  private KeyfactorCommonSchedulingKeyfactorSchedule inventorySchedule;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private ModelsKeyfactorAPISecret password;

  public ModelsCertificateStoresCertificateStoreUpdateRequest() {
  }

  public ModelsCertificateStoresCertificateStoreUpdateRequest id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ModelsCertificateStoresCertificateStoreUpdateRequest containerId(Integer containerId) {
    
    this.containerId = containerId;
    return this;
  }

   /**
   * Get containerId
   * @return containerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getContainerId() {
    return containerId;
  }


  public void setContainerId(Integer containerId) {
    this.containerId = containerId;
  }


  public ModelsCertificateStoresCertificateStoreUpdateRequest createIfMissing(Boolean createIfMissing) {
    
    this.createIfMissing = createIfMissing;
    return this;
  }

   /**
   * Get createIfMissing
   * @return createIfMissing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCreateIfMissing() {
    return createIfMissing;
  }


  public void setCreateIfMissing(Boolean createIfMissing) {
    this.createIfMissing = createIfMissing;
  }


  public ModelsCertificateStoresCertificateStoreUpdateRequest properties(String properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProperties() {
    return properties;
  }


  public void setProperties(String properties) {
    this.properties = properties;
  }


  public ModelsCertificateStoresCertificateStoreUpdateRequest agentId(UUID agentId) {
    
    this.agentId = agentId;
    return this;
  }

   /**
   * Get agentId
   * @return agentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAgentId() {
    return agentId;
  }


  public void setAgentId(UUID agentId) {
    this.agentId = agentId;
  }


  public ModelsCertificateStoresCertificateStoreUpdateRequest inventorySchedule(KeyfactorCommonSchedulingKeyfactorSchedule inventorySchedule) {
    
    this.inventorySchedule = inventorySchedule;
    return this;
  }

   /**
   * Get inventorySchedule
   * @return inventorySchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingKeyfactorSchedule getInventorySchedule() {
    return inventorySchedule;
  }


  public void setInventorySchedule(KeyfactorCommonSchedulingKeyfactorSchedule inventorySchedule) {
    this.inventorySchedule = inventorySchedule;
  }


  public ModelsCertificateStoresCertificateStoreUpdateRequest password(ModelsKeyfactorAPISecret password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelsKeyfactorAPISecret getPassword() {
    return password;
  }


  public void setPassword(ModelsKeyfactorAPISecret password) {
    this.password = password;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCertificateStoresCertificateStoreUpdateRequest modelsCertificateStoresCertificateStoreUpdateRequest = (ModelsCertificateStoresCertificateStoreUpdateRequest) o;
    return Objects.equals(this.id, modelsCertificateStoresCertificateStoreUpdateRequest.id) &&
        Objects.equals(this.containerId, modelsCertificateStoresCertificateStoreUpdateRequest.containerId) &&
        Objects.equals(this.createIfMissing, modelsCertificateStoresCertificateStoreUpdateRequest.createIfMissing) &&
        Objects.equals(this.properties, modelsCertificateStoresCertificateStoreUpdateRequest.properties) &&
        Objects.equals(this.agentId, modelsCertificateStoresCertificateStoreUpdateRequest.agentId) &&
        Objects.equals(this.inventorySchedule, modelsCertificateStoresCertificateStoreUpdateRequest.inventorySchedule) &&
        Objects.equals(this.password, modelsCertificateStoresCertificateStoreUpdateRequest.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, containerId, createIfMissing, properties, agentId, inventorySchedule, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCertificateStoresCertificateStoreUpdateRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    createIfMissing: ").append(toIndentedString(createIfMissing)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    inventorySchedule: ").append(toIndentedString(inventorySchedule)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ContainerId");
    openapiFields.add("CreateIfMissing");
    openapiFields.add("Properties");
    openapiFields.add("AgentId");
    openapiFields.add("InventorySchedule");
    openapiFields.add("Password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsCertificateStoresCertificateStoreUpdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsCertificateStoresCertificateStoreUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCertificateStoresCertificateStoreUpdateRequest is not found in the empty JSON string", ModelsCertificateStoresCertificateStoreUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsCertificateStoresCertificateStoreUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCertificateStoresCertificateStoreUpdateRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Properties") != null && !jsonObj.get("Properties").isJsonNull()) && !jsonObj.get("Properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Properties").toString()));
      }
      if ((jsonObj.get("AgentId") != null && !jsonObj.get("AgentId").isJsonNull()) && !jsonObj.get("AgentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentId").toString()));
      }
      // validate the optional field `InventorySchedule`
      if (jsonObj.get("InventorySchedule") != null && !jsonObj.get("InventorySchedule").isJsonNull()) {
        KeyfactorCommonSchedulingKeyfactorSchedule.validateJsonObject(jsonObj.getAsJsonObject("InventorySchedule"));
      }
      // validate the optional field `Password`
      if (jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) {
        ModelsKeyfactorAPISecret.validateJsonObject(jsonObj.getAsJsonObject("Password"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCertificateStoresCertificateStoreUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCertificateStoresCertificateStoreUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCertificateStoresCertificateStoreUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCertificateStoresCertificateStoreUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCertificateStoresCertificateStoreUpdateRequest>() {
           @Override
           public void write(JsonWriter out, ModelsCertificateStoresCertificateStoreUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCertificateStoresCertificateStoreUpdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsCertificateStoresCertificateStoreUpdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsCertificateStoresCertificateStoreUpdateRequest
  * @throws IOException if the JSON string is invalid with respect to ModelsCertificateStoresCertificateStoreUpdateRequest
  */
  public static ModelsCertificateStoresCertificateStoreUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCertificateStoresCertificateStoreUpdateRequest.class);
  }

 /**
  * Convert an instance of ModelsCertificateStoresCertificateStoreUpdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

