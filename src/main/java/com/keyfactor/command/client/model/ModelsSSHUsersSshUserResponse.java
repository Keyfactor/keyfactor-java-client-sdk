/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.ModelsSSHKeysKeyResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsSSHUsersSshUserResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class ModelsSSHUsersSshUserResponse {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private ModelsSSHKeysKeyResponse key;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_LOGON_IDS = "LogonIds";
  @SerializedName(SERIALIZED_NAME_LOGON_IDS)
  private List<Integer> logonIds = null;

  public ModelsSSHUsersSshUserResponse() {
  }

  public ModelsSSHUsersSshUserResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ModelsSSHUsersSshUserResponse key(ModelsSSHKeysKeyResponse key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelsSSHKeysKeyResponse getKey() {
    return key;
  }


  public void setKey(ModelsSSHKeysKeyResponse key) {
    this.key = key;
  }


  public ModelsSSHUsersSshUserResponse username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public ModelsSSHUsersSshUserResponse logonIds(List<Integer> logonIds) {
    
    this.logonIds = logonIds;
    return this;
  }

  public ModelsSSHUsersSshUserResponse addLogonIdsItem(Integer logonIdsItem) {
    if (this.logonIds == null) {
      this.logonIds = new ArrayList<>();
    }
    this.logonIds.add(logonIdsItem);
    return this;
  }

   /**
   * Get logonIds
   * @return logonIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getLogonIds() {
    return logonIds;
  }


  public void setLogonIds(List<Integer> logonIds) {
    this.logonIds = logonIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsSSHUsersSshUserResponse modelsSSHUsersSshUserResponse = (ModelsSSHUsersSshUserResponse) o;
    return Objects.equals(this.id, modelsSSHUsersSshUserResponse.id) &&
        Objects.equals(this.key, modelsSSHUsersSshUserResponse.key) &&
        Objects.equals(this.username, modelsSSHUsersSshUserResponse.username) &&
        Objects.equals(this.logonIds, modelsSSHUsersSshUserResponse.logonIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, key, username, logonIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsSSHUsersSshUserResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    logonIds: ").append(toIndentedString(logonIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Key");
    openapiFields.add("Username");
    openapiFields.add("LogonIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsSSHUsersSshUserResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsSSHUsersSshUserResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsSSHUsersSshUserResponse is not found in the empty JSON string", ModelsSSHUsersSshUserResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsSSHUsersSshUserResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsSSHUsersSshUserResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `Key`
      if (jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) {
        ModelsSSHKeysKeyResponse.validateJsonObject(jsonObj.getAsJsonObject("Key"));
      }
      if ((jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) && !jsonObj.get("Username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Username").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LogonIds") != null && !jsonObj.get("LogonIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogonIds` to be an array in the JSON string but got `%s`", jsonObj.get("LogonIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsSSHUsersSshUserResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsSSHUsersSshUserResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsSSHUsersSshUserResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsSSHUsersSshUserResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsSSHUsersSshUserResponse>() {
           @Override
           public void write(JsonWriter out, ModelsSSHUsersSshUserResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsSSHUsersSshUserResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsSSHUsersSshUserResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsSSHUsersSshUserResponse
  * @throws IOException if the JSON string is invalid with respect to ModelsSSHUsersSshUserResponse
  */
  public static ModelsSSHUsersSshUserResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsSSHUsersSshUserResponse.class);
  }

 /**
  * Convert an instance of ModelsSSHUsersSshUserResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

