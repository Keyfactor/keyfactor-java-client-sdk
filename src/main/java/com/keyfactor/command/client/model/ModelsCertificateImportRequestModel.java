/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.ModelsEnrollmentManagementStoreType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * Class representing a request to import a certificate into Keyfactor Command
 */
@ApiModel(description = "Class representing a request to import a certificate into Keyfactor Command")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsCertificateImportRequestModel {
  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public static final String SERIALIZED_NAME_STORE_IDS = "StoreIds";
  @SerializedName(SERIALIZED_NAME_STORE_IDS)
  private List<UUID> storeIds = null;

  public static final String SERIALIZED_NAME_STORE_TYPES = "StoreTypes";
  @SerializedName(SERIALIZED_NAME_STORE_TYPES)
  private List<ModelsEnrollmentManagementStoreType> storeTypes = null;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private OffsetDateTime schedule;

  public static final String SERIALIZED_NAME_IMPORT_METADATA = "ImportMetadata";
  @SerializedName(SERIALIZED_NAME_IMPORT_METADATA)
  private Boolean importMetadata;

  public ModelsCertificateImportRequestModel() {
  }

  public ModelsCertificateImportRequestModel certificate(String certificate) {
    
    this.certificate = certificate;
    return this;
  }

   /**
   * Base64-encoded certificate contents
   * @return certificate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Base64-encoded certificate contents")

  public String getCertificate() {
    return certificate;
  }


  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public ModelsCertificateImportRequestModel password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Optional password associated if required for a PFX
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional password associated if required for a PFX")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public ModelsCertificateImportRequestModel metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public ModelsCertificateImportRequestModel putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Colleciton of metadata to be associated with the imported certificate
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Colleciton of metadata to be associated with the imported certificate")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public ModelsCertificateImportRequestModel storeIds(List<UUID> storeIds) {
    
    this.storeIds = storeIds;
    return this;
  }

  public ModelsCertificateImportRequestModel addStoreIdsItem(UUID storeIdsItem) {
    if (this.storeIds == null) {
      this.storeIds = new ArrayList<>();
    }
    this.storeIds.add(storeIdsItem);
    return this;
  }

   /**
   * List of the Keyfactor certificate store identifiers (GUID) with which the imported certificate should be associated
   * @return storeIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the Keyfactor certificate store identifiers (GUID) with which the imported certificate should be associated")

  public List<UUID> getStoreIds() {
    return storeIds;
  }


  public void setStoreIds(List<UUID> storeIds) {
    this.storeIds = storeIds;
  }


  public ModelsCertificateImportRequestModel storeTypes(List<ModelsEnrollmentManagementStoreType> storeTypes) {
    
    this.storeTypes = storeTypes;
    return this;
  }

  public ModelsCertificateImportRequestModel addStoreTypesItem(ModelsEnrollmentManagementStoreType storeTypesItem) {
    if (this.storeTypes == null) {
      this.storeTypes = new ArrayList<>();
    }
    this.storeTypes.add(storeTypesItem);
    return this;
  }

   /**
   * List of the certificate store types with with the imported certificate should be associated
   * @return storeTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the certificate store types with with the imported certificate should be associated")

  public List<ModelsEnrollmentManagementStoreType> getStoreTypes() {
    return storeTypes;
  }


  public void setStoreTypes(List<ModelsEnrollmentManagementStoreType> storeTypes) {
    this.storeTypes = storeTypes;
  }


  public ModelsCertificateImportRequestModel schedule(OffsetDateTime schedule) {
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Schedule on which the certificate should be imported
   * @return schedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Schedule on which the certificate should be imported")

  public OffsetDateTime getSchedule() {
    return schedule;
  }


  public void setSchedule(OffsetDateTime schedule) {
    this.schedule = schedule;
  }


  public ModelsCertificateImportRequestModel importMetadata(Boolean importMetadata) {
    
    this.importMetadata = importMetadata;
    return this;
  }

   /**
   * Whether or not we should validate and import the certificate&#39;s metadata.
   * @return importMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not we should validate and import the certificate's metadata.")

  public Boolean getImportMetadata() {
    return importMetadata;
  }


  public void setImportMetadata(Boolean importMetadata) {
    this.importMetadata = importMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCertificateImportRequestModel modelsCertificateImportRequestModel = (ModelsCertificateImportRequestModel) o;
    return Objects.equals(this.certificate, modelsCertificateImportRequestModel.certificate) &&
        Objects.equals(this.password, modelsCertificateImportRequestModel.password) &&
        Objects.equals(this.metadata, modelsCertificateImportRequestModel.metadata) &&
        Objects.equals(this.storeIds, modelsCertificateImportRequestModel.storeIds) &&
        Objects.equals(this.storeTypes, modelsCertificateImportRequestModel.storeTypes) &&
        Objects.equals(this.schedule, modelsCertificateImportRequestModel.schedule) &&
        Objects.equals(this.importMetadata, modelsCertificateImportRequestModel.importMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, password, metadata, storeIds, storeTypes, schedule, importMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCertificateImportRequestModel {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    storeIds: ").append(toIndentedString(storeIds)).append("\n");
    sb.append("    storeTypes: ").append(toIndentedString(storeTypes)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    importMetadata: ").append(toIndentedString(importMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Certificate");
    openapiFields.add("Password");
    openapiFields.add("Metadata");
    openapiFields.add("StoreIds");
    openapiFields.add("StoreTypes");
    openapiFields.add("Schedule");
    openapiFields.add("ImportMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Certificate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsCertificateImportRequestModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsCertificateImportRequestModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCertificateImportRequestModel is not found in the empty JSON string", ModelsCertificateImportRequestModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsCertificateImportRequestModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCertificateImportRequestModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsCertificateImportRequestModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("Certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Certificate").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StoreIds") != null && !jsonObj.get("StoreIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoreIds` to be an array in the JSON string but got `%s`", jsonObj.get("StoreIds").toString()));
      }
      if (jsonObj.get("StoreTypes") != null && !jsonObj.get("StoreTypes").isJsonNull()) {
        JsonArray jsonArraystoreTypes = jsonObj.getAsJsonArray("StoreTypes");
        if (jsonArraystoreTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("StoreTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `StoreTypes` to be an array in the JSON string but got `%s`", jsonObj.get("StoreTypes").toString()));
          }

          // validate the optional field `StoreTypes` (array)
          for (int i = 0; i < jsonArraystoreTypes.size(); i++) {
            ModelsEnrollmentManagementStoreType.validateJsonObject(jsonArraystoreTypes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCertificateImportRequestModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCertificateImportRequestModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCertificateImportRequestModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCertificateImportRequestModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCertificateImportRequestModel>() {
           @Override
           public void write(JsonWriter out, ModelsCertificateImportRequestModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCertificateImportRequestModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsCertificateImportRequestModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsCertificateImportRequestModel
  * @throws IOException if the JSON string is invalid with respect to ModelsCertificateImportRequestModel
  */
  public static ModelsCertificateImportRequestModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCertificateImportRequestModel.class);
  }

 /**
  * Convert an instance of ModelsCertificateImportRequestModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

