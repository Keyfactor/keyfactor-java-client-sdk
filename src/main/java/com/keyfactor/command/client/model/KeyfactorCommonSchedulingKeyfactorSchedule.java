/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingModelsIntervalModel;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingModelsMonthlyModel;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingModelsTimeModel;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingModelsWeeklyModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorCommonSchedulingKeyfactorSchedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeyfactorCommonSchedulingKeyfactorSchedule {
  public static final String SERIALIZED_NAME_IMMEDIATE = "Immediate";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE)
  private Boolean immediate;

  public static final String SERIALIZED_NAME_INTERVAL = "Interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private KeyfactorCommonSchedulingModelsIntervalModel interval;

  public static final String SERIALIZED_NAME_DAILY = "Daily";
  @SerializedName(SERIALIZED_NAME_DAILY)
  private KeyfactorCommonSchedulingModelsTimeModel daily;

  public static final String SERIALIZED_NAME_WEEKLY = "Weekly";
  @SerializedName(SERIALIZED_NAME_WEEKLY)
  private KeyfactorCommonSchedulingModelsWeeklyModel weekly;

  public static final String SERIALIZED_NAME_MONTHLY = "Monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private KeyfactorCommonSchedulingModelsMonthlyModel monthly;

  public static final String SERIALIZED_NAME_EXACTLY_ONCE = "ExactlyOnce";
  @SerializedName(SERIALIZED_NAME_EXACTLY_ONCE)
  private KeyfactorCommonSchedulingModelsTimeModel exactlyOnce;

  public KeyfactorCommonSchedulingKeyfactorSchedule() {
  }

  public KeyfactorCommonSchedulingKeyfactorSchedule immediate(Boolean immediate) {
    
    this.immediate = immediate;
    return this;
  }

   /**
   * Get immediate
   * @return immediate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getImmediate() {
    return immediate;
  }


  public void setImmediate(Boolean immediate) {
    this.immediate = immediate;
  }


  public KeyfactorCommonSchedulingKeyfactorSchedule interval(KeyfactorCommonSchedulingModelsIntervalModel interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingModelsIntervalModel getInterval() {
    return interval;
  }


  public void setInterval(KeyfactorCommonSchedulingModelsIntervalModel interval) {
    this.interval = interval;
  }


  public KeyfactorCommonSchedulingKeyfactorSchedule daily(KeyfactorCommonSchedulingModelsTimeModel daily) {
    
    this.daily = daily;
    return this;
  }

   /**
   * Get daily
   * @return daily
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingModelsTimeModel getDaily() {
    return daily;
  }


  public void setDaily(KeyfactorCommonSchedulingModelsTimeModel daily) {
    this.daily = daily;
  }


  public KeyfactorCommonSchedulingKeyfactorSchedule weekly(KeyfactorCommonSchedulingModelsWeeklyModel weekly) {
    
    this.weekly = weekly;
    return this;
  }

   /**
   * Get weekly
   * @return weekly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingModelsWeeklyModel getWeekly() {
    return weekly;
  }


  public void setWeekly(KeyfactorCommonSchedulingModelsWeeklyModel weekly) {
    this.weekly = weekly;
  }


  public KeyfactorCommonSchedulingKeyfactorSchedule monthly(KeyfactorCommonSchedulingModelsMonthlyModel monthly) {
    
    this.monthly = monthly;
    return this;
  }

   /**
   * Get monthly
   * @return monthly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingModelsMonthlyModel getMonthly() {
    return monthly;
  }


  public void setMonthly(KeyfactorCommonSchedulingModelsMonthlyModel monthly) {
    this.monthly = monthly;
  }


  public KeyfactorCommonSchedulingKeyfactorSchedule exactlyOnce(KeyfactorCommonSchedulingModelsTimeModel exactlyOnce) {
    
    this.exactlyOnce = exactlyOnce;
    return this;
  }

   /**
   * Get exactlyOnce
   * @return exactlyOnce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingModelsTimeModel getExactlyOnce() {
    return exactlyOnce;
  }


  public void setExactlyOnce(KeyfactorCommonSchedulingModelsTimeModel exactlyOnce) {
    this.exactlyOnce = exactlyOnce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorCommonSchedulingKeyfactorSchedule keyfactorCommonSchedulingKeyfactorSchedule = (KeyfactorCommonSchedulingKeyfactorSchedule) o;
    return Objects.equals(this.immediate, keyfactorCommonSchedulingKeyfactorSchedule.immediate) &&
        Objects.equals(this.interval, keyfactorCommonSchedulingKeyfactorSchedule.interval) &&
        Objects.equals(this.daily, keyfactorCommonSchedulingKeyfactorSchedule.daily) &&
        Objects.equals(this.weekly, keyfactorCommonSchedulingKeyfactorSchedule.weekly) &&
        Objects.equals(this.monthly, keyfactorCommonSchedulingKeyfactorSchedule.monthly) &&
        Objects.equals(this.exactlyOnce, keyfactorCommonSchedulingKeyfactorSchedule.exactlyOnce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(immediate, interval, daily, weekly, monthly, exactlyOnce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorCommonSchedulingKeyfactorSchedule {\n");
    sb.append("    immediate: ").append(toIndentedString(immediate)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    daily: ").append(toIndentedString(daily)).append("\n");
    sb.append("    weekly: ").append(toIndentedString(weekly)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    exactlyOnce: ").append(toIndentedString(exactlyOnce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Immediate");
    openapiFields.add("Interval");
    openapiFields.add("Daily");
    openapiFields.add("Weekly");
    openapiFields.add("Monthly");
    openapiFields.add("ExactlyOnce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorCommonSchedulingKeyfactorSchedule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorCommonSchedulingKeyfactorSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorCommonSchedulingKeyfactorSchedule is not found in the empty JSON string", KeyfactorCommonSchedulingKeyfactorSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorCommonSchedulingKeyfactorSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorCommonSchedulingKeyfactorSchedule` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `Interval`
      if (jsonObj.get("Interval") != null && !jsonObj.get("Interval").isJsonNull()) {
        KeyfactorCommonSchedulingModelsIntervalModel.validateJsonObject(jsonObj.getAsJsonObject("Interval"));
      }
      // validate the optional field `Daily`
      if (jsonObj.get("Daily") != null && !jsonObj.get("Daily").isJsonNull()) {
        KeyfactorCommonSchedulingModelsTimeModel.validateJsonObject(jsonObj.getAsJsonObject("Daily"));
      }
      // validate the optional field `Weekly`
      if (jsonObj.get("Weekly") != null && !jsonObj.get("Weekly").isJsonNull()) {
        KeyfactorCommonSchedulingModelsWeeklyModel.validateJsonObject(jsonObj.getAsJsonObject("Weekly"));
      }
      // validate the optional field `Monthly`
      if (jsonObj.get("Monthly") != null && !jsonObj.get("Monthly").isJsonNull()) {
        KeyfactorCommonSchedulingModelsMonthlyModel.validateJsonObject(jsonObj.getAsJsonObject("Monthly"));
      }
      // validate the optional field `ExactlyOnce`
      if (jsonObj.get("ExactlyOnce") != null && !jsonObj.get("ExactlyOnce").isJsonNull()) {
        KeyfactorCommonSchedulingModelsTimeModel.validateJsonObject(jsonObj.getAsJsonObject("ExactlyOnce"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorCommonSchedulingKeyfactorSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorCommonSchedulingKeyfactorSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorCommonSchedulingKeyfactorSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorCommonSchedulingKeyfactorSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorCommonSchedulingKeyfactorSchedule>() {
           @Override
           public void write(JsonWriter out, KeyfactorCommonSchedulingKeyfactorSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorCommonSchedulingKeyfactorSchedule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorCommonSchedulingKeyfactorSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorCommonSchedulingKeyfactorSchedule
  * @throws IOException if the JSON string is invalid with respect to KeyfactorCommonSchedulingKeyfactorSchedule
  */
  public static KeyfactorCommonSchedulingKeyfactorSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorCommonSchedulingKeyfactorSchedule.class);
  }

 /**
  * Convert an instance of KeyfactorCommonSchedulingKeyfactorSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

