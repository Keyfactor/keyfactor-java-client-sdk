/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.ModelsWorkflowProcessedCertificateRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsWorkflowApproveDenyResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class ModelsWorkflowApproveDenyResult {
  public static final String SERIALIZED_NAME_FAILURES = "Failures";
  @SerializedName(SERIALIZED_NAME_FAILURES)
  private List<ModelsWorkflowProcessedCertificateRequest> failures = null;

  public static final String SERIALIZED_NAME_DENIALS = "Denials";
  @SerializedName(SERIALIZED_NAME_DENIALS)
  private List<ModelsWorkflowProcessedCertificateRequest> denials = null;

  public static final String SERIALIZED_NAME_SUCCESSES = "Successes";
  @SerializedName(SERIALIZED_NAME_SUCCESSES)
  private List<ModelsWorkflowProcessedCertificateRequest> successes = null;

  public ModelsWorkflowApproveDenyResult() {
  }

  public ModelsWorkflowApproveDenyResult failures(List<ModelsWorkflowProcessedCertificateRequest> failures) {
    
    this.failures = failures;
    return this;
  }

  public ModelsWorkflowApproveDenyResult addFailuresItem(ModelsWorkflowProcessedCertificateRequest failuresItem) {
    if (this.failures == null) {
      this.failures = new ArrayList<>();
    }
    this.failures.add(failuresItem);
    return this;
  }

   /**
   * Get failures
   * @return failures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsWorkflowProcessedCertificateRequest> getFailures() {
    return failures;
  }


  public void setFailures(List<ModelsWorkflowProcessedCertificateRequest> failures) {
    this.failures = failures;
  }


  public ModelsWorkflowApproveDenyResult denials(List<ModelsWorkflowProcessedCertificateRequest> denials) {
    
    this.denials = denials;
    return this;
  }

  public ModelsWorkflowApproveDenyResult addDenialsItem(ModelsWorkflowProcessedCertificateRequest denialsItem) {
    if (this.denials == null) {
      this.denials = new ArrayList<>();
    }
    this.denials.add(denialsItem);
    return this;
  }

   /**
   * Get denials
   * @return denials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsWorkflowProcessedCertificateRequest> getDenials() {
    return denials;
  }


  public void setDenials(List<ModelsWorkflowProcessedCertificateRequest> denials) {
    this.denials = denials;
  }


  public ModelsWorkflowApproveDenyResult successes(List<ModelsWorkflowProcessedCertificateRequest> successes) {
    
    this.successes = successes;
    return this;
  }

  public ModelsWorkflowApproveDenyResult addSuccessesItem(ModelsWorkflowProcessedCertificateRequest successesItem) {
    if (this.successes == null) {
      this.successes = new ArrayList<>();
    }
    this.successes.add(successesItem);
    return this;
  }

   /**
   * Get successes
   * @return successes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsWorkflowProcessedCertificateRequest> getSuccesses() {
    return successes;
  }


  public void setSuccesses(List<ModelsWorkflowProcessedCertificateRequest> successes) {
    this.successes = successes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsWorkflowApproveDenyResult modelsWorkflowApproveDenyResult = (ModelsWorkflowApproveDenyResult) o;
    return Objects.equals(this.failures, modelsWorkflowApproveDenyResult.failures) &&
        Objects.equals(this.denials, modelsWorkflowApproveDenyResult.denials) &&
        Objects.equals(this.successes, modelsWorkflowApproveDenyResult.successes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failures, denials, successes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsWorkflowApproveDenyResult {\n");
    sb.append("    failures: ").append(toIndentedString(failures)).append("\n");
    sb.append("    denials: ").append(toIndentedString(denials)).append("\n");
    sb.append("    successes: ").append(toIndentedString(successes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Failures");
    openapiFields.add("Denials");
    openapiFields.add("Successes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsWorkflowApproveDenyResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsWorkflowApproveDenyResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsWorkflowApproveDenyResult is not found in the empty JSON string", ModelsWorkflowApproveDenyResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsWorkflowApproveDenyResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsWorkflowApproveDenyResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Failures") != null && !jsonObj.get("Failures").isJsonNull()) {
        JsonArray jsonArrayfailures = jsonObj.getAsJsonArray("Failures");
        if (jsonArrayfailures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Failures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Failures` to be an array in the JSON string but got `%s`", jsonObj.get("Failures").toString()));
          }

          // validate the optional field `Failures` (array)
          for (int i = 0; i < jsonArrayfailures.size(); i++) {
            ModelsWorkflowProcessedCertificateRequest.validateJsonObject(jsonArrayfailures.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Denials") != null && !jsonObj.get("Denials").isJsonNull()) {
        JsonArray jsonArraydenials = jsonObj.getAsJsonArray("Denials");
        if (jsonArraydenials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Denials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Denials` to be an array in the JSON string but got `%s`", jsonObj.get("Denials").toString()));
          }

          // validate the optional field `Denials` (array)
          for (int i = 0; i < jsonArraydenials.size(); i++) {
            ModelsWorkflowProcessedCertificateRequest.validateJsonObject(jsonArraydenials.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Successes") != null && !jsonObj.get("Successes").isJsonNull()) {
        JsonArray jsonArraysuccesses = jsonObj.getAsJsonArray("Successes");
        if (jsonArraysuccesses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Successes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Successes` to be an array in the JSON string but got `%s`", jsonObj.get("Successes").toString()));
          }

          // validate the optional field `Successes` (array)
          for (int i = 0; i < jsonArraysuccesses.size(); i++) {
            ModelsWorkflowProcessedCertificateRequest.validateJsonObject(jsonArraysuccesses.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsWorkflowApproveDenyResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsWorkflowApproveDenyResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsWorkflowApproveDenyResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsWorkflowApproveDenyResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsWorkflowApproveDenyResult>() {
           @Override
           public void write(JsonWriter out, ModelsWorkflowApproveDenyResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsWorkflowApproveDenyResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsWorkflowApproveDenyResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsWorkflowApproveDenyResult
  * @throws IOException if the JSON string is invalid with respect to ModelsWorkflowApproveDenyResult
  */
  public static ModelsWorkflowApproveDenyResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsWorkflowApproveDenyResult.class);
  }

 /**
  * Convert an instance of ModelsWorkflowApproveDenyResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

