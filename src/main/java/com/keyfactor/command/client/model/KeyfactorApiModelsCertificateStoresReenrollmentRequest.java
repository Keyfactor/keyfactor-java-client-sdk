/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsCertificateStoresReenrollmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeyfactorApiModelsCertificateStoresReenrollmentRequest {
  public static final String SERIALIZED_NAME_KEYSTORE_ID = "KeystoreId";
  @SerializedName(SERIALIZED_NAME_KEYSTORE_ID)
  private UUID keystoreId;

  public static final String SERIALIZED_NAME_SUBJECT_NAME = "SubjectName";
  @SerializedName(SERIALIZED_NAME_SUBJECT_NAME)
  private String subjectName;

  public static final String SERIALIZED_NAME_AGENT_GUID = "AgentGuid";
  @SerializedName(SERIALIZED_NAME_AGENT_GUID)
  private UUID agentGuid;

  public static final String SERIALIZED_NAME_ALIAS = "Alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_JOB_PROPERTIES = "JobProperties";
  @SerializedName(SERIALIZED_NAME_JOB_PROPERTIES)
  private Map<String, Object> jobProperties = null;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY = "CertificateAuthority";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY)
  private String certificateAuthority;

  public static final String SERIALIZED_NAME_CERTIFICATE_TEMPLATE = "CertificateTemplate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TEMPLATE)
  private String certificateTemplate;

  public KeyfactorApiModelsCertificateStoresReenrollmentRequest() {
  }

  public KeyfactorApiModelsCertificateStoresReenrollmentRequest keystoreId(UUID keystoreId) {
    
    this.keystoreId = keystoreId;
    return this;
  }

   /**
   * Get keystoreId
   * @return keystoreId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getKeystoreId() {
    return keystoreId;
  }


  public void setKeystoreId(UUID keystoreId) {
    this.keystoreId = keystoreId;
  }


  public KeyfactorApiModelsCertificateStoresReenrollmentRequest subjectName(String subjectName) {
    
    this.subjectName = subjectName;
    return this;
  }

   /**
   * Get subjectName
   * @return subjectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubjectName() {
    return subjectName;
  }


  public void setSubjectName(String subjectName) {
    this.subjectName = subjectName;
  }


  public KeyfactorApiModelsCertificateStoresReenrollmentRequest agentGuid(UUID agentGuid) {
    
    this.agentGuid = agentGuid;
    return this;
  }

   /**
   * Get agentGuid
   * @return agentGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAgentGuid() {
    return agentGuid;
  }


  public void setAgentGuid(UUID agentGuid) {
    this.agentGuid = agentGuid;
  }


  public KeyfactorApiModelsCertificateStoresReenrollmentRequest alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * Get alias
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public KeyfactorApiModelsCertificateStoresReenrollmentRequest jobProperties(Map<String, Object> jobProperties) {
    
    this.jobProperties = jobProperties;
    return this;
  }

  public KeyfactorApiModelsCertificateStoresReenrollmentRequest putJobPropertiesItem(String key, Object jobPropertiesItem) {
    if (this.jobProperties == null) {
      this.jobProperties = new HashMap<>();
    }
    this.jobProperties.put(key, jobPropertiesItem);
    return this;
  }

   /**
   * Get jobProperties
   * @return jobProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getJobProperties() {
    return jobProperties;
  }


  public void setJobProperties(Map<String, Object> jobProperties) {
    this.jobProperties = jobProperties;
  }


  public KeyfactorApiModelsCertificateStoresReenrollmentRequest certificateAuthority(String certificateAuthority) {
    
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCertificateAuthority() {
    return certificateAuthority;
  }


  public void setCertificateAuthority(String certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }


  public KeyfactorApiModelsCertificateStoresReenrollmentRequest certificateTemplate(String certificateTemplate) {
    
    this.certificateTemplate = certificateTemplate;
    return this;
  }

   /**
   * Get certificateTemplate
   * @return certificateTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCertificateTemplate() {
    return certificateTemplate;
  }


  public void setCertificateTemplate(String certificateTemplate) {
    this.certificateTemplate = certificateTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsCertificateStoresReenrollmentRequest keyfactorApiModelsCertificateStoresReenrollmentRequest = (KeyfactorApiModelsCertificateStoresReenrollmentRequest) o;
    return Objects.equals(this.keystoreId, keyfactorApiModelsCertificateStoresReenrollmentRequest.keystoreId) &&
        Objects.equals(this.subjectName, keyfactorApiModelsCertificateStoresReenrollmentRequest.subjectName) &&
        Objects.equals(this.agentGuid, keyfactorApiModelsCertificateStoresReenrollmentRequest.agentGuid) &&
        Objects.equals(this.alias, keyfactorApiModelsCertificateStoresReenrollmentRequest.alias) &&
        Objects.equals(this.jobProperties, keyfactorApiModelsCertificateStoresReenrollmentRequest.jobProperties) &&
        Objects.equals(this.certificateAuthority, keyfactorApiModelsCertificateStoresReenrollmentRequest.certificateAuthority) &&
        Objects.equals(this.certificateTemplate, keyfactorApiModelsCertificateStoresReenrollmentRequest.certificateTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keystoreId, subjectName, agentGuid, alias, jobProperties, certificateAuthority, certificateTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsCertificateStoresReenrollmentRequest {\n");
    sb.append("    keystoreId: ").append(toIndentedString(keystoreId)).append("\n");
    sb.append("    subjectName: ").append(toIndentedString(subjectName)).append("\n");
    sb.append("    agentGuid: ").append(toIndentedString(agentGuid)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    jobProperties: ").append(toIndentedString(jobProperties)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    certificateTemplate: ").append(toIndentedString(certificateTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KeystoreId");
    openapiFields.add("SubjectName");
    openapiFields.add("AgentGuid");
    openapiFields.add("Alias");
    openapiFields.add("JobProperties");
    openapiFields.add("CertificateAuthority");
    openapiFields.add("CertificateTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsCertificateStoresReenrollmentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsCertificateStoresReenrollmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsCertificateStoresReenrollmentRequest is not found in the empty JSON string", KeyfactorApiModelsCertificateStoresReenrollmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsCertificateStoresReenrollmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsCertificateStoresReenrollmentRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("KeystoreId") != null && !jsonObj.get("KeystoreId").isJsonNull()) && !jsonObj.get("KeystoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeystoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeystoreId").toString()));
      }
      if ((jsonObj.get("SubjectName") != null && !jsonObj.get("SubjectName").isJsonNull()) && !jsonObj.get("SubjectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubjectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubjectName").toString()));
      }
      if ((jsonObj.get("AgentGuid") != null && !jsonObj.get("AgentGuid").isJsonNull()) && !jsonObj.get("AgentGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentGuid").toString()));
      }
      if ((jsonObj.get("Alias") != null && !jsonObj.get("Alias").isJsonNull()) && !jsonObj.get("Alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Alias").toString()));
      }
      if ((jsonObj.get("CertificateAuthority") != null && !jsonObj.get("CertificateAuthority").isJsonNull()) && !jsonObj.get("CertificateAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateAuthority").toString()));
      }
      if ((jsonObj.get("CertificateTemplate") != null && !jsonObj.get("CertificateTemplate").isJsonNull()) && !jsonObj.get("CertificateTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateTemplate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsCertificateStoresReenrollmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsCertificateStoresReenrollmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsCertificateStoresReenrollmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsCertificateStoresReenrollmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsCertificateStoresReenrollmentRequest>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsCertificateStoresReenrollmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsCertificateStoresReenrollmentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsCertificateStoresReenrollmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsCertificateStoresReenrollmentRequest
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsCertificateStoresReenrollmentRequest
  */
  public static KeyfactorApiModelsCertificateStoresReenrollmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsCertificateStoresReenrollmentRequest.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsCertificateStoresReenrollmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

