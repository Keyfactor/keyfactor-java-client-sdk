/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeyfactorApiModelsOrchestratorsAgentBlueprintResponse {
  public static final String SERIALIZED_NAME_AGENT_BLUEPRINT_ID = "AgentBlueprintId";
  @SerializedName(SERIALIZED_NAME_AGENT_BLUEPRINT_ID)
  private UUID agentBlueprintId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIRED_CAPABILITIES = "RequiredCapabilities";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CAPABILITIES)
  private List<String> requiredCapabilities = null;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "LastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse() {
  }

  public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse agentBlueprintId(UUID agentBlueprintId) {
    
    this.agentBlueprintId = agentBlueprintId;
    return this;
  }

   /**
   * Get agentBlueprintId
   * @return agentBlueprintId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAgentBlueprintId() {
    return agentBlueprintId;
  }


  public void setAgentBlueprintId(UUID agentBlueprintId) {
    this.agentBlueprintId = agentBlueprintId;
  }


  public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse requiredCapabilities(List<String> requiredCapabilities) {
    
    this.requiredCapabilities = requiredCapabilities;
    return this;
  }

  public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse addRequiredCapabilitiesItem(String requiredCapabilitiesItem) {
    if (this.requiredCapabilities == null) {
      this.requiredCapabilities = new ArrayList<>();
    }
    this.requiredCapabilities.add(requiredCapabilitiesItem);
    return this;
  }

   /**
   * Get requiredCapabilities
   * @return requiredCapabilities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRequiredCapabilities() {
    return requiredCapabilities;
  }


  public void setRequiredCapabilities(List<String> requiredCapabilities) {
    this.requiredCapabilities = requiredCapabilities;
  }


  public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse lastModified(OffsetDateTime lastModified) {
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastModified() {
    return lastModified;
  }


  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsOrchestratorsAgentBlueprintResponse keyfactorApiModelsOrchestratorsAgentBlueprintResponse = (KeyfactorApiModelsOrchestratorsAgentBlueprintResponse) o;
    return Objects.equals(this.agentBlueprintId, keyfactorApiModelsOrchestratorsAgentBlueprintResponse.agentBlueprintId) &&
        Objects.equals(this.name, keyfactorApiModelsOrchestratorsAgentBlueprintResponse.name) &&
        Objects.equals(this.requiredCapabilities, keyfactorApiModelsOrchestratorsAgentBlueprintResponse.requiredCapabilities) &&
        Objects.equals(this.lastModified, keyfactorApiModelsOrchestratorsAgentBlueprintResponse.lastModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentBlueprintId, name, requiredCapabilities, lastModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsOrchestratorsAgentBlueprintResponse {\n");
    sb.append("    agentBlueprintId: ").append(toIndentedString(agentBlueprintId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requiredCapabilities: ").append(toIndentedString(requiredCapabilities)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AgentBlueprintId");
    openapiFields.add("Name");
    openapiFields.add("RequiredCapabilities");
    openapiFields.add("LastModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsOrchestratorsAgentBlueprintResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsOrchestratorsAgentBlueprintResponse is not found in the empty JSON string", KeyfactorApiModelsOrchestratorsAgentBlueprintResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsOrchestratorsAgentBlueprintResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsOrchestratorsAgentBlueprintResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("AgentBlueprintId") != null && !jsonObj.get("AgentBlueprintId").isJsonNull()) && !jsonObj.get("AgentBlueprintId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentBlueprintId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentBlueprintId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RequiredCapabilities") != null && !jsonObj.get("RequiredCapabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequiredCapabilities` to be an array in the JSON string but got `%s`", jsonObj.get("RequiredCapabilities").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsOrchestratorsAgentBlueprintResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsOrchestratorsAgentBlueprintResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsOrchestratorsAgentBlueprintResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsOrchestratorsAgentBlueprintResponse>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsOrchestratorsAgentBlueprintResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsOrchestratorsAgentBlueprintResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsOrchestratorsAgentBlueprintResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
  */
  public static KeyfactorApiModelsOrchestratorsAgentBlueprintResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsOrchestratorsAgentBlueprintResponse.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsOrchestratorsAgentBlueprintResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

