/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsPkcs12CertificateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsPkcs12CertificateResponse {
  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_ISSUER_D_N = "IssuerDN";
  @SerializedName(SERIALIZED_NAME_ISSUER_D_N)
  private String issuerDN;

  public static final String SERIALIZED_NAME_THUMBPRINT = "Thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_KEYFACTOR_ID = "KeyfactorId";
  @SerializedName(SERIALIZED_NAME_KEYFACTOR_ID)
  private Integer keyfactorId;

  public static final String SERIALIZED_NAME_PKCS12_BLOB = "Pkcs12Blob";
  @SerializedName(SERIALIZED_NAME_PKCS12_BLOB)
  private String pkcs12Blob;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_KEYFACTOR_REQUEST_ID = "KeyfactorRequestId";
  @SerializedName(SERIALIZED_NAME_KEYFACTOR_REQUEST_ID)
  private Integer keyfactorRequestId;

  public static final String SERIALIZED_NAME_REQUEST_DISPOSITION = "RequestDisposition";
  @SerializedName(SERIALIZED_NAME_REQUEST_DISPOSITION)
  private String requestDisposition;

  public static final String SERIALIZED_NAME_DISPOSITION_MESSAGE = "DispositionMessage";
  @SerializedName(SERIALIZED_NAME_DISPOSITION_MESSAGE)
  private String dispositionMessage;

  public static final String SERIALIZED_NAME_ENROLLMENT_CONTEXT = "EnrollmentContext";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_CONTEXT)
  private Map<String, String> enrollmentContext = null;

  public ModelsPkcs12CertificateResponse() {
  }

  public ModelsPkcs12CertificateResponse serialNumber(String serialNumber) {
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Get serialNumber
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSerialNumber() {
    return serialNumber;
  }


  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public ModelsPkcs12CertificateResponse issuerDN(String issuerDN) {
    
    this.issuerDN = issuerDN;
    return this;
  }

   /**
   * Get issuerDN
   * @return issuerDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIssuerDN() {
    return issuerDN;
  }


  public void setIssuerDN(String issuerDN) {
    this.issuerDN = issuerDN;
  }


  public ModelsPkcs12CertificateResponse thumbprint(String thumbprint) {
    
    this.thumbprint = thumbprint;
    return this;
  }

   /**
   * Get thumbprint
   * @return thumbprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThumbprint() {
    return thumbprint;
  }


  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public ModelsPkcs12CertificateResponse keyfactorId(Integer keyfactorId) {
    
    this.keyfactorId = keyfactorId;
    return this;
  }

   /**
   * Get keyfactorId
   * @return keyfactorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getKeyfactorId() {
    return keyfactorId;
  }


  public void setKeyfactorId(Integer keyfactorId) {
    this.keyfactorId = keyfactorId;
  }


  public ModelsPkcs12CertificateResponse pkcs12Blob(String pkcs12Blob) {
    
    this.pkcs12Blob = pkcs12Blob;
    return this;
  }

   /**
   * Get pkcs12Blob
   * @return pkcs12Blob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPkcs12Blob() {
    return pkcs12Blob;
  }


  public void setPkcs12Blob(String pkcs12Blob) {
    this.pkcs12Blob = pkcs12Blob;
  }


  public ModelsPkcs12CertificateResponse password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public ModelsPkcs12CertificateResponse keyfactorRequestId(Integer keyfactorRequestId) {
    
    this.keyfactorRequestId = keyfactorRequestId;
    return this;
  }

   /**
   * The integer id of the certificate request in the Keyfactor database, if one exists.
   * @return keyfactorRequestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The integer id of the certificate request in the Keyfactor database, if one exists.")

  public Integer getKeyfactorRequestId() {
    return keyfactorRequestId;
  }


  public void setKeyfactorRequestId(Integer keyfactorRequestId) {
    this.keyfactorRequestId = keyfactorRequestId;
  }


  public ModelsPkcs12CertificateResponse requestDisposition(String requestDisposition) {
    
    this.requestDisposition = requestDisposition;
    return this;
  }

   /**
   * Get requestDisposition
   * @return requestDisposition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequestDisposition() {
    return requestDisposition;
  }


  public void setRequestDisposition(String requestDisposition) {
    this.requestDisposition = requestDisposition;
  }


  public ModelsPkcs12CertificateResponse dispositionMessage(String dispositionMessage) {
    
    this.dispositionMessage = dispositionMessage;
    return this;
  }

   /**
   * Get dispositionMessage
   * @return dispositionMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDispositionMessage() {
    return dispositionMessage;
  }


  public void setDispositionMessage(String dispositionMessage) {
    this.dispositionMessage = dispositionMessage;
  }


  public ModelsPkcs12CertificateResponse enrollmentContext(Map<String, String> enrollmentContext) {
    
    this.enrollmentContext = enrollmentContext;
    return this;
  }

  public ModelsPkcs12CertificateResponse putEnrollmentContextItem(String key, String enrollmentContextItem) {
    if (this.enrollmentContext == null) {
      this.enrollmentContext = new HashMap<>();
    }
    this.enrollmentContext.put(key, enrollmentContextItem);
    return this;
  }

   /**
   * Get enrollmentContext
   * @return enrollmentContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getEnrollmentContext() {
    return enrollmentContext;
  }


  public void setEnrollmentContext(Map<String, String> enrollmentContext) {
    this.enrollmentContext = enrollmentContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsPkcs12CertificateResponse modelsPkcs12CertificateResponse = (ModelsPkcs12CertificateResponse) o;
    return Objects.equals(this.serialNumber, modelsPkcs12CertificateResponse.serialNumber) &&
        Objects.equals(this.issuerDN, modelsPkcs12CertificateResponse.issuerDN) &&
        Objects.equals(this.thumbprint, modelsPkcs12CertificateResponse.thumbprint) &&
        Objects.equals(this.keyfactorId, modelsPkcs12CertificateResponse.keyfactorId) &&
        Objects.equals(this.pkcs12Blob, modelsPkcs12CertificateResponse.pkcs12Blob) &&
        Objects.equals(this.password, modelsPkcs12CertificateResponse.password) &&
        Objects.equals(this.keyfactorRequestId, modelsPkcs12CertificateResponse.keyfactorRequestId) &&
        Objects.equals(this.requestDisposition, modelsPkcs12CertificateResponse.requestDisposition) &&
        Objects.equals(this.dispositionMessage, modelsPkcs12CertificateResponse.dispositionMessage) &&
        Objects.equals(this.enrollmentContext, modelsPkcs12CertificateResponse.enrollmentContext);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(serialNumber, issuerDN, thumbprint, keyfactorId, pkcs12Blob, password, keyfactorRequestId, requestDisposition, dispositionMessage, enrollmentContext);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsPkcs12CertificateResponse {\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    issuerDN: ").append(toIndentedString(issuerDN)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    keyfactorId: ").append(toIndentedString(keyfactorId)).append("\n");
    sb.append("    pkcs12Blob: ").append(toIndentedString(pkcs12Blob)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    keyfactorRequestId: ").append(toIndentedString(keyfactorRequestId)).append("\n");
    sb.append("    requestDisposition: ").append(toIndentedString(requestDisposition)).append("\n");
    sb.append("    dispositionMessage: ").append(toIndentedString(dispositionMessage)).append("\n");
    sb.append("    enrollmentContext: ").append(toIndentedString(enrollmentContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SerialNumber");
    openapiFields.add("IssuerDN");
    openapiFields.add("Thumbprint");
    openapiFields.add("KeyfactorId");
    openapiFields.add("Pkcs12Blob");
    openapiFields.add("Password");
    openapiFields.add("KeyfactorRequestId");
    openapiFields.add("RequestDisposition");
    openapiFields.add("DispositionMessage");
    openapiFields.add("EnrollmentContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsPkcs12CertificateResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsPkcs12CertificateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsPkcs12CertificateResponse is not found in the empty JSON string", ModelsPkcs12CertificateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsPkcs12CertificateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsPkcs12CertificateResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) && !jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
      if ((jsonObj.get("IssuerDN") != null && !jsonObj.get("IssuerDN").isJsonNull()) && !jsonObj.get("IssuerDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssuerDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssuerDN").toString()));
      }
      if ((jsonObj.get("Thumbprint") != null && !jsonObj.get("Thumbprint").isJsonNull()) && !jsonObj.get("Thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Thumbprint").toString()));
      }
      if ((jsonObj.get("Pkcs12Blob") != null && !jsonObj.get("Pkcs12Blob").isJsonNull()) && !jsonObj.get("Pkcs12Blob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Pkcs12Blob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Pkcs12Blob").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      if ((jsonObj.get("RequestDisposition") != null && !jsonObj.get("RequestDisposition").isJsonNull()) && !jsonObj.get("RequestDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestDisposition").toString()));
      }
      if ((jsonObj.get("DispositionMessage") != null && !jsonObj.get("DispositionMessage").isJsonNull()) && !jsonObj.get("DispositionMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DispositionMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DispositionMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsPkcs12CertificateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsPkcs12CertificateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsPkcs12CertificateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsPkcs12CertificateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsPkcs12CertificateResponse>() {
           @Override
           public void write(JsonWriter out, ModelsPkcs12CertificateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsPkcs12CertificateResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsPkcs12CertificateResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsPkcs12CertificateResponse
  * @throws IOException if the JSON string is invalid with respect to ModelsPkcs12CertificateResponse
  */
  public static ModelsPkcs12CertificateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsPkcs12CertificateResponse.class);
  }

 /**
  * Convert an instance of ModelsPkcs12CertificateResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

