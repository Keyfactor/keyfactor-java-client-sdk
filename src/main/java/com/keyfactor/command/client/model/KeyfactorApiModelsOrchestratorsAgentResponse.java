/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsOrchestratorsAgentResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeyfactorApiModelsOrchestratorsAgentResponse {
  public static final String SERIALIZED_NAME_AGENT_ID = "AgentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private UUID agentId;

  public static final String SERIALIZED_NAME_CLIENT_MACHINE = "ClientMachine";
  @SerializedName(SERIALIZED_NAME_CLIENT_MACHINE)
  private String clientMachine;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  /**
   * Gets or Sets agentPlatform
   */
  @JsonAdapter(AgentPlatformEnum.Adapter.class)
  public enum AgentPlatformEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    AgentPlatformEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgentPlatformEnum fromValue(Integer value) {
      for (AgentPlatformEnum b : AgentPlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgentPlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgentPlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgentPlatformEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AgentPlatformEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGENT_PLATFORM = "AgentPlatform";
  @SerializedName(SERIALIZED_NAME_AGENT_PLATFORM)
  private AgentPlatformEnum agentPlatform;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_LAST_SEEN = "LastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private OffsetDateTime lastSeen;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<String> capabilities = null;

  public static final String SERIALIZED_NAME_BLUEPRINT = "Blueprint";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT)
  private String blueprint;

  public static final String SERIALIZED_NAME_THUMBPRINT = "Thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_LEGACY_THUMBPRINT = "LegacyThumbprint";
  @SerializedName(SERIALIZED_NAME_LEGACY_THUMBPRINT)
  private String legacyThumbprint;

  public static final String SERIALIZED_NAME_AUTH_CERTIFICATE_REENROLLMENT = "AuthCertificateReenrollment";
  @SerializedName(SERIALIZED_NAME_AUTH_CERTIFICATE_REENROLLMENT)
  private String authCertificateReenrollment;

  public static final String SERIALIZED_NAME_LAST_THUMBPRINT_USED = "LastThumbprintUsed";
  @SerializedName(SERIALIZED_NAME_LAST_THUMBPRINT_USED)
  private String lastThumbprintUsed;

  public static final String SERIALIZED_NAME_LAST_ERROR_CODE = "LastErrorCode";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_CODE)
  private Long lastErrorCode;

  public static final String SERIALIZED_NAME_LAST_ERROR_MESSAGE = "LastErrorMessage";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_MESSAGE)
  private String lastErrorMessage;

  public KeyfactorApiModelsOrchestratorsAgentResponse() {
  }

  public KeyfactorApiModelsOrchestratorsAgentResponse agentId(UUID agentId) {
    
    this.agentId = agentId;
    return this;
  }

   /**
   * Get agentId
   * @return agentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAgentId() {
    return agentId;
  }


  public void setAgentId(UUID agentId) {
    this.agentId = agentId;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse clientMachine(String clientMachine) {
    
    this.clientMachine = clientMachine;
    return this;
  }

   /**
   * Get clientMachine
   * @return clientMachine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientMachine() {
    return clientMachine;
  }


  public void setClientMachine(String clientMachine) {
    this.clientMachine = clientMachine;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse agentPlatform(AgentPlatformEnum agentPlatform) {
    
    this.agentPlatform = agentPlatform;
    return this;
  }

   /**
   * Get agentPlatform
   * @return agentPlatform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AgentPlatformEnum getAgentPlatform() {
    return agentPlatform;
  }


  public void setAgentPlatform(AgentPlatformEnum agentPlatform) {
    this.agentPlatform = agentPlatform;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse lastSeen(OffsetDateTime lastSeen) {
    
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastSeen() {
    return lastSeen;
  }


  public void setLastSeen(OffsetDateTime lastSeen) {
    this.lastSeen = lastSeen;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse capabilities(List<String> capabilities) {
    
    this.capabilities = capabilities;
    return this;
  }

  public KeyfactorApiModelsOrchestratorsAgentResponse addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCapabilities() {
    return capabilities;
  }


  public void setCapabilities(List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse blueprint(String blueprint) {
    
    this.blueprint = blueprint;
    return this;
  }

   /**
   * Get blueprint
   * @return blueprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBlueprint() {
    return blueprint;
  }


  public void setBlueprint(String blueprint) {
    this.blueprint = blueprint;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse thumbprint(String thumbprint) {
    
    this.thumbprint = thumbprint;
    return this;
  }

   /**
   * Get thumbprint
   * @return thumbprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThumbprint() {
    return thumbprint;
  }


  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse legacyThumbprint(String legacyThumbprint) {
    
    this.legacyThumbprint = legacyThumbprint;
    return this;
  }

   /**
   * Get legacyThumbprint
   * @return legacyThumbprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLegacyThumbprint() {
    return legacyThumbprint;
  }


  public void setLegacyThumbprint(String legacyThumbprint) {
    this.legacyThumbprint = legacyThumbprint;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse authCertificateReenrollment(String authCertificateReenrollment) {
    
    this.authCertificateReenrollment = authCertificateReenrollment;
    return this;
  }

   /**
   * Get authCertificateReenrollment
   * @return authCertificateReenrollment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthCertificateReenrollment() {
    return authCertificateReenrollment;
  }


  public void setAuthCertificateReenrollment(String authCertificateReenrollment) {
    this.authCertificateReenrollment = authCertificateReenrollment;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse lastThumbprintUsed(String lastThumbprintUsed) {
    
    this.lastThumbprintUsed = lastThumbprintUsed;
    return this;
  }

   /**
   * Get lastThumbprintUsed
   * @return lastThumbprintUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastThumbprintUsed() {
    return lastThumbprintUsed;
  }


  public void setLastThumbprintUsed(String lastThumbprintUsed) {
    this.lastThumbprintUsed = lastThumbprintUsed;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse lastErrorCode(Long lastErrorCode) {
    
    this.lastErrorCode = lastErrorCode;
    return this;
  }

   /**
   * Get lastErrorCode
   * @return lastErrorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getLastErrorCode() {
    return lastErrorCode;
  }


  public void setLastErrorCode(Long lastErrorCode) {
    this.lastErrorCode = lastErrorCode;
  }


  public KeyfactorApiModelsOrchestratorsAgentResponse lastErrorMessage(String lastErrorMessage) {
    
    this.lastErrorMessage = lastErrorMessage;
    return this;
  }

   /**
   * Get lastErrorMessage
   * @return lastErrorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastErrorMessage() {
    return lastErrorMessage;
  }


  public void setLastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsOrchestratorsAgentResponse keyfactorApiModelsOrchestratorsAgentResponse = (KeyfactorApiModelsOrchestratorsAgentResponse) o;
    return Objects.equals(this.agentId, keyfactorApiModelsOrchestratorsAgentResponse.agentId) &&
        Objects.equals(this.clientMachine, keyfactorApiModelsOrchestratorsAgentResponse.clientMachine) &&
        Objects.equals(this.username, keyfactorApiModelsOrchestratorsAgentResponse.username) &&
        Objects.equals(this.agentPlatform, keyfactorApiModelsOrchestratorsAgentResponse.agentPlatform) &&
        Objects.equals(this.version, keyfactorApiModelsOrchestratorsAgentResponse.version) &&
        Objects.equals(this.status, keyfactorApiModelsOrchestratorsAgentResponse.status) &&
        Objects.equals(this.lastSeen, keyfactorApiModelsOrchestratorsAgentResponse.lastSeen) &&
        Objects.equals(this.capabilities, keyfactorApiModelsOrchestratorsAgentResponse.capabilities) &&
        Objects.equals(this.blueprint, keyfactorApiModelsOrchestratorsAgentResponse.blueprint) &&
        Objects.equals(this.thumbprint, keyfactorApiModelsOrchestratorsAgentResponse.thumbprint) &&
        Objects.equals(this.legacyThumbprint, keyfactorApiModelsOrchestratorsAgentResponse.legacyThumbprint) &&
        Objects.equals(this.authCertificateReenrollment, keyfactorApiModelsOrchestratorsAgentResponse.authCertificateReenrollment) &&
        Objects.equals(this.lastThumbprintUsed, keyfactorApiModelsOrchestratorsAgentResponse.lastThumbprintUsed) &&
        Objects.equals(this.lastErrorCode, keyfactorApiModelsOrchestratorsAgentResponse.lastErrorCode) &&
        Objects.equals(this.lastErrorMessage, keyfactorApiModelsOrchestratorsAgentResponse.lastErrorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, clientMachine, username, agentPlatform, version, status, lastSeen, capabilities, blueprint, thumbprint, legacyThumbprint, authCertificateReenrollment, lastThumbprintUsed, lastErrorCode, lastErrorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsOrchestratorsAgentResponse {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    clientMachine: ").append(toIndentedString(clientMachine)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    agentPlatform: ").append(toIndentedString(agentPlatform)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    blueprint: ").append(toIndentedString(blueprint)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    legacyThumbprint: ").append(toIndentedString(legacyThumbprint)).append("\n");
    sb.append("    authCertificateReenrollment: ").append(toIndentedString(authCertificateReenrollment)).append("\n");
    sb.append("    lastThumbprintUsed: ").append(toIndentedString(lastThumbprintUsed)).append("\n");
    sb.append("    lastErrorCode: ").append(toIndentedString(lastErrorCode)).append("\n");
    sb.append("    lastErrorMessage: ").append(toIndentedString(lastErrorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AgentId");
    openapiFields.add("ClientMachine");
    openapiFields.add("Username");
    openapiFields.add("AgentPlatform");
    openapiFields.add("Version");
    openapiFields.add("Status");
    openapiFields.add("LastSeen");
    openapiFields.add("Capabilities");
    openapiFields.add("Blueprint");
    openapiFields.add("Thumbprint");
    openapiFields.add("LegacyThumbprint");
    openapiFields.add("AuthCertificateReenrollment");
    openapiFields.add("LastThumbprintUsed");
    openapiFields.add("LastErrorCode");
    openapiFields.add("LastErrorMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsOrchestratorsAgentResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsOrchestratorsAgentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsOrchestratorsAgentResponse is not found in the empty JSON string", KeyfactorApiModelsOrchestratorsAgentResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsOrchestratorsAgentResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsOrchestratorsAgentResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("AgentId") != null && !jsonObj.get("AgentId").isJsonNull()) && !jsonObj.get("AgentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentId").toString()));
      }
      if ((jsonObj.get("ClientMachine") != null && !jsonObj.get("ClientMachine").isJsonNull()) && !jsonObj.get("ClientMachine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientMachine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientMachine").toString()));
      }
      if ((jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) && !jsonObj.get("Username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Username").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Capabilities") != null && !jsonObj.get("Capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("Capabilities").toString()));
      }
      if ((jsonObj.get("Blueprint") != null && !jsonObj.get("Blueprint").isJsonNull()) && !jsonObj.get("Blueprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Blueprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Blueprint").toString()));
      }
      if ((jsonObj.get("Thumbprint") != null && !jsonObj.get("Thumbprint").isJsonNull()) && !jsonObj.get("Thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Thumbprint").toString()));
      }
      if ((jsonObj.get("LegacyThumbprint") != null && !jsonObj.get("LegacyThumbprint").isJsonNull()) && !jsonObj.get("LegacyThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegacyThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegacyThumbprint").toString()));
      }
      if ((jsonObj.get("AuthCertificateReenrollment") != null && !jsonObj.get("AuthCertificateReenrollment").isJsonNull()) && !jsonObj.get("AuthCertificateReenrollment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthCertificateReenrollment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthCertificateReenrollment").toString()));
      }
      if ((jsonObj.get("LastThumbprintUsed") != null && !jsonObj.get("LastThumbprintUsed").isJsonNull()) && !jsonObj.get("LastThumbprintUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastThumbprintUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastThumbprintUsed").toString()));
      }
      if ((jsonObj.get("LastErrorMessage") != null && !jsonObj.get("LastErrorMessage").isJsonNull()) && !jsonObj.get("LastErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastErrorMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsOrchestratorsAgentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsOrchestratorsAgentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsOrchestratorsAgentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsOrchestratorsAgentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsOrchestratorsAgentResponse>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsOrchestratorsAgentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsOrchestratorsAgentResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsOrchestratorsAgentResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsOrchestratorsAgentResponse
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsOrchestratorsAgentResponse
  */
  public static KeyfactorApiModelsOrchestratorsAgentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsOrchestratorsAgentResponse.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsOrchestratorsAgentResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

