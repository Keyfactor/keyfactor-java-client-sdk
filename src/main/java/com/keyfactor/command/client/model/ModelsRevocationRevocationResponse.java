/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.ModelsRevocationSuspendedRevocationResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsRevocationRevocationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsRevocationRevocationResponse {
  public static final String SERIALIZED_NAME_REVOKED_IDS = "RevokedIds";
  @SerializedName(SERIALIZED_NAME_REVOKED_IDS)
  private List<Integer> revokedIds = null;

  public static final String SERIALIZED_NAME_SUSPENDED_CERTS = "SuspendedCerts";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_CERTS)
  private List<ModelsRevocationSuspendedRevocationResponse> suspendedCerts = null;

  public ModelsRevocationRevocationResponse() {
  }

  public ModelsRevocationRevocationResponse revokedIds(List<Integer> revokedIds) {
    
    this.revokedIds = revokedIds;
    return this;
  }

  public ModelsRevocationRevocationResponse addRevokedIdsItem(Integer revokedIdsItem) {
    if (this.revokedIds == null) {
      this.revokedIds = new ArrayList<>();
    }
    this.revokedIds.add(revokedIdsItem);
    return this;
  }

   /**
   * Get revokedIds
   * @return revokedIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getRevokedIds() {
    return revokedIds;
  }


  public void setRevokedIds(List<Integer> revokedIds) {
    this.revokedIds = revokedIds;
  }


  public ModelsRevocationRevocationResponse suspendedCerts(List<ModelsRevocationSuspendedRevocationResponse> suspendedCerts) {
    
    this.suspendedCerts = suspendedCerts;
    return this;
  }

  public ModelsRevocationRevocationResponse addSuspendedCertsItem(ModelsRevocationSuspendedRevocationResponse suspendedCertsItem) {
    if (this.suspendedCerts == null) {
      this.suspendedCerts = new ArrayList<>();
    }
    this.suspendedCerts.add(suspendedCertsItem);
    return this;
  }

   /**
   * Get suspendedCerts
   * @return suspendedCerts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsRevocationSuspendedRevocationResponse> getSuspendedCerts() {
    return suspendedCerts;
  }


  public void setSuspendedCerts(List<ModelsRevocationSuspendedRevocationResponse> suspendedCerts) {
    this.suspendedCerts = suspendedCerts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsRevocationRevocationResponse modelsRevocationRevocationResponse = (ModelsRevocationRevocationResponse) o;
    return Objects.equals(this.revokedIds, modelsRevocationRevocationResponse.revokedIds) &&
        Objects.equals(this.suspendedCerts, modelsRevocationRevocationResponse.suspendedCerts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(revokedIds, suspendedCerts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsRevocationRevocationResponse {\n");
    sb.append("    revokedIds: ").append(toIndentedString(revokedIds)).append("\n");
    sb.append("    suspendedCerts: ").append(toIndentedString(suspendedCerts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RevokedIds");
    openapiFields.add("SuspendedCerts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsRevocationRevocationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsRevocationRevocationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsRevocationRevocationResponse is not found in the empty JSON string", ModelsRevocationRevocationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsRevocationRevocationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsRevocationRevocationResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RevokedIds") != null && !jsonObj.get("RevokedIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RevokedIds` to be an array in the JSON string but got `%s`", jsonObj.get("RevokedIds").toString()));
      }
      if (jsonObj.get("SuspendedCerts") != null && !jsonObj.get("SuspendedCerts").isJsonNull()) {
        JsonArray jsonArraysuspendedCerts = jsonObj.getAsJsonArray("SuspendedCerts");
        if (jsonArraysuspendedCerts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SuspendedCerts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SuspendedCerts` to be an array in the JSON string but got `%s`", jsonObj.get("SuspendedCerts").toString()));
          }

          // validate the optional field `SuspendedCerts` (array)
          for (int i = 0; i < jsonArraysuspendedCerts.size(); i++) {
            ModelsRevocationSuspendedRevocationResponse.validateJsonObject(jsonArraysuspendedCerts.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsRevocationRevocationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsRevocationRevocationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsRevocationRevocationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsRevocationRevocationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsRevocationRevocationResponse>() {
           @Override
           public void write(JsonWriter out, ModelsRevocationRevocationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsRevocationRevocationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsRevocationRevocationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsRevocationRevocationResponse
  * @throws IOException if the JSON string is invalid with respect to ModelsRevocationRevocationResponse
  */
  public static ModelsRevocationRevocationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsRevocationRevocationResponse.class);
  }

 /**
  * Convert an instance of ModelsRevocationRevocationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

