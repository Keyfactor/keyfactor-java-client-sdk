/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsReportParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsReportParameters {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARAMETER_NAME = "ParameterName";
  @SerializedName(SERIALIZED_NAME_PARAMETER_NAME)
  private String parameterName;

  /**
   * Gets or Sets parameterType
   */
  @JsonAdapter(ParameterTypeEnum.Adapter.class)
  public enum ParameterTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21);

    private Integer value;

    ParameterTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParameterTypeEnum fromValue(Integer value) {
      for (ParameterTypeEnum b : ParameterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParameterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParameterTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ParameterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARAMETER_TYPE = "ParameterType";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE)
  private ParameterTypeEnum parameterType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "DisplayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  /**
   * Gets or Sets parameterVisibility
   */
  @JsonAdapter(ParameterVisibilityEnum.Adapter.class)
  public enum ParameterVisibilityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    ParameterVisibilityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParameterVisibilityEnum fromValue(Integer value) {
      for (ParameterVisibilityEnum b : ParameterVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParameterVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParameterVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ParameterVisibilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARAMETER_VISIBILITY = "ParameterVisibility";
  @SerializedName(SERIALIZED_NAME_PARAMETER_VISIBILITY)
  private ParameterVisibilityEnum parameterVisibility;

  public ModelsReportParameters() {
  }

  public ModelsReportParameters id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ModelsReportParameters parameterName(String parameterName) {
    
    this.parameterName = parameterName;
    return this;
  }

   /**
   * Get parameterName
   * @return parameterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParameterName() {
    return parameterName;
  }


  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public ModelsReportParameters parameterType(ParameterTypeEnum parameterType) {
    
    this.parameterType = parameterType;
    return this;
  }

   /**
   * Get parameterType
   * @return parameterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ParameterTypeEnum getParameterType() {
    return parameterType;
  }


  public void setParameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
  }


  public ModelsReportParameters displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ModelsReportParameters description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ModelsReportParameters defaultValue(String defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ModelsReportParameters displayOrder(Integer displayOrder) {
    
    this.displayOrder = displayOrder;
    return this;
  }

   /**
   * Get displayOrder
   * @return displayOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDisplayOrder() {
    return displayOrder;
  }


  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public ModelsReportParameters parameterVisibility(ParameterVisibilityEnum parameterVisibility) {
    
    this.parameterVisibility = parameterVisibility;
    return this;
  }

   /**
   * Get parameterVisibility
   * @return parameterVisibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ParameterVisibilityEnum getParameterVisibility() {
    return parameterVisibility;
  }


  public void setParameterVisibility(ParameterVisibilityEnum parameterVisibility) {
    this.parameterVisibility = parameterVisibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsReportParameters modelsReportParameters = (ModelsReportParameters) o;
    return Objects.equals(this.id, modelsReportParameters.id) &&
        Objects.equals(this.parameterName, modelsReportParameters.parameterName) &&
        Objects.equals(this.parameterType, modelsReportParameters.parameterType) &&
        Objects.equals(this.displayName, modelsReportParameters.displayName) &&
        Objects.equals(this.description, modelsReportParameters.description) &&
        Objects.equals(this.defaultValue, modelsReportParameters.defaultValue) &&
        Objects.equals(this.displayOrder, modelsReportParameters.displayOrder) &&
        Objects.equals(this.parameterVisibility, modelsReportParameters.parameterVisibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parameterName, parameterType, displayName, description, defaultValue, displayOrder, parameterVisibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsReportParameters {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    parameterVisibility: ").append(toIndentedString(parameterVisibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ParameterName");
    openapiFields.add("ParameterType");
    openapiFields.add("DisplayName");
    openapiFields.add("Description");
    openapiFields.add("DefaultValue");
    openapiFields.add("DisplayOrder");
    openapiFields.add("ParameterVisibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsReportParameters
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsReportParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsReportParameters is not found in the empty JSON string", ModelsReportParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsReportParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsReportParameters` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ParameterName") != null && !jsonObj.get("ParameterName").isJsonNull()) && !jsonObj.get("ParameterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterName").toString()));
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) && !jsonObj.get("DefaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsReportParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsReportParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsReportParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsReportParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsReportParameters>() {
           @Override
           public void write(JsonWriter out, ModelsReportParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsReportParameters read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsReportParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsReportParameters
  * @throws IOException if the JSON string is invalid with respect to ModelsReportParameters
  */
  public static ModelsReportParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsReportParameters.class);
  }

 /**
  * Convert an instance of ModelsReportParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

