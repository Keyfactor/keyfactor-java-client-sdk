/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsParameterDefinitionResponse;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsSignalDefinitionResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsWorkflowsAvailableStepQueryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T12:22:19.679-07:00[America/Phoenix]")
public class KeyfactorApiModelsWorkflowsAvailableStepQueryResponse {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTENSION_NAME = "ExtensionName";
  @SerializedName(SERIALIZED_NAME_EXTENSION_NAME)
  private String extensionName;

  public static final String SERIALIZED_NAME_SUPPORTED_WORKFLOW_TYPES = "SupportedWorkflowTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_WORKFLOW_TYPES)
  private List<String> supportedWorkflowTypes = null;

  public static final String SERIALIZED_NAME_CONFIGURATION_PARAMETERS_DEFINITION = "ConfigurationParametersDefinition";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_PARAMETERS_DEFINITION)
  private Map<String, KeyfactorApiModelsWorkflowsParameterDefinitionResponse> configurationParametersDefinition = null;

  public static final String SERIALIZED_NAME_SIGNALS_DEFINITION = "SignalsDefinition";
  @SerializedName(SERIALIZED_NAME_SIGNALS_DEFINITION)
  private Map<String, KeyfactorApiModelsWorkflowsSignalDefinitionResponse> signalsDefinition = null;

  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse() {
  }

  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the step.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name of the step.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse extensionName(String extensionName) {
    
    this.extensionName = extensionName;
    return this;
  }

   /**
   * The extension name of the step.
   * @return extensionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The extension name of the step.")

  public String getExtensionName() {
    return extensionName;
  }


  public void setExtensionName(String extensionName) {
    this.extensionName = extensionName;
  }


  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse supportedWorkflowTypes(List<String> supportedWorkflowTypes) {
    
    this.supportedWorkflowTypes = supportedWorkflowTypes;
    return this;
  }

  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse addSupportedWorkflowTypesItem(String supportedWorkflowTypesItem) {
    if (this.supportedWorkflowTypes == null) {
      this.supportedWorkflowTypes = new ArrayList<>();
    }
    this.supportedWorkflowTypes.add(supportedWorkflowTypesItem);
    return this;
  }

   /**
   * The workflow types which this step can be a part of.
   * @return supportedWorkflowTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The workflow types which this step can be a part of.")

  public List<String> getSupportedWorkflowTypes() {
    return supportedWorkflowTypes;
  }


  public void setSupportedWorkflowTypes(List<String> supportedWorkflowTypes) {
    this.supportedWorkflowTypes = supportedWorkflowTypes;
  }


  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse configurationParametersDefinition(Map<String, KeyfactorApiModelsWorkflowsParameterDefinitionResponse> configurationParametersDefinition) {
    
    this.configurationParametersDefinition = configurationParametersDefinition;
    return this;
  }

  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse putConfigurationParametersDefinitionItem(String key, KeyfactorApiModelsWorkflowsParameterDefinitionResponse configurationParametersDefinitionItem) {
    if (this.configurationParametersDefinition == null) {
      this.configurationParametersDefinition = new HashMap<>();
    }
    this.configurationParametersDefinition.put(key, configurationParametersDefinitionItem);
    return this;
  }

   /**
   * Get configurationParametersDefinition
   * @return configurationParametersDefinition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, KeyfactorApiModelsWorkflowsParameterDefinitionResponse> getConfigurationParametersDefinition() {
    return configurationParametersDefinition;
  }


  public void setConfigurationParametersDefinition(Map<String, KeyfactorApiModelsWorkflowsParameterDefinitionResponse> configurationParametersDefinition) {
    this.configurationParametersDefinition = configurationParametersDefinition;
  }


  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse signalsDefinition(Map<String, KeyfactorApiModelsWorkflowsSignalDefinitionResponse> signalsDefinition) {
    
    this.signalsDefinition = signalsDefinition;
    return this;
  }

  public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse putSignalsDefinitionItem(String key, KeyfactorApiModelsWorkflowsSignalDefinitionResponse signalsDefinitionItem) {
    if (this.signalsDefinition == null) {
      this.signalsDefinition = new HashMap<>();
    }
    this.signalsDefinition.put(key, signalsDefinitionItem);
    return this;
  }

   /**
   * Get signalsDefinition
   * @return signalsDefinition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, KeyfactorApiModelsWorkflowsSignalDefinitionResponse> getSignalsDefinition() {
    return signalsDefinition;
  }


  public void setSignalsDefinition(Map<String, KeyfactorApiModelsWorkflowsSignalDefinitionResponse> signalsDefinition) {
    this.signalsDefinition = signalsDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsWorkflowsAvailableStepQueryResponse keyfactorApiModelsWorkflowsAvailableStepQueryResponse = (KeyfactorApiModelsWorkflowsAvailableStepQueryResponse) o;
    return Objects.equals(this.displayName, keyfactorApiModelsWorkflowsAvailableStepQueryResponse.displayName) &&
        Objects.equals(this.extensionName, keyfactorApiModelsWorkflowsAvailableStepQueryResponse.extensionName) &&
        Objects.equals(this.supportedWorkflowTypes, keyfactorApiModelsWorkflowsAvailableStepQueryResponse.supportedWorkflowTypes) &&
        Objects.equals(this.configurationParametersDefinition, keyfactorApiModelsWorkflowsAvailableStepQueryResponse.configurationParametersDefinition) &&
        Objects.equals(this.signalsDefinition, keyfactorApiModelsWorkflowsAvailableStepQueryResponse.signalsDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, extensionName, supportedWorkflowTypes, configurationParametersDefinition, signalsDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsWorkflowsAvailableStepQueryResponse {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    extensionName: ").append(toIndentedString(extensionName)).append("\n");
    sb.append("    supportedWorkflowTypes: ").append(toIndentedString(supportedWorkflowTypes)).append("\n");
    sb.append("    configurationParametersDefinition: ").append(toIndentedString(configurationParametersDefinition)).append("\n");
    sb.append("    signalsDefinition: ").append(toIndentedString(signalsDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DisplayName");
    openapiFields.add("ExtensionName");
    openapiFields.add("SupportedWorkflowTypes");
    openapiFields.add("ConfigurationParametersDefinition");
    openapiFields.add("SignalsDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsWorkflowsAvailableStepQueryResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsWorkflowsAvailableStepQueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsWorkflowsAvailableStepQueryResponse is not found in the empty JSON string", KeyfactorApiModelsWorkflowsAvailableStepQueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsWorkflowsAvailableStepQueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsWorkflowsAvailableStepQueryResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("ExtensionName") != null && !jsonObj.get("ExtensionName").isJsonNull()) && !jsonObj.get("ExtensionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtensionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtensionName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedWorkflowTypes") != null && !jsonObj.get("SupportedWorkflowTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedWorkflowTypes` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedWorkflowTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsWorkflowsAvailableStepQueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsWorkflowsAvailableStepQueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsWorkflowsAvailableStepQueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsWorkflowsAvailableStepQueryResponse>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsWorkflowsAvailableStepQueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsWorkflowsAvailableStepQueryResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsWorkflowsAvailableStepQueryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsWorkflowsAvailableStepQueryResponse
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsWorkflowsAvailableStepQueryResponse
  */
  public static KeyfactorApiModelsWorkflowsAvailableStepQueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsWorkflowsAvailableStepQueryResponse.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsWorkflowsAvailableStepQueryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

