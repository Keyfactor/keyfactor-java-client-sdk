/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorApiModelsCertificatesCertificateIdentityAuditResponseCertificatePermission;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * Represents an account with a list of permission granted to it on a given certificate by either a role or collection
 */
@ApiModel(description = "Represents an account with a list of permission granted to it on a given certificate by either a role or collection")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "AccountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_IDENTITY_TYPE = "IdentityType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_TYPE)
  private String identityType;

  public static final String SERIALIZED_NAME_S_I_D = "SID";
  @SerializedName(SERIALIZED_NAME_S_I_D)
  private String SID;

  public static final String SERIALIZED_NAME_PERMISSIONS = "Permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<KeyfactorApiModelsCertificatesCertificateIdentityAuditResponseCertificatePermission> permissions = null;

  public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse() {
  }

  
  public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse(
     List<KeyfactorApiModelsCertificatesCertificateIdentityAuditResponseCertificatePermission> permissions
  ) {
    this();
    this.permissions = permissions;
  }

  public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the account represented by the audit response
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the account represented by the audit response")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse accountName(String accountName) {
    
    this.accountName = accountName;
    return this;
  }

   /**
   * Name of the account represented by the audit response
   * @return accountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the account represented by the audit response")

  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse identityType(String identityType) {
    
    this.identityType = identityType;
    return this;
  }

   /**
   * The type of account represented by the audit response (User or Group)
   * @return identityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of account represented by the audit response (User or Group)")

  public String getIdentityType() {
    return identityType;
  }


  public void setIdentityType(String identityType) {
    this.identityType = identityType;
  }


  public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse SID(String SID) {
    
    this.SID = SID;
    return this;
  }

   /**
   * The SID of the account represented by the audit reponse
   * @return SID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The SID of the account represented by the audit reponse")

  public String getSID() {
    return SID;
  }


  public void setSID(String SID) {
    this.SID = SID;
  }


   /**
   * Permissions granted to the account represented by the audit reponse on the specified certifcate
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Permissions granted to the account represented by the audit reponse on the specified certifcate")

  public List<KeyfactorApiModelsCertificatesCertificateIdentityAuditResponseCertificatePermission> getPermissions() {
    return permissions;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse keyfactorApiModelsCertificatesCertificateIdentityAuditResponse = (KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse) o;
    return Objects.equals(this.id, keyfactorApiModelsCertificatesCertificateIdentityAuditResponse.id) &&
        Objects.equals(this.accountName, keyfactorApiModelsCertificatesCertificateIdentityAuditResponse.accountName) &&
        Objects.equals(this.identityType, keyfactorApiModelsCertificatesCertificateIdentityAuditResponse.identityType) &&
        Objects.equals(this.SID, keyfactorApiModelsCertificatesCertificateIdentityAuditResponse.SID) &&
        Objects.equals(this.permissions, keyfactorApiModelsCertificatesCertificateIdentityAuditResponse.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountName, identityType, SID, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    identityType: ").append(toIndentedString(identityType)).append("\n");
    sb.append("    SID: ").append(toIndentedString(SID)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("AccountName");
    openapiFields.add("IdentityType");
    openapiFields.add("SID");
    openapiFields.add("Permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse is not found in the empty JSON string", KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("AccountName") != null && !jsonObj.get("AccountName").isJsonNull()) && !jsonObj.get("AccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountName").toString()));
      }
      if ((jsonObj.get("IdentityType") != null && !jsonObj.get("IdentityType").isJsonNull()) && !jsonObj.get("IdentityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IdentityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IdentityType").toString()));
      }
      if ((jsonObj.get("SID") != null && !jsonObj.get("SID").isJsonNull()) && !jsonObj.get("SID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SID").toString()));
      }
      if (jsonObj.get("Permissions") != null && !jsonObj.get("Permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("Permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Permissions` to be an array in the JSON string but got `%s`", jsonObj.get("Permissions").toString()));
          }

          // validate the optional field `Permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            KeyfactorApiModelsCertificatesCertificateIdentityAuditResponseCertificatePermission.validateJsonObject(jsonArraypermissions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse
  */
  public static KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsCertificatesCertificateIdentityAuditResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

