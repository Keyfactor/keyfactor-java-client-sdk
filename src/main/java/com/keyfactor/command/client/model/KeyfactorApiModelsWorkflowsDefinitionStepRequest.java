/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsConditionConfigurationRequest;
import com.keyfactor.command.client.model.KeyfactorApiModelsWorkflowsSignalConfigurationRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsWorkflowsDefinitionStepRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class KeyfactorApiModelsWorkflowsDefinitionStepRequest {
  public static final String SERIALIZED_NAME_EXTENSION_NAME = "ExtensionName";
  @SerializedName(SERIALIZED_NAME_EXTENSION_NAME)
  private String extensionName;

  public static final String SERIALIZED_NAME_UNIQUE_NAME = "UniqueName";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NAME)
  private String uniqueName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_CONFIGURATION_PARAMETERS = "ConfigurationParameters";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_PARAMETERS)
  private Map<String, Object> configurationParameters = null;

  public static final String SERIALIZED_NAME_SIGNALS = "Signals";
  @SerializedName(SERIALIZED_NAME_SIGNALS)
  private List<KeyfactorApiModelsWorkflowsSignalConfigurationRequest> signals = null;

  public static final String SERIALIZED_NAME_CONDITIONS = "Conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<KeyfactorApiModelsWorkflowsConditionConfigurationRequest> conditions = null;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Map<String, String> outputs = null;

  public KeyfactorApiModelsWorkflowsDefinitionStepRequest() {
  }

  public KeyfactorApiModelsWorkflowsDefinitionStepRequest extensionName(String extensionName) {
    
    this.extensionName = extensionName;
    return this;
  }

   /**
   * Get extensionName
   * @return extensionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtensionName() {
    return extensionName;
  }


  public void setExtensionName(String extensionName) {
    this.extensionName = extensionName;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest uniqueName(String uniqueName) {
    
    this.uniqueName = uniqueName;
    return this;
  }

   /**
   * Get uniqueName
   * @return uniqueName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUniqueName() {
    return uniqueName;
  }


  public void setUniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest configurationParameters(Map<String, Object> configurationParameters) {
    
    this.configurationParameters = configurationParameters;
    return this;
  }

  public KeyfactorApiModelsWorkflowsDefinitionStepRequest putConfigurationParametersItem(String key, Object configurationParametersItem) {
    if (this.configurationParameters == null) {
      this.configurationParameters = new HashMap<>();
    }
    this.configurationParameters.put(key, configurationParametersItem);
    return this;
  }

   /**
   * Get configurationParameters
   * @return configurationParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getConfigurationParameters() {
    return configurationParameters;
  }


  public void setConfigurationParameters(Map<String, Object> configurationParameters) {
    this.configurationParameters = configurationParameters;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest signals(List<KeyfactorApiModelsWorkflowsSignalConfigurationRequest> signals) {
    
    this.signals = signals;
    return this;
  }

  public KeyfactorApiModelsWorkflowsDefinitionStepRequest addSignalsItem(KeyfactorApiModelsWorkflowsSignalConfigurationRequest signalsItem) {
    if (this.signals == null) {
      this.signals = new ArrayList<>();
    }
    this.signals.add(signalsItem);
    return this;
  }

   /**
   * Get signals
   * @return signals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<KeyfactorApiModelsWorkflowsSignalConfigurationRequest> getSignals() {
    return signals;
  }


  public void setSignals(List<KeyfactorApiModelsWorkflowsSignalConfigurationRequest> signals) {
    this.signals = signals;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest conditions(List<KeyfactorApiModelsWorkflowsConditionConfigurationRequest> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public KeyfactorApiModelsWorkflowsDefinitionStepRequest addConditionsItem(KeyfactorApiModelsWorkflowsConditionConfigurationRequest conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<KeyfactorApiModelsWorkflowsConditionConfigurationRequest> getConditions() {
    return conditions;
  }


  public void setConditions(List<KeyfactorApiModelsWorkflowsConditionConfigurationRequest> conditions) {
    this.conditions = conditions;
  }


  public KeyfactorApiModelsWorkflowsDefinitionStepRequest outputs(Map<String, String> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public KeyfactorApiModelsWorkflowsDefinitionStepRequest putOutputsItem(String key, String outputsItem) {
    if (this.outputs == null) {
      this.outputs = new HashMap<>();
    }
    this.outputs.put(key, outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getOutputs() {
    return outputs;
  }


  public void setOutputs(Map<String, String> outputs) {
    this.outputs = outputs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsWorkflowsDefinitionStepRequest keyfactorApiModelsWorkflowsDefinitionStepRequest = (KeyfactorApiModelsWorkflowsDefinitionStepRequest) o;
    return Objects.equals(this.extensionName, keyfactorApiModelsWorkflowsDefinitionStepRequest.extensionName) &&
        Objects.equals(this.uniqueName, keyfactorApiModelsWorkflowsDefinitionStepRequest.uniqueName) &&
        Objects.equals(this.displayName, keyfactorApiModelsWorkflowsDefinitionStepRequest.displayName) &&
        Objects.equals(this.enabled, keyfactorApiModelsWorkflowsDefinitionStepRequest.enabled) &&
        Objects.equals(this.configurationParameters, keyfactorApiModelsWorkflowsDefinitionStepRequest.configurationParameters) &&
        Objects.equals(this.signals, keyfactorApiModelsWorkflowsDefinitionStepRequest.signals) &&
        Objects.equals(this.conditions, keyfactorApiModelsWorkflowsDefinitionStepRequest.conditions) &&
        Objects.equals(this.outputs, keyfactorApiModelsWorkflowsDefinitionStepRequest.outputs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionName, uniqueName, displayName, enabled, configurationParameters, signals, conditions, outputs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsWorkflowsDefinitionStepRequest {\n");
    sb.append("    extensionName: ").append(toIndentedString(extensionName)).append("\n");
    sb.append("    uniqueName: ").append(toIndentedString(uniqueName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    configurationParameters: ").append(toIndentedString(configurationParameters)).append("\n");
    sb.append("    signals: ").append(toIndentedString(signals)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExtensionName");
    openapiFields.add("UniqueName");
    openapiFields.add("DisplayName");
    openapiFields.add("Enabled");
    openapiFields.add("ConfigurationParameters");
    openapiFields.add("Signals");
    openapiFields.add("Conditions");
    openapiFields.add("Outputs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsWorkflowsDefinitionStepRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsWorkflowsDefinitionStepRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsWorkflowsDefinitionStepRequest is not found in the empty JSON string", KeyfactorApiModelsWorkflowsDefinitionStepRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsWorkflowsDefinitionStepRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsWorkflowsDefinitionStepRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ExtensionName") != null && !jsonObj.get("ExtensionName").isJsonNull()) && !jsonObj.get("ExtensionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtensionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtensionName").toString()));
      }
      if ((jsonObj.get("UniqueName") != null && !jsonObj.get("UniqueName").isJsonNull()) && !jsonObj.get("UniqueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UniqueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UniqueName").toString()));
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if (jsonObj.get("Signals") != null && !jsonObj.get("Signals").isJsonNull()) {
        JsonArray jsonArraysignals = jsonObj.getAsJsonArray("Signals");
        if (jsonArraysignals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Signals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Signals` to be an array in the JSON string but got `%s`", jsonObj.get("Signals").toString()));
          }

          // validate the optional field `Signals` (array)
          for (int i = 0; i < jsonArraysignals.size(); i++) {
            KeyfactorApiModelsWorkflowsSignalConfigurationRequest.validateJsonObject(jsonArraysignals.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Conditions") != null && !jsonObj.get("Conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("Conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Conditions` to be an array in the JSON string but got `%s`", jsonObj.get("Conditions").toString()));
          }

          // validate the optional field `Conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            KeyfactorApiModelsWorkflowsConditionConfigurationRequest.validateJsonObject(jsonArrayconditions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsWorkflowsDefinitionStepRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsWorkflowsDefinitionStepRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsWorkflowsDefinitionStepRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsWorkflowsDefinitionStepRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsWorkflowsDefinitionStepRequest>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsWorkflowsDefinitionStepRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsWorkflowsDefinitionStepRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsWorkflowsDefinitionStepRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsWorkflowsDefinitionStepRequest
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsWorkflowsDefinitionStepRequest
  */
  public static KeyfactorApiModelsWorkflowsDefinitionStepRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsWorkflowsDefinitionStepRequest.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsWorkflowsDefinitionStepRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

