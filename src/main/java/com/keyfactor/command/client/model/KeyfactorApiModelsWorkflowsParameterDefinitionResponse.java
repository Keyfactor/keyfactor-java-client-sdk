/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsWorkflowsParameterDefinitionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class KeyfactorApiModelsWorkflowsParameterDefinitionResponse {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Gets or Sets parameterType
   */
  @JsonAdapter(ParameterTypeEnum.Adapter.class)
  public enum ParameterTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    ParameterTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParameterTypeEnum fromValue(Integer value) {
      for (ParameterTypeEnum b : ParameterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParameterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParameterTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ParameterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARAMETER_TYPE = "ParameterType";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE)
  private ParameterTypeEnum parameterType;

  public static final String SERIALIZED_NAME_REQUIRED = "Required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  /**
   * Gets or Sets controlType
   */
  @JsonAdapter(ControlTypeEnum.Adapter.class)
  public enum ControlTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    ControlTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControlTypeEnum fromValue(Integer value) {
      for (ControlTypeEnum b : ControlTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ControlTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControlTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControlTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ControlTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTROL_TYPE = "ControlType";
  @SerializedName(SERIALIZED_NAME_CONTROL_TYPE)
  private ControlTypeEnum controlType;

  public static final String SERIALIZED_NAME_POTENTIAL_VALUES = "PotentialValues";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_VALUES)
  private Map<String, String> potentialValues = null;

  public static final String SERIALIZED_NAME_SUPPORT_TOKEN_REPLACEMENT = "SupportTokenReplacement";
  @SerializedName(SERIALIZED_NAME_SUPPORT_TOKEN_REPLACEMENT)
  private Boolean supportTokenReplacement;

  public static final String SERIALIZED_NAME_DEPENDS_ON = "DependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private Map<String, String> dependsOn = null;

  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse() {
  }

  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse parameterType(ParameterTypeEnum parameterType) {
    
    this.parameterType = parameterType;
    return this;
  }

   /**
   * Get parameterType
   * @return parameterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ParameterTypeEnum getParameterType() {
    return parameterType;
  }


  public void setParameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse defaultValue(String defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse controlType(ControlTypeEnum controlType) {
    
    this.controlType = controlType;
    return this;
  }

   /**
   * Get controlType
   * @return controlType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ControlTypeEnum getControlType() {
    return controlType;
  }


  public void setControlType(ControlTypeEnum controlType) {
    this.controlType = controlType;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse potentialValues(Map<String, String> potentialValues) {
    
    this.potentialValues = potentialValues;
    return this;
  }

  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse putPotentialValuesItem(String key, String potentialValuesItem) {
    if (this.potentialValues == null) {
      this.potentialValues = new HashMap<>();
    }
    this.potentialValues.put(key, potentialValuesItem);
    return this;
  }

   /**
   * Get potentialValues
   * @return potentialValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getPotentialValues() {
    return potentialValues;
  }


  public void setPotentialValues(Map<String, String> potentialValues) {
    this.potentialValues = potentialValues;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse supportTokenReplacement(Boolean supportTokenReplacement) {
    
    this.supportTokenReplacement = supportTokenReplacement;
    return this;
  }

   /**
   * Get supportTokenReplacement
   * @return supportTokenReplacement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSupportTokenReplacement() {
    return supportTokenReplacement;
  }


  public void setSupportTokenReplacement(Boolean supportTokenReplacement) {
    this.supportTokenReplacement = supportTokenReplacement;
  }


  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse dependsOn(Map<String, String> dependsOn) {
    
    this.dependsOn = dependsOn;
    return this;
  }

  public KeyfactorApiModelsWorkflowsParameterDefinitionResponse putDependsOnItem(String key, String dependsOnItem) {
    if (this.dependsOn == null) {
      this.dependsOn = new HashMap<>();
    }
    this.dependsOn.put(key, dependsOnItem);
    return this;
  }

   /**
   * Get dependsOn
   * @return dependsOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getDependsOn() {
    return dependsOn;
  }


  public void setDependsOn(Map<String, String> dependsOn) {
    this.dependsOn = dependsOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsWorkflowsParameterDefinitionResponse keyfactorApiModelsWorkflowsParameterDefinitionResponse = (KeyfactorApiModelsWorkflowsParameterDefinitionResponse) o;
    return Objects.equals(this.displayName, keyfactorApiModelsWorkflowsParameterDefinitionResponse.displayName) &&
        Objects.equals(this.parameterType, keyfactorApiModelsWorkflowsParameterDefinitionResponse.parameterType) &&
        Objects.equals(this.required, keyfactorApiModelsWorkflowsParameterDefinitionResponse.required) &&
        Objects.equals(this.defaultValue, keyfactorApiModelsWorkflowsParameterDefinitionResponse.defaultValue) &&
        Objects.equals(this.controlType, keyfactorApiModelsWorkflowsParameterDefinitionResponse.controlType) &&
        Objects.equals(this.potentialValues, keyfactorApiModelsWorkflowsParameterDefinitionResponse.potentialValues) &&
        Objects.equals(this.supportTokenReplacement, keyfactorApiModelsWorkflowsParameterDefinitionResponse.supportTokenReplacement) &&
        Objects.equals(this.dependsOn, keyfactorApiModelsWorkflowsParameterDefinitionResponse.dependsOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, parameterType, required, defaultValue, controlType, potentialValues, supportTokenReplacement, dependsOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsWorkflowsParameterDefinitionResponse {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    controlType: ").append(toIndentedString(controlType)).append("\n");
    sb.append("    potentialValues: ").append(toIndentedString(potentialValues)).append("\n");
    sb.append("    supportTokenReplacement: ").append(toIndentedString(supportTokenReplacement)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DisplayName");
    openapiFields.add("ParameterType");
    openapiFields.add("Required");
    openapiFields.add("DefaultValue");
    openapiFields.add("ControlType");
    openapiFields.add("PotentialValues");
    openapiFields.add("SupportTokenReplacement");
    openapiFields.add("DependsOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsWorkflowsParameterDefinitionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsWorkflowsParameterDefinitionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsWorkflowsParameterDefinitionResponse is not found in the empty JSON string", KeyfactorApiModelsWorkflowsParameterDefinitionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsWorkflowsParameterDefinitionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsWorkflowsParameterDefinitionResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) && !jsonObj.get("DefaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsWorkflowsParameterDefinitionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsWorkflowsParameterDefinitionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsWorkflowsParameterDefinitionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsWorkflowsParameterDefinitionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsWorkflowsParameterDefinitionResponse>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsWorkflowsParameterDefinitionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsWorkflowsParameterDefinitionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsWorkflowsParameterDefinitionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsWorkflowsParameterDefinitionResponse
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsWorkflowsParameterDefinitionResponse
  */
  public static KeyfactorApiModelsWorkflowsParameterDefinitionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsWorkflowsParameterDefinitionResponse.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsWorkflowsParameterDefinitionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

