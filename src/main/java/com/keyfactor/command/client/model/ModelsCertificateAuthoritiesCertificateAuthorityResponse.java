/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorCommonSchedulingKeyfactorSchedule;
import com.keyfactor.command.client.model.ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate;
import com.keyfactor.command.client.model.ModelsKeyfactorAPISecret;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsCertificateAuthoritiesCertificateAuthorityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsCertificateAuthoritiesCertificateAuthorityResponse {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOGICAL_NAME = "LogicalName";
  @SerializedName(SERIALIZED_NAME_LOGICAL_NAME)
  private String logicalName;

  public static final String SERIALIZED_NAME_HOST_NAME = "HostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_DELEGATE = "Delegate";
  @SerializedName(SERIALIZED_NAME_DELEGATE)
  private Boolean delegate;

  public static final String SERIALIZED_NAME_DELEGATE_ENROLLMENT = "DelegateEnrollment";
  @SerializedName(SERIALIZED_NAME_DELEGATE_ENROLLMENT)
  private Boolean delegateEnrollment;

  public static final String SERIALIZED_NAME_FOREST_ROOT = "ForestRoot";
  @SerializedName(SERIALIZED_NAME_FOREST_ROOT)
  private String forestRoot;

  public static final String SERIALIZED_NAME_CONFIGURATION_TENANT = "ConfigurationTenant";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TENANT)
  private String configurationTenant;

  public static final String SERIALIZED_NAME_REMOTE = "Remote";
  @SerializedName(SERIALIZED_NAME_REMOTE)
  private Boolean remote;

  public static final String SERIALIZED_NAME_AGENT = "Agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private UUID agent;

  public static final String SERIALIZED_NAME_STANDALONE = "Standalone";
  @SerializedName(SERIALIZED_NAME_STANDALONE)
  private Boolean standalone;

  public static final String SERIALIZED_NAME_MONITOR_THRESHOLDS = "MonitorThresholds";
  @SerializedName(SERIALIZED_NAME_MONITOR_THRESHOLDS)
  private Boolean monitorThresholds;

  public static final String SERIALIZED_NAME_ISSUANCE_MAX = "IssuanceMax";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_MAX)
  private Integer issuanceMax;

  public static final String SERIALIZED_NAME_ISSUANCE_MIN = "IssuanceMin";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_MIN)
  private Integer issuanceMin;

  public static final String SERIALIZED_NAME_DENIAL_MAX = "DenialMax";
  @SerializedName(SERIALIZED_NAME_DENIAL_MAX)
  private Integer denialMax;

  public static final String SERIALIZED_NAME_FAILURE_MAX = "FailureMax";
  @SerializedName(SERIALIZED_NAME_FAILURE_MAX)
  private Integer failureMax;

  public static final String SERIALIZED_NAME_RF_C_ENFORCEMENT = "RFCEnforcement";
  @SerializedName(SERIALIZED_NAME_RF_C_ENFORCEMENT)
  private Boolean rfCEnforcement;

  public static final String SERIALIZED_NAME_PROPERTIES = "Properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  /**
   * Gets or Sets allowedEnrollmentTypes
   */
  @JsonAdapter(AllowedEnrollmentTypesEnum.Adapter.class)
  public enum AllowedEnrollmentTypesEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    AllowedEnrollmentTypesEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedEnrollmentTypesEnum fromValue(Integer value) {
      for (AllowedEnrollmentTypesEnum b : AllowedEnrollmentTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedEnrollmentTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedEnrollmentTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedEnrollmentTypesEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AllowedEnrollmentTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_ENROLLMENT_TYPES = "AllowedEnrollmentTypes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ENROLLMENT_TYPES)
  private AllowedEnrollmentTypesEnum allowedEnrollmentTypes;

  /**
   * Gets or Sets keyRetention
   */
  @JsonAdapter(KeyRetentionEnum.Adapter.class)
  public enum KeyRetentionEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    KeyRetentionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyRetentionEnum fromValue(Integer value) {
      for (KeyRetentionEnum b : KeyRetentionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyRetentionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyRetentionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyRetentionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return KeyRetentionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KEY_RETENTION = "KeyRetention";
  @SerializedName(SERIALIZED_NAME_KEY_RETENTION)
  private KeyRetentionEnum keyRetention;

  public static final String SERIALIZED_NAME_KEY_RETENTION_DAYS = "KeyRetentionDays";
  @SerializedName(SERIALIZED_NAME_KEY_RETENTION_DAYS)
  private Integer keyRetentionDays;

  public static final String SERIALIZED_NAME_EXPLICIT_CREDENTIALS = "ExplicitCredentials";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_CREDENTIALS)
  private Boolean explicitCredentials;

  public static final String SERIALIZED_NAME_SUBSCRIBER_TERMS = "SubscriberTerms";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_TERMS)
  private Boolean subscriberTerms;

  public static final String SERIALIZED_NAME_EXPLICIT_USER = "ExplicitUser";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_USER)
  private String explicitUser;

  public static final String SERIALIZED_NAME_EXPLICIT_PASSWORD = "ExplicitPassword";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_PASSWORD)
  private ModelsKeyfactorAPISecret explicitPassword;

  public static final String SERIALIZED_NAME_USE_ALLOWED_REQUESTERS = "UseAllowedRequesters";
  @SerializedName(SERIALIZED_NAME_USE_ALLOWED_REQUESTERS)
  private Boolean useAllowedRequesters;

  public static final String SERIALIZED_NAME_ALLOWED_REQUESTERS = "AllowedRequesters";
  @SerializedName(SERIALIZED_NAME_ALLOWED_REQUESTERS)
  private List<String> allowedRequesters = null;

  public static final String SERIALIZED_NAME_FULL_SCAN = "FullScan";
  @SerializedName(SERIALIZED_NAME_FULL_SCAN)
  private KeyfactorCommonSchedulingKeyfactorSchedule fullScan;

  public static final String SERIALIZED_NAME_INCREMENTAL_SCAN = "IncrementalScan";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_SCAN)
  private KeyfactorCommonSchedulingKeyfactorSchedule incrementalScan;

  public static final String SERIALIZED_NAME_THRESHOLD_CHECK = "ThresholdCheck";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_CHECK)
  private KeyfactorCommonSchedulingKeyfactorSchedule thresholdCheck;

  /**
   * Gets or Sets caType
   */
  @JsonAdapter(CaTypeEnum.Adapter.class)
  public enum CaTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    CaTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CaTypeEnum fromValue(Integer value) {
      for (CaTypeEnum b : CaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CaTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CaTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CA_TYPE = "CAType";
  @SerializedName(SERIALIZED_NAME_CA_TYPE)
  private CaTypeEnum caType;

  public static final String SERIALIZED_NAME_AUTH_CERTIFICATE = "AuthCertificate";
  @SerializedName(SERIALIZED_NAME_AUTH_CERTIFICATE)
  private ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate authCertificate;

  public static final String SERIALIZED_NAME_ENFORCE_UNIQUE_D_N = "EnforceUniqueDN";
  @SerializedName(SERIALIZED_NAME_ENFORCE_UNIQUE_D_N)
  private Boolean enforceUniqueDN;

  public static final String SERIALIZED_NAME_LAST_SCAN = "LastScan";
  @SerializedName(SERIALIZED_NAME_LAST_SCAN)
  private String lastScan;

  public ModelsCertificateAuthoritiesCertificateAuthorityResponse() {
  }

  
  public ModelsCertificateAuthoritiesCertificateAuthorityResponse(
     String forestRoot, 
     String lastScan
  ) {
    this();
    this.forestRoot = forestRoot;
    this.lastScan = lastScan;
  }

  public ModelsCertificateAuthoritiesCertificateAuthorityResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse logicalName(String logicalName) {
    
    this.logicalName = logicalName;
    return this;
  }

   /**
   * Get logicalName
   * @return logicalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLogicalName() {
    return logicalName;
  }


  public void setLogicalName(String logicalName) {
    this.logicalName = logicalName;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse hostName(String hostName) {
    
    this.hostName = hostName;
    return this;
  }

   /**
   * Get hostName
   * @return hostName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostName() {
    return hostName;
  }


  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse delegate(Boolean delegate) {
    
    this.delegate = delegate;
    return this;
  }

   /**
   * Get delegate
   * @return delegate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDelegate() {
    return delegate;
  }


  public void setDelegate(Boolean delegate) {
    this.delegate = delegate;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse delegateEnrollment(Boolean delegateEnrollment) {
    
    this.delegateEnrollment = delegateEnrollment;
    return this;
  }

   /**
   * Get delegateEnrollment
   * @return delegateEnrollment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDelegateEnrollment() {
    return delegateEnrollment;
  }


  public void setDelegateEnrollment(Boolean delegateEnrollment) {
    this.delegateEnrollment = delegateEnrollment;
  }


   /**
   * Get forestRoot
   * @return forestRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getForestRoot() {
    return forestRoot;
  }




  public ModelsCertificateAuthoritiesCertificateAuthorityResponse configurationTenant(String configurationTenant) {
    
    this.configurationTenant = configurationTenant;
    return this;
  }

   /**
   * Get configurationTenant
   * @return configurationTenant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConfigurationTenant() {
    return configurationTenant;
  }


  public void setConfigurationTenant(String configurationTenant) {
    this.configurationTenant = configurationTenant;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse remote(Boolean remote) {
    
    this.remote = remote;
    return this;
  }

   /**
   * Get remote
   * @return remote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRemote() {
    return remote;
  }


  public void setRemote(Boolean remote) {
    this.remote = remote;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse agent(UUID agent) {
    
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAgent() {
    return agent;
  }


  public void setAgent(UUID agent) {
    this.agent = agent;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse standalone(Boolean standalone) {
    
    this.standalone = standalone;
    return this;
  }

   /**
   * Get standalone
   * @return standalone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getStandalone() {
    return standalone;
  }


  public void setStandalone(Boolean standalone) {
    this.standalone = standalone;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse monitorThresholds(Boolean monitorThresholds) {
    
    this.monitorThresholds = monitorThresholds;
    return this;
  }

   /**
   * Get monitorThresholds
   * @return monitorThresholds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMonitorThresholds() {
    return monitorThresholds;
  }


  public void setMonitorThresholds(Boolean monitorThresholds) {
    this.monitorThresholds = monitorThresholds;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse issuanceMax(Integer issuanceMax) {
    
    this.issuanceMax = issuanceMax;
    return this;
  }

   /**
   * Get issuanceMax
   * @return issuanceMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIssuanceMax() {
    return issuanceMax;
  }


  public void setIssuanceMax(Integer issuanceMax) {
    this.issuanceMax = issuanceMax;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse issuanceMin(Integer issuanceMin) {
    
    this.issuanceMin = issuanceMin;
    return this;
  }

   /**
   * Get issuanceMin
   * @return issuanceMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIssuanceMin() {
    return issuanceMin;
  }


  public void setIssuanceMin(Integer issuanceMin) {
    this.issuanceMin = issuanceMin;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse denialMax(Integer denialMax) {
    
    this.denialMax = denialMax;
    return this;
  }

   /**
   * Get denialMax
   * @return denialMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDenialMax() {
    return denialMax;
  }


  public void setDenialMax(Integer denialMax) {
    this.denialMax = denialMax;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse failureMax(Integer failureMax) {
    
    this.failureMax = failureMax;
    return this;
  }

   /**
   * Get failureMax
   * @return failureMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFailureMax() {
    return failureMax;
  }


  public void setFailureMax(Integer failureMax) {
    this.failureMax = failureMax;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse rfCEnforcement(Boolean rfCEnforcement) {
    
    this.rfCEnforcement = rfCEnforcement;
    return this;
  }

   /**
   * Get rfCEnforcement
   * @return rfCEnforcement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRfCEnforcement() {
    return rfCEnforcement;
  }


  public void setRfCEnforcement(Boolean rfCEnforcement) {
    this.rfCEnforcement = rfCEnforcement;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse properties(String properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProperties() {
    return properties;
  }


  public void setProperties(String properties) {
    this.properties = properties;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse allowedEnrollmentTypes(AllowedEnrollmentTypesEnum allowedEnrollmentTypes) {
    
    this.allowedEnrollmentTypes = allowedEnrollmentTypes;
    return this;
  }

   /**
   * Get allowedEnrollmentTypes
   * @return allowedEnrollmentTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AllowedEnrollmentTypesEnum getAllowedEnrollmentTypes() {
    return allowedEnrollmentTypes;
  }


  public void setAllowedEnrollmentTypes(AllowedEnrollmentTypesEnum allowedEnrollmentTypes) {
    this.allowedEnrollmentTypes = allowedEnrollmentTypes;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse keyRetention(KeyRetentionEnum keyRetention) {
    
    this.keyRetention = keyRetention;
    return this;
  }

   /**
   * Get keyRetention
   * @return keyRetention
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyRetentionEnum getKeyRetention() {
    return keyRetention;
  }


  public void setKeyRetention(KeyRetentionEnum keyRetention) {
    this.keyRetention = keyRetention;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse keyRetentionDays(Integer keyRetentionDays) {
    
    this.keyRetentionDays = keyRetentionDays;
    return this;
  }

   /**
   * Get keyRetentionDays
   * @return keyRetentionDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getKeyRetentionDays() {
    return keyRetentionDays;
  }


  public void setKeyRetentionDays(Integer keyRetentionDays) {
    this.keyRetentionDays = keyRetentionDays;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse explicitCredentials(Boolean explicitCredentials) {
    
    this.explicitCredentials = explicitCredentials;
    return this;
  }

   /**
   * Get explicitCredentials
   * @return explicitCredentials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExplicitCredentials() {
    return explicitCredentials;
  }


  public void setExplicitCredentials(Boolean explicitCredentials) {
    this.explicitCredentials = explicitCredentials;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse subscriberTerms(Boolean subscriberTerms) {
    
    this.subscriberTerms = subscriberTerms;
    return this;
  }

   /**
   * Get subscriberTerms
   * @return subscriberTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSubscriberTerms() {
    return subscriberTerms;
  }


  public void setSubscriberTerms(Boolean subscriberTerms) {
    this.subscriberTerms = subscriberTerms;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse explicitUser(String explicitUser) {
    
    this.explicitUser = explicitUser;
    return this;
  }

   /**
   * Get explicitUser
   * @return explicitUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExplicitUser() {
    return explicitUser;
  }


  public void setExplicitUser(String explicitUser) {
    this.explicitUser = explicitUser;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse explicitPassword(ModelsKeyfactorAPISecret explicitPassword) {
    
    this.explicitPassword = explicitPassword;
    return this;
  }

   /**
   * Get explicitPassword
   * @return explicitPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelsKeyfactorAPISecret getExplicitPassword() {
    return explicitPassword;
  }


  public void setExplicitPassword(ModelsKeyfactorAPISecret explicitPassword) {
    this.explicitPassword = explicitPassword;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse useAllowedRequesters(Boolean useAllowedRequesters) {
    
    this.useAllowedRequesters = useAllowedRequesters;
    return this;
  }

   /**
   * Get useAllowedRequesters
   * @return useAllowedRequesters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseAllowedRequesters() {
    return useAllowedRequesters;
  }


  public void setUseAllowedRequesters(Boolean useAllowedRequesters) {
    this.useAllowedRequesters = useAllowedRequesters;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse allowedRequesters(List<String> allowedRequesters) {
    
    this.allowedRequesters = allowedRequesters;
    return this;
  }

  public ModelsCertificateAuthoritiesCertificateAuthorityResponse addAllowedRequestersItem(String allowedRequestersItem) {
    if (this.allowedRequesters == null) {
      this.allowedRequesters = new ArrayList<>();
    }
    this.allowedRequesters.add(allowedRequestersItem);
    return this;
  }

   /**
   * Get allowedRequesters
   * @return allowedRequesters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAllowedRequesters() {
    return allowedRequesters;
  }


  public void setAllowedRequesters(List<String> allowedRequesters) {
    this.allowedRequesters = allowedRequesters;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse fullScan(KeyfactorCommonSchedulingKeyfactorSchedule fullScan) {
    
    this.fullScan = fullScan;
    return this;
  }

   /**
   * Get fullScan
   * @return fullScan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingKeyfactorSchedule getFullScan() {
    return fullScan;
  }


  public void setFullScan(KeyfactorCommonSchedulingKeyfactorSchedule fullScan) {
    this.fullScan = fullScan;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse incrementalScan(KeyfactorCommonSchedulingKeyfactorSchedule incrementalScan) {
    
    this.incrementalScan = incrementalScan;
    return this;
  }

   /**
   * Get incrementalScan
   * @return incrementalScan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingKeyfactorSchedule getIncrementalScan() {
    return incrementalScan;
  }


  public void setIncrementalScan(KeyfactorCommonSchedulingKeyfactorSchedule incrementalScan) {
    this.incrementalScan = incrementalScan;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse thresholdCheck(KeyfactorCommonSchedulingKeyfactorSchedule thresholdCheck) {
    
    this.thresholdCheck = thresholdCheck;
    return this;
  }

   /**
   * Get thresholdCheck
   * @return thresholdCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorCommonSchedulingKeyfactorSchedule getThresholdCheck() {
    return thresholdCheck;
  }


  public void setThresholdCheck(KeyfactorCommonSchedulingKeyfactorSchedule thresholdCheck) {
    this.thresholdCheck = thresholdCheck;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse caType(CaTypeEnum caType) {
    
    this.caType = caType;
    return this;
  }

   /**
   * Get caType
   * @return caType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CaTypeEnum getCaType() {
    return caType;
  }


  public void setCaType(CaTypeEnum caType) {
    this.caType = caType;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse authCertificate(ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate authCertificate) {
    
    this.authCertificate = authCertificate;
    return this;
  }

   /**
   * Get authCertificate
   * @return authCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate getAuthCertificate() {
    return authCertificate;
  }


  public void setAuthCertificate(ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate authCertificate) {
    this.authCertificate = authCertificate;
  }


  public ModelsCertificateAuthoritiesCertificateAuthorityResponse enforceUniqueDN(Boolean enforceUniqueDN) {
    
    this.enforceUniqueDN = enforceUniqueDN;
    return this;
  }

   /**
   * Get enforceUniqueDN
   * @return enforceUniqueDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnforceUniqueDN() {
    return enforceUniqueDN;
  }


  public void setEnforceUniqueDN(Boolean enforceUniqueDN) {
    this.enforceUniqueDN = enforceUniqueDN;
  }


   /**
   * Get lastScan
   * @return lastScan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastScan() {
    return lastScan;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCertificateAuthoritiesCertificateAuthorityResponse modelsCertificateAuthoritiesCertificateAuthorityResponse = (ModelsCertificateAuthoritiesCertificateAuthorityResponse) o;
    return Objects.equals(this.id, modelsCertificateAuthoritiesCertificateAuthorityResponse.id) &&
        Objects.equals(this.logicalName, modelsCertificateAuthoritiesCertificateAuthorityResponse.logicalName) &&
        Objects.equals(this.hostName, modelsCertificateAuthoritiesCertificateAuthorityResponse.hostName) &&
        Objects.equals(this.delegate, modelsCertificateAuthoritiesCertificateAuthorityResponse.delegate) &&
        Objects.equals(this.delegateEnrollment, modelsCertificateAuthoritiesCertificateAuthorityResponse.delegateEnrollment) &&
        Objects.equals(this.forestRoot, modelsCertificateAuthoritiesCertificateAuthorityResponse.forestRoot) &&
        Objects.equals(this.configurationTenant, modelsCertificateAuthoritiesCertificateAuthorityResponse.configurationTenant) &&
        Objects.equals(this.remote, modelsCertificateAuthoritiesCertificateAuthorityResponse.remote) &&
        Objects.equals(this.agent, modelsCertificateAuthoritiesCertificateAuthorityResponse.agent) &&
        Objects.equals(this.standalone, modelsCertificateAuthoritiesCertificateAuthorityResponse.standalone) &&
        Objects.equals(this.monitorThresholds, modelsCertificateAuthoritiesCertificateAuthorityResponse.monitorThresholds) &&
        Objects.equals(this.issuanceMax, modelsCertificateAuthoritiesCertificateAuthorityResponse.issuanceMax) &&
        Objects.equals(this.issuanceMin, modelsCertificateAuthoritiesCertificateAuthorityResponse.issuanceMin) &&
        Objects.equals(this.denialMax, modelsCertificateAuthoritiesCertificateAuthorityResponse.denialMax) &&
        Objects.equals(this.failureMax, modelsCertificateAuthoritiesCertificateAuthorityResponse.failureMax) &&
        Objects.equals(this.rfCEnforcement, modelsCertificateAuthoritiesCertificateAuthorityResponse.rfCEnforcement) &&
        Objects.equals(this.properties, modelsCertificateAuthoritiesCertificateAuthorityResponse.properties) &&
        Objects.equals(this.allowedEnrollmentTypes, modelsCertificateAuthoritiesCertificateAuthorityResponse.allowedEnrollmentTypes) &&
        Objects.equals(this.keyRetention, modelsCertificateAuthoritiesCertificateAuthorityResponse.keyRetention) &&
        Objects.equals(this.keyRetentionDays, modelsCertificateAuthoritiesCertificateAuthorityResponse.keyRetentionDays) &&
        Objects.equals(this.explicitCredentials, modelsCertificateAuthoritiesCertificateAuthorityResponse.explicitCredentials) &&
        Objects.equals(this.subscriberTerms, modelsCertificateAuthoritiesCertificateAuthorityResponse.subscriberTerms) &&
        Objects.equals(this.explicitUser, modelsCertificateAuthoritiesCertificateAuthorityResponse.explicitUser) &&
        Objects.equals(this.explicitPassword, modelsCertificateAuthoritiesCertificateAuthorityResponse.explicitPassword) &&
        Objects.equals(this.useAllowedRequesters, modelsCertificateAuthoritiesCertificateAuthorityResponse.useAllowedRequesters) &&
        Objects.equals(this.allowedRequesters, modelsCertificateAuthoritiesCertificateAuthorityResponse.allowedRequesters) &&
        Objects.equals(this.fullScan, modelsCertificateAuthoritiesCertificateAuthorityResponse.fullScan) &&
        Objects.equals(this.incrementalScan, modelsCertificateAuthoritiesCertificateAuthorityResponse.incrementalScan) &&
        Objects.equals(this.thresholdCheck, modelsCertificateAuthoritiesCertificateAuthorityResponse.thresholdCheck) &&
        Objects.equals(this.caType, modelsCertificateAuthoritiesCertificateAuthorityResponse.caType) &&
        Objects.equals(this.authCertificate, modelsCertificateAuthoritiesCertificateAuthorityResponse.authCertificate) &&
        Objects.equals(this.enforceUniqueDN, modelsCertificateAuthoritiesCertificateAuthorityResponse.enforceUniqueDN) &&
        Objects.equals(this.lastScan, modelsCertificateAuthoritiesCertificateAuthorityResponse.lastScan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, logicalName, hostName, delegate, delegateEnrollment, forestRoot, configurationTenant, remote, agent, standalone, monitorThresholds, issuanceMax, issuanceMin, denialMax, failureMax, rfCEnforcement, properties, allowedEnrollmentTypes, keyRetention, keyRetentionDays, explicitCredentials, subscriberTerms, explicitUser, explicitPassword, useAllowedRequesters, allowedRequesters, fullScan, incrementalScan, thresholdCheck, caType, authCertificate, enforceUniqueDN, lastScan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCertificateAuthoritiesCertificateAuthorityResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logicalName: ").append(toIndentedString(logicalName)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    delegate: ").append(toIndentedString(delegate)).append("\n");
    sb.append("    delegateEnrollment: ").append(toIndentedString(delegateEnrollment)).append("\n");
    sb.append("    forestRoot: ").append(toIndentedString(forestRoot)).append("\n");
    sb.append("    configurationTenant: ").append(toIndentedString(configurationTenant)).append("\n");
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    standalone: ").append(toIndentedString(standalone)).append("\n");
    sb.append("    monitorThresholds: ").append(toIndentedString(monitorThresholds)).append("\n");
    sb.append("    issuanceMax: ").append(toIndentedString(issuanceMax)).append("\n");
    sb.append("    issuanceMin: ").append(toIndentedString(issuanceMin)).append("\n");
    sb.append("    denialMax: ").append(toIndentedString(denialMax)).append("\n");
    sb.append("    failureMax: ").append(toIndentedString(failureMax)).append("\n");
    sb.append("    rfCEnforcement: ").append(toIndentedString(rfCEnforcement)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    allowedEnrollmentTypes: ").append(toIndentedString(allowedEnrollmentTypes)).append("\n");
    sb.append("    keyRetention: ").append(toIndentedString(keyRetention)).append("\n");
    sb.append("    keyRetentionDays: ").append(toIndentedString(keyRetentionDays)).append("\n");
    sb.append("    explicitCredentials: ").append(toIndentedString(explicitCredentials)).append("\n");
    sb.append("    subscriberTerms: ").append(toIndentedString(subscriberTerms)).append("\n");
    sb.append("    explicitUser: ").append(toIndentedString(explicitUser)).append("\n");
    sb.append("    explicitPassword: ").append(toIndentedString(explicitPassword)).append("\n");
    sb.append("    useAllowedRequesters: ").append(toIndentedString(useAllowedRequesters)).append("\n");
    sb.append("    allowedRequesters: ").append(toIndentedString(allowedRequesters)).append("\n");
    sb.append("    fullScan: ").append(toIndentedString(fullScan)).append("\n");
    sb.append("    incrementalScan: ").append(toIndentedString(incrementalScan)).append("\n");
    sb.append("    thresholdCheck: ").append(toIndentedString(thresholdCheck)).append("\n");
    sb.append("    caType: ").append(toIndentedString(caType)).append("\n");
    sb.append("    authCertificate: ").append(toIndentedString(authCertificate)).append("\n");
    sb.append("    enforceUniqueDN: ").append(toIndentedString(enforceUniqueDN)).append("\n");
    sb.append("    lastScan: ").append(toIndentedString(lastScan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("LogicalName");
    openapiFields.add("HostName");
    openapiFields.add("Delegate");
    openapiFields.add("DelegateEnrollment");
    openapiFields.add("ForestRoot");
    openapiFields.add("ConfigurationTenant");
    openapiFields.add("Remote");
    openapiFields.add("Agent");
    openapiFields.add("Standalone");
    openapiFields.add("MonitorThresholds");
    openapiFields.add("IssuanceMax");
    openapiFields.add("IssuanceMin");
    openapiFields.add("DenialMax");
    openapiFields.add("FailureMax");
    openapiFields.add("RFCEnforcement");
    openapiFields.add("Properties");
    openapiFields.add("AllowedEnrollmentTypes");
    openapiFields.add("KeyRetention");
    openapiFields.add("KeyRetentionDays");
    openapiFields.add("ExplicitCredentials");
    openapiFields.add("SubscriberTerms");
    openapiFields.add("ExplicitUser");
    openapiFields.add("ExplicitPassword");
    openapiFields.add("UseAllowedRequesters");
    openapiFields.add("AllowedRequesters");
    openapiFields.add("FullScan");
    openapiFields.add("IncrementalScan");
    openapiFields.add("ThresholdCheck");
    openapiFields.add("CAType");
    openapiFields.add("AuthCertificate");
    openapiFields.add("EnforceUniqueDN");
    openapiFields.add("LastScan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsCertificateAuthoritiesCertificateAuthorityResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsCertificateAuthoritiesCertificateAuthorityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCertificateAuthoritiesCertificateAuthorityResponse is not found in the empty JSON string", ModelsCertificateAuthoritiesCertificateAuthorityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsCertificateAuthoritiesCertificateAuthorityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCertificateAuthoritiesCertificateAuthorityResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("LogicalName") != null && !jsonObj.get("LogicalName").isJsonNull()) && !jsonObj.get("LogicalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogicalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogicalName").toString()));
      }
      if ((jsonObj.get("HostName") != null && !jsonObj.get("HostName").isJsonNull()) && !jsonObj.get("HostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HostName").toString()));
      }
      if ((jsonObj.get("ForestRoot") != null && !jsonObj.get("ForestRoot").isJsonNull()) && !jsonObj.get("ForestRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ForestRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ForestRoot").toString()));
      }
      if ((jsonObj.get("ConfigurationTenant") != null && !jsonObj.get("ConfigurationTenant").isJsonNull()) && !jsonObj.get("ConfigurationTenant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigurationTenant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigurationTenant").toString()));
      }
      if ((jsonObj.get("Agent") != null && !jsonObj.get("Agent").isJsonNull()) && !jsonObj.get("Agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Agent").toString()));
      }
      if ((jsonObj.get("Properties") != null && !jsonObj.get("Properties").isJsonNull()) && !jsonObj.get("Properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Properties").toString()));
      }
      if ((jsonObj.get("ExplicitUser") != null && !jsonObj.get("ExplicitUser").isJsonNull()) && !jsonObj.get("ExplicitUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExplicitUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExplicitUser").toString()));
      }
      // validate the optional field `ExplicitPassword`
      if (jsonObj.get("ExplicitPassword") != null && !jsonObj.get("ExplicitPassword").isJsonNull()) {
        ModelsKeyfactorAPISecret.validateJsonObject(jsonObj.getAsJsonObject("ExplicitPassword"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AllowedRequesters") != null && !jsonObj.get("AllowedRequesters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowedRequesters` to be an array in the JSON string but got `%s`", jsonObj.get("AllowedRequesters").toString()));
      }
      // validate the optional field `FullScan`
      if (jsonObj.get("FullScan") != null && !jsonObj.get("FullScan").isJsonNull()) {
        KeyfactorCommonSchedulingKeyfactorSchedule.validateJsonObject(jsonObj.getAsJsonObject("FullScan"));
      }
      // validate the optional field `IncrementalScan`
      if (jsonObj.get("IncrementalScan") != null && !jsonObj.get("IncrementalScan").isJsonNull()) {
        KeyfactorCommonSchedulingKeyfactorSchedule.validateJsonObject(jsonObj.getAsJsonObject("IncrementalScan"));
      }
      // validate the optional field `ThresholdCheck`
      if (jsonObj.get("ThresholdCheck") != null && !jsonObj.get("ThresholdCheck").isJsonNull()) {
        KeyfactorCommonSchedulingKeyfactorSchedule.validateJsonObject(jsonObj.getAsJsonObject("ThresholdCheck"));
      }
      // validate the optional field `AuthCertificate`
      if (jsonObj.get("AuthCertificate") != null && !jsonObj.get("AuthCertificate").isJsonNull()) {
        ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate.validateJsonObject(jsonObj.getAsJsonObject("AuthCertificate"));
      }
      if ((jsonObj.get("LastScan") != null && !jsonObj.get("LastScan").isJsonNull()) && !jsonObj.get("LastScan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastScan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastScan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCertificateAuthoritiesCertificateAuthorityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCertificateAuthoritiesCertificateAuthorityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCertificateAuthoritiesCertificateAuthorityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCertificateAuthoritiesCertificateAuthorityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCertificateAuthoritiesCertificateAuthorityResponse>() {
           @Override
           public void write(JsonWriter out, ModelsCertificateAuthoritiesCertificateAuthorityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCertificateAuthoritiesCertificateAuthorityResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsCertificateAuthoritiesCertificateAuthorityResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsCertificateAuthoritiesCertificateAuthorityResponse
  * @throws IOException if the JSON string is invalid with respect to ModelsCertificateAuthoritiesCertificateAuthorityResponse
  */
  public static ModelsCertificateAuthoritiesCertificateAuthorityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCertificateAuthoritiesCertificateAuthorityResponse.class);
  }

 /**
  * Convert an instance of ModelsCertificateAuthoritiesCertificateAuthorityResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

