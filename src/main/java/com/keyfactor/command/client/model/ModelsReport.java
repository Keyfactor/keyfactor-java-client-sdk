/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.ModelsReportParameters;
import com.keyfactor.command.client.model.ModelsReportSchedule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsReport {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SCHEDULED = "Scheduled";
  @SerializedName(SERIALIZED_NAME_SCHEDULED)
  private Integer scheduled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REPORT_PATH = "ReportPath";
  @SerializedName(SERIALIZED_NAME_REPORT_PATH)
  private String reportPath;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "VersionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private String versionNumber;

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private String categories;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_IN_NAVIGATOR = "InNavigator";
  @SerializedName(SERIALIZED_NAME_IN_NAVIGATOR)
  private Boolean inNavigator;

  public static final String SERIALIZED_NAME_FAVORITE = "Favorite";
  @SerializedName(SERIALIZED_NAME_FAVORITE)
  private Boolean favorite;

  public static final String SERIALIZED_NAME_REMOVE_DUPLICATES = "RemoveDuplicates";
  @SerializedName(SERIALIZED_NAME_REMOVE_DUPLICATES)
  private Boolean removeDuplicates;

  public static final String SERIALIZED_NAME_USES_COLLECTION = "UsesCollection";
  @SerializedName(SERIALIZED_NAME_USES_COLLECTION)
  private Boolean usesCollection;

  public static final String SERIALIZED_NAME_REPORT_PARAMETER = "ReportParameter";
  @SerializedName(SERIALIZED_NAME_REPORT_PARAMETER)
  private List<ModelsReportParameters> reportParameter = null;

  public static final String SERIALIZED_NAME_SCHEDULES = "Schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List<ModelsReportSchedule> schedules = null;

  public static final String SERIALIZED_NAME_ACCEPTED_SCHEDULE_FORMATS = "AcceptedScheduleFormats";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_SCHEDULE_FORMATS)
  private List<String> acceptedScheduleFormats = null;

  public ModelsReport() {
  }

  public ModelsReport id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ModelsReport scheduled(Integer scheduled) {
    
    this.scheduled = scheduled;
    return this;
  }

   /**
   * Get scheduled
   * @return scheduled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getScheduled() {
    return scheduled;
  }


  public void setScheduled(Integer scheduled) {
    this.scheduled = scheduled;
  }


  public ModelsReport displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ModelsReport description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ModelsReport reportPath(String reportPath) {
    
    this.reportPath = reportPath;
    return this;
  }

   /**
   * Get reportPath
   * @return reportPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReportPath() {
    return reportPath;
  }


  public void setReportPath(String reportPath) {
    this.reportPath = reportPath;
  }


  public ModelsReport versionNumber(String versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
  }


  public ModelsReport categories(String categories) {
    
    this.categories = categories;
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCategories() {
    return categories;
  }


  public void setCategories(String categories) {
    this.categories = categories;
  }


  public ModelsReport shortName(String shortName) {
    
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShortName() {
    return shortName;
  }


  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public ModelsReport inNavigator(Boolean inNavigator) {
    
    this.inNavigator = inNavigator;
    return this;
  }

   /**
   * Get inNavigator
   * @return inNavigator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInNavigator() {
    return inNavigator;
  }


  public void setInNavigator(Boolean inNavigator) {
    this.inNavigator = inNavigator;
  }


  public ModelsReport favorite(Boolean favorite) {
    
    this.favorite = favorite;
    return this;
  }

   /**
   * Get favorite
   * @return favorite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFavorite() {
    return favorite;
  }


  public void setFavorite(Boolean favorite) {
    this.favorite = favorite;
  }


  public ModelsReport removeDuplicates(Boolean removeDuplicates) {
    
    this.removeDuplicates = removeDuplicates;
    return this;
  }

   /**
   * Get removeDuplicates
   * @return removeDuplicates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRemoveDuplicates() {
    return removeDuplicates;
  }


  public void setRemoveDuplicates(Boolean removeDuplicates) {
    this.removeDuplicates = removeDuplicates;
  }


  public ModelsReport usesCollection(Boolean usesCollection) {
    
    this.usesCollection = usesCollection;
    return this;
  }

   /**
   * Get usesCollection
   * @return usesCollection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUsesCollection() {
    return usesCollection;
  }


  public void setUsesCollection(Boolean usesCollection) {
    this.usesCollection = usesCollection;
  }


  public ModelsReport reportParameter(List<ModelsReportParameters> reportParameter) {
    
    this.reportParameter = reportParameter;
    return this;
  }

  public ModelsReport addReportParameterItem(ModelsReportParameters reportParameterItem) {
    if (this.reportParameter == null) {
      this.reportParameter = new ArrayList<>();
    }
    this.reportParameter.add(reportParameterItem);
    return this;
  }

   /**
   * Get reportParameter
   * @return reportParameter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsReportParameters> getReportParameter() {
    return reportParameter;
  }


  public void setReportParameter(List<ModelsReportParameters> reportParameter) {
    this.reportParameter = reportParameter;
  }


  public ModelsReport schedules(List<ModelsReportSchedule> schedules) {
    
    this.schedules = schedules;
    return this;
  }

  public ModelsReport addSchedulesItem(ModelsReportSchedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

   /**
   * Get schedules
   * @return schedules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ModelsReportSchedule> getSchedules() {
    return schedules;
  }


  public void setSchedules(List<ModelsReportSchedule> schedules) {
    this.schedules = schedules;
  }


  public ModelsReport acceptedScheduleFormats(List<String> acceptedScheduleFormats) {
    
    this.acceptedScheduleFormats = acceptedScheduleFormats;
    return this;
  }

  public ModelsReport addAcceptedScheduleFormatsItem(String acceptedScheduleFormatsItem) {
    if (this.acceptedScheduleFormats == null) {
      this.acceptedScheduleFormats = new ArrayList<>();
    }
    this.acceptedScheduleFormats.add(acceptedScheduleFormatsItem);
    return this;
  }

   /**
   * Get acceptedScheduleFormats
   * @return acceptedScheduleFormats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAcceptedScheduleFormats() {
    return acceptedScheduleFormats;
  }


  public void setAcceptedScheduleFormats(List<String> acceptedScheduleFormats) {
    this.acceptedScheduleFormats = acceptedScheduleFormats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsReport modelsReport = (ModelsReport) o;
    return Objects.equals(this.id, modelsReport.id) &&
        Objects.equals(this.scheduled, modelsReport.scheduled) &&
        Objects.equals(this.displayName, modelsReport.displayName) &&
        Objects.equals(this.description, modelsReport.description) &&
        Objects.equals(this.reportPath, modelsReport.reportPath) &&
        Objects.equals(this.versionNumber, modelsReport.versionNumber) &&
        Objects.equals(this.categories, modelsReport.categories) &&
        Objects.equals(this.shortName, modelsReport.shortName) &&
        Objects.equals(this.inNavigator, modelsReport.inNavigator) &&
        Objects.equals(this.favorite, modelsReport.favorite) &&
        Objects.equals(this.removeDuplicates, modelsReport.removeDuplicates) &&
        Objects.equals(this.usesCollection, modelsReport.usesCollection) &&
        Objects.equals(this.reportParameter, modelsReport.reportParameter) &&
        Objects.equals(this.schedules, modelsReport.schedules) &&
        Objects.equals(this.acceptedScheduleFormats, modelsReport.acceptedScheduleFormats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, scheduled, displayName, description, reportPath, versionNumber, categories, shortName, inNavigator, favorite, removeDuplicates, usesCollection, reportParameter, schedules, acceptedScheduleFormats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsReport {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scheduled: ").append(toIndentedString(scheduled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    reportPath: ").append(toIndentedString(reportPath)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    inNavigator: ").append(toIndentedString(inNavigator)).append("\n");
    sb.append("    favorite: ").append(toIndentedString(favorite)).append("\n");
    sb.append("    removeDuplicates: ").append(toIndentedString(removeDuplicates)).append("\n");
    sb.append("    usesCollection: ").append(toIndentedString(usesCollection)).append("\n");
    sb.append("    reportParameter: ").append(toIndentedString(reportParameter)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    acceptedScheduleFormats: ").append(toIndentedString(acceptedScheduleFormats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Scheduled");
    openapiFields.add("DisplayName");
    openapiFields.add("Description");
    openapiFields.add("ReportPath");
    openapiFields.add("VersionNumber");
    openapiFields.add("Categories");
    openapiFields.add("ShortName");
    openapiFields.add("InNavigator");
    openapiFields.add("Favorite");
    openapiFields.add("RemoveDuplicates");
    openapiFields.add("UsesCollection");
    openapiFields.add("ReportParameter");
    openapiFields.add("Schedules");
    openapiFields.add("AcceptedScheduleFormats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsReport is not found in the empty JSON string", ModelsReport.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsReport` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ReportPath") != null && !jsonObj.get("ReportPath").isJsonNull()) && !jsonObj.get("ReportPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportPath").toString()));
      }
      if ((jsonObj.get("VersionNumber") != null && !jsonObj.get("VersionNumber").isJsonNull()) && !jsonObj.get("VersionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VersionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VersionNumber").toString()));
      }
      if ((jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) && !jsonObj.get("Categories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Categories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Categories").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if (jsonObj.get("ReportParameter") != null && !jsonObj.get("ReportParameter").isJsonNull()) {
        JsonArray jsonArrayreportParameter = jsonObj.getAsJsonArray("ReportParameter");
        if (jsonArrayreportParameter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReportParameter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReportParameter` to be an array in the JSON string but got `%s`", jsonObj.get("ReportParameter").toString()));
          }

          // validate the optional field `ReportParameter` (array)
          for (int i = 0; i < jsonArrayreportParameter.size(); i++) {
            ModelsReportParameters.validateJsonObject(jsonArrayreportParameter.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Schedules") != null && !jsonObj.get("Schedules").isJsonNull()) {
        JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("Schedules");
        if (jsonArrayschedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Schedules` to be an array in the JSON string but got `%s`", jsonObj.get("Schedules").toString()));
          }

          // validate the optional field `Schedules` (array)
          for (int i = 0; i < jsonArrayschedules.size(); i++) {
            ModelsReportSchedule.validateJsonObject(jsonArrayschedules.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AcceptedScheduleFormats") != null && !jsonObj.get("AcceptedScheduleFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AcceptedScheduleFormats` to be an array in the JSON string but got `%s`", jsonObj.get("AcceptedScheduleFormats").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsReport>() {
           @Override
           public void write(JsonWriter out, ModelsReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsReport
  * @throws IOException if the JSON string is invalid with respect to ModelsReport
  */
  public static ModelsReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsReport.class);
  }

 /**
  * Convert an instance of ModelsReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

