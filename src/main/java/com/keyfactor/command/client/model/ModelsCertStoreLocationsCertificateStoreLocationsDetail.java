/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsCertStoreLocationsCertificateStoreLocationsDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsCertStoreLocationsCertificateStoreLocationsDetail {
  public static final String SERIALIZED_NAME_STORE_ID = "StoreId";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private UUID storeId;

  public static final String SERIALIZED_NAME_STORE_TYPE_ID = "StoreTypeId";
  @SerializedName(SERIALIZED_NAME_STORE_TYPE_ID)
  private Integer storeTypeId;

  public static final String SERIALIZED_NAME_CLIENT_MACHINE = "ClientMachine";
  @SerializedName(SERIALIZED_NAME_CLIENT_MACHINE)
  private String clientMachine;

  public static final String SERIALIZED_NAME_STORE_PATH = "StorePath";
  @SerializedName(SERIALIZED_NAME_STORE_PATH)
  private String storePath;

  public static final String SERIALIZED_NAME_AGENT_POOL = "AgentPool";
  @SerializedName(SERIALIZED_NAME_AGENT_POOL)
  private String agentPool;

  public static final String SERIALIZED_NAME_ALIAS = "Alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IPAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_NETWORK_NAME = "NetworkName";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAME)
  private String networkName;

  public ModelsCertStoreLocationsCertificateStoreLocationsDetail() {
  }

  public ModelsCertStoreLocationsCertificateStoreLocationsDetail storeId(UUID storeId) {
    
    this.storeId = storeId;
    return this;
  }

   /**
   * Get storeId
   * @return storeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getStoreId() {
    return storeId;
  }


  public void setStoreId(UUID storeId) {
    this.storeId = storeId;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail storeTypeId(Integer storeTypeId) {
    
    this.storeTypeId = storeTypeId;
    return this;
  }

   /**
   * Get storeTypeId
   * @return storeTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStoreTypeId() {
    return storeTypeId;
  }


  public void setStoreTypeId(Integer storeTypeId) {
    this.storeTypeId = storeTypeId;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail clientMachine(String clientMachine) {
    
    this.clientMachine = clientMachine;
    return this;
  }

   /**
   * Get clientMachine
   * @return clientMachine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientMachine() {
    return clientMachine;
  }


  public void setClientMachine(String clientMachine) {
    this.clientMachine = clientMachine;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail storePath(String storePath) {
    
    this.storePath = storePath;
    return this;
  }

   /**
   * Get storePath
   * @return storePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStorePath() {
    return storePath;
  }


  public void setStorePath(String storePath) {
    this.storePath = storePath;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail agentPool(String agentPool) {
    
    this.agentPool = agentPool;
    return this;
  }

   /**
   * Get agentPool
   * @return agentPool
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAgentPool() {
    return agentPool;
  }


  public void setAgentPool(String agentPool) {
    this.agentPool = agentPool;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * Get alias
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public ModelsCertStoreLocationsCertificateStoreLocationsDetail networkName(String networkName) {
    
    this.networkName = networkName;
    return this;
  }

   /**
   * Get networkName
   * @return networkName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNetworkName() {
    return networkName;
  }


  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsCertStoreLocationsCertificateStoreLocationsDetail modelsCertStoreLocationsCertificateStoreLocationsDetail = (ModelsCertStoreLocationsCertificateStoreLocationsDetail) o;
    return Objects.equals(this.storeId, modelsCertStoreLocationsCertificateStoreLocationsDetail.storeId) &&
        Objects.equals(this.storeTypeId, modelsCertStoreLocationsCertificateStoreLocationsDetail.storeTypeId) &&
        Objects.equals(this.clientMachine, modelsCertStoreLocationsCertificateStoreLocationsDetail.clientMachine) &&
        Objects.equals(this.storePath, modelsCertStoreLocationsCertificateStoreLocationsDetail.storePath) &&
        Objects.equals(this.agentPool, modelsCertStoreLocationsCertificateStoreLocationsDetail.agentPool) &&
        Objects.equals(this.alias, modelsCertStoreLocationsCertificateStoreLocationsDetail.alias) &&
        Objects.equals(this.ipAddress, modelsCertStoreLocationsCertificateStoreLocationsDetail.ipAddress) &&
        Objects.equals(this.port, modelsCertStoreLocationsCertificateStoreLocationsDetail.port) &&
        Objects.equals(this.networkName, modelsCertStoreLocationsCertificateStoreLocationsDetail.networkName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storeId, storeTypeId, clientMachine, storePath, agentPool, alias, ipAddress, port, networkName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsCertStoreLocationsCertificateStoreLocationsDetail {\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    storeTypeId: ").append(toIndentedString(storeTypeId)).append("\n");
    sb.append("    clientMachine: ").append(toIndentedString(clientMachine)).append("\n");
    sb.append("    storePath: ").append(toIndentedString(storePath)).append("\n");
    sb.append("    agentPool: ").append(toIndentedString(agentPool)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StoreId");
    openapiFields.add("StoreTypeId");
    openapiFields.add("ClientMachine");
    openapiFields.add("StorePath");
    openapiFields.add("AgentPool");
    openapiFields.add("Alias");
    openapiFields.add("IPAddress");
    openapiFields.add("Port");
    openapiFields.add("NetworkName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsCertStoreLocationsCertificateStoreLocationsDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsCertStoreLocationsCertificateStoreLocationsDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsCertStoreLocationsCertificateStoreLocationsDetail is not found in the empty JSON string", ModelsCertStoreLocationsCertificateStoreLocationsDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsCertStoreLocationsCertificateStoreLocationsDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsCertStoreLocationsCertificateStoreLocationsDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("StoreId") != null && !jsonObj.get("StoreId").isJsonNull()) && !jsonObj.get("StoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StoreId").toString()));
      }
      if ((jsonObj.get("ClientMachine") != null && !jsonObj.get("ClientMachine").isJsonNull()) && !jsonObj.get("ClientMachine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientMachine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientMachine").toString()));
      }
      if ((jsonObj.get("StorePath") != null && !jsonObj.get("StorePath").isJsonNull()) && !jsonObj.get("StorePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StorePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StorePath").toString()));
      }
      if ((jsonObj.get("AgentPool") != null && !jsonObj.get("AgentPool").isJsonNull()) && !jsonObj.get("AgentPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentPool").toString()));
      }
      if ((jsonObj.get("Alias") != null && !jsonObj.get("Alias").isJsonNull()) && !jsonObj.get("Alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Alias").toString()));
      }
      if ((jsonObj.get("IPAddress") != null && !jsonObj.get("IPAddress").isJsonNull()) && !jsonObj.get("IPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IPAddress").toString()));
      }
      if ((jsonObj.get("NetworkName") != null && !jsonObj.get("NetworkName").isJsonNull()) && !jsonObj.get("NetworkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetworkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NetworkName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsCertStoreLocationsCertificateStoreLocationsDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsCertStoreLocationsCertificateStoreLocationsDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsCertStoreLocationsCertificateStoreLocationsDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsCertStoreLocationsCertificateStoreLocationsDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsCertStoreLocationsCertificateStoreLocationsDetail>() {
           @Override
           public void write(JsonWriter out, ModelsCertStoreLocationsCertificateStoreLocationsDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsCertStoreLocationsCertificateStoreLocationsDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsCertStoreLocationsCertificateStoreLocationsDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsCertStoreLocationsCertificateStoreLocationsDetail
  * @throws IOException if the JSON string is invalid with respect to ModelsCertStoreLocationsCertificateStoreLocationsDetail
  */
  public static ModelsCertStoreLocationsCertificateStoreLocationsDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsCertStoreLocationsCertificateStoreLocationsDetail.class);
  }

 /**
  * Convert an instance of ModelsCertStoreLocationsCertificateStoreLocationsDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

