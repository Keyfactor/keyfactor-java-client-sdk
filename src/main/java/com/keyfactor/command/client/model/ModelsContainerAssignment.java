/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsContainerAssignment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T12:22:19.679-07:00[America/Phoenix]")
public class ModelsContainerAssignment {
  public static final String SERIALIZED_NAME_CERT_STORE_CONTAINER_ID = "CertStoreContainerId";
  @SerializedName(SERIALIZED_NAME_CERT_STORE_CONTAINER_ID)
  private Integer certStoreContainerId;

  public static final String SERIALIZED_NAME_NEW_CONTAINER_NAME = "NewContainerName";
  @SerializedName(SERIALIZED_NAME_NEW_CONTAINER_NAME)
  private String newContainerName;

  public static final String SERIALIZED_NAME_NEW_CONTAINER_TYPE = "NewContainerType";
  @SerializedName(SERIALIZED_NAME_NEW_CONTAINER_TYPE)
  private Integer newContainerType;

  public static final String SERIALIZED_NAME_KEYSTORE_IDS = "KeystoreIds";
  @SerializedName(SERIALIZED_NAME_KEYSTORE_IDS)
  private List<UUID> keystoreIds = new ArrayList<>();

  public ModelsContainerAssignment() {
  }

  public ModelsContainerAssignment certStoreContainerId(Integer certStoreContainerId) {
    
    this.certStoreContainerId = certStoreContainerId;
    return this;
  }

   /**
   * Get certStoreContainerId
   * @return certStoreContainerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCertStoreContainerId() {
    return certStoreContainerId;
  }


  public void setCertStoreContainerId(Integer certStoreContainerId) {
    this.certStoreContainerId = certStoreContainerId;
  }


  public ModelsContainerAssignment newContainerName(String newContainerName) {
    
    this.newContainerName = newContainerName;
    return this;
  }

   /**
   * Get newContainerName
   * @return newContainerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNewContainerName() {
    return newContainerName;
  }


  public void setNewContainerName(String newContainerName) {
    this.newContainerName = newContainerName;
  }


  public ModelsContainerAssignment newContainerType(Integer newContainerType) {
    
    this.newContainerType = newContainerType;
    return this;
  }

   /**
   * Get newContainerType
   * @return newContainerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNewContainerType() {
    return newContainerType;
  }


  public void setNewContainerType(Integer newContainerType) {
    this.newContainerType = newContainerType;
  }


  public ModelsContainerAssignment keystoreIds(List<UUID> keystoreIds) {
    
    this.keystoreIds = keystoreIds;
    return this;
  }

  public ModelsContainerAssignment addKeystoreIdsItem(UUID keystoreIdsItem) {
    this.keystoreIds.add(keystoreIdsItem);
    return this;
  }

   /**
   * Get keystoreIds
   * @return keystoreIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UUID> getKeystoreIds() {
    return keystoreIds;
  }


  public void setKeystoreIds(List<UUID> keystoreIds) {
    this.keystoreIds = keystoreIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsContainerAssignment modelsContainerAssignment = (ModelsContainerAssignment) o;
    return Objects.equals(this.certStoreContainerId, modelsContainerAssignment.certStoreContainerId) &&
        Objects.equals(this.newContainerName, modelsContainerAssignment.newContainerName) &&
        Objects.equals(this.newContainerType, modelsContainerAssignment.newContainerType) &&
        Objects.equals(this.keystoreIds, modelsContainerAssignment.keystoreIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certStoreContainerId, newContainerName, newContainerType, keystoreIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsContainerAssignment {\n");
    sb.append("    certStoreContainerId: ").append(toIndentedString(certStoreContainerId)).append("\n");
    sb.append("    newContainerName: ").append(toIndentedString(newContainerName)).append("\n");
    sb.append("    newContainerType: ").append(toIndentedString(newContainerType)).append("\n");
    sb.append("    keystoreIds: ").append(toIndentedString(keystoreIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertStoreContainerId");
    openapiFields.add("NewContainerName");
    openapiFields.add("NewContainerType");
    openapiFields.add("KeystoreIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("KeystoreIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsContainerAssignment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsContainerAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsContainerAssignment is not found in the empty JSON string", ModelsContainerAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsContainerAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsContainerAssignment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsContainerAssignment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("NewContainerName") != null && !jsonObj.get("NewContainerName").isJsonNull()) && !jsonObj.get("NewContainerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewContainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewContainerName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("KeystoreIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("KeystoreIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeystoreIds` to be an array in the JSON string but got `%s`", jsonObj.get("KeystoreIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsContainerAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsContainerAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsContainerAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsContainerAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsContainerAssignment>() {
           @Override
           public void write(JsonWriter out, ModelsContainerAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsContainerAssignment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsContainerAssignment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsContainerAssignment
  * @throws IOException if the JSON string is invalid with respect to ModelsContainerAssignment
  */
  public static ModelsContainerAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsContainerAssignment.class);
  }

 /**
  * Convert an instance of ModelsContainerAssignment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

