/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsPendingCSRResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsPendingCSRResponse {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_C_S_R = "CSR";
  @SerializedName(SERIALIZED_NAME_C_S_R)
  private String CSR;

  public static final String SERIALIZED_NAME_REQUEST_TIME = "RequestTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIME)
  private OffsetDateTime requestTime;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<String> subject = null;

  public ModelsPendingCSRResponse() {
  }

  public ModelsPendingCSRResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ModelsPendingCSRResponse CSR(String CSR) {
    
    this.CSR = CSR;
    return this;
  }

   /**
   * Get CSR
   * @return CSR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCSR() {
    return CSR;
  }


  public void setCSR(String CSR) {
    this.CSR = CSR;
  }


  public ModelsPendingCSRResponse requestTime(OffsetDateTime requestTime) {
    
    this.requestTime = requestTime;
    return this;
  }

   /**
   * Get requestTime
   * @return requestTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRequestTime() {
    return requestTime;
  }


  public void setRequestTime(OffsetDateTime requestTime) {
    this.requestTime = requestTime;
  }


  public ModelsPendingCSRResponse subject(List<String> subject) {
    
    this.subject = subject;
    return this;
  }

  public ModelsPendingCSRResponse addSubjectItem(String subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSubject() {
    return subject;
  }


  public void setSubject(List<String> subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsPendingCSRResponse modelsPendingCSRResponse = (ModelsPendingCSRResponse) o;
    return Objects.equals(this.id, modelsPendingCSRResponse.id) &&
        Objects.equals(this.CSR, modelsPendingCSRResponse.CSR) &&
        Objects.equals(this.requestTime, modelsPendingCSRResponse.requestTime) &&
        Objects.equals(this.subject, modelsPendingCSRResponse.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, CSR, requestTime, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsPendingCSRResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    CSR: ").append(toIndentedString(CSR)).append("\n");
    sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("CSR");
    openapiFields.add("RequestTime");
    openapiFields.add("Subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsPendingCSRResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsPendingCSRResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsPendingCSRResponse is not found in the empty JSON string", ModelsPendingCSRResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsPendingCSRResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsPendingCSRResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("CSR") != null && !jsonObj.get("CSR").isJsonNull()) && !jsonObj.get("CSR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CSR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CSR").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be an array in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsPendingCSRResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsPendingCSRResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsPendingCSRResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsPendingCSRResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsPendingCSRResponse>() {
           @Override
           public void write(JsonWriter out, ModelsPendingCSRResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsPendingCSRResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsPendingCSRResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsPendingCSRResponse
  * @throws IOException if the JSON string is invalid with respect to ModelsPendingCSRResponse
  */
  public static ModelsPendingCSRResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsPendingCSRResponse.class);
  }

 /**
  * Convert an instance of ModelsPendingCSRResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

