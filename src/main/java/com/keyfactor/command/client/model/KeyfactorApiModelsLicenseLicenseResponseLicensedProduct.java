/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorApiModelsLicenseLicenseResponseLicensedFeature;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class KeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
  public static final String SERIALIZED_NAME_PRODUCT_ID = "ProductId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MAJOR_REV = "MajorRev";
  @SerializedName(SERIALIZED_NAME_MAJOR_REV)
  private String majorRev;

  public static final String SERIALIZED_NAME_MINOR_REV = "MinorRev";
  @SerializedName(SERIALIZED_NAME_MINOR_REV)
  private String minorRev;

  public static final String SERIALIZED_NAME_LICENSED_FEATURES = "LicensedFeatures";
  @SerializedName(SERIALIZED_NAME_LICENSED_FEATURES)
  private List<KeyfactorApiModelsLicenseLicenseResponseLicensedFeature> licensedFeatures = null;

  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct() {
  }

  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct productId(String productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    this.productId = productId;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct majorRev(String majorRev) {
    
    this.majorRev = majorRev;
    return this;
  }

   /**
   * Get majorRev
   * @return majorRev
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMajorRev() {
    return majorRev;
  }


  public void setMajorRev(String majorRev) {
    this.majorRev = majorRev;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct minorRev(String minorRev) {
    
    this.minorRev = minorRev;
    return this;
  }

   /**
   * Get minorRev
   * @return minorRev
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMinorRev() {
    return minorRev;
  }


  public void setMinorRev(String minorRev) {
    this.minorRev = minorRev;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct licensedFeatures(List<KeyfactorApiModelsLicenseLicenseResponseLicensedFeature> licensedFeatures) {
    
    this.licensedFeatures = licensedFeatures;
    return this;
  }

  public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct addLicensedFeaturesItem(KeyfactorApiModelsLicenseLicenseResponseLicensedFeature licensedFeaturesItem) {
    if (this.licensedFeatures == null) {
      this.licensedFeatures = new ArrayList<>();
    }
    this.licensedFeatures.add(licensedFeaturesItem);
    return this;
  }

   /**
   * Get licensedFeatures
   * @return licensedFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<KeyfactorApiModelsLicenseLicenseResponseLicensedFeature> getLicensedFeatures() {
    return licensedFeatures;
  }


  public void setLicensedFeatures(List<KeyfactorApiModelsLicenseLicenseResponseLicensedFeature> licensedFeatures) {
    this.licensedFeatures = licensedFeatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsLicenseLicenseResponseLicensedProduct keyfactorApiModelsLicenseLicenseResponseLicensedProduct = (KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) o;
    return Objects.equals(this.productId, keyfactorApiModelsLicenseLicenseResponseLicensedProduct.productId) &&
        Objects.equals(this.displayName, keyfactorApiModelsLicenseLicenseResponseLicensedProduct.displayName) &&
        Objects.equals(this.majorRev, keyfactorApiModelsLicenseLicenseResponseLicensedProduct.majorRev) &&
        Objects.equals(this.minorRev, keyfactorApiModelsLicenseLicenseResponseLicensedProduct.minorRev) &&
        Objects.equals(this.licensedFeatures, keyfactorApiModelsLicenseLicenseResponseLicensedProduct.licensedFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productId, displayName, majorRev, minorRev, licensedFeatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsLicenseLicenseResponseLicensedProduct {\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    majorRev: ").append(toIndentedString(majorRev)).append("\n");
    sb.append("    minorRev: ").append(toIndentedString(minorRev)).append("\n");
    sb.append("    licensedFeatures: ").append(toIndentedString(licensedFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProductId");
    openapiFields.add("DisplayName");
    openapiFields.add("MajorRev");
    openapiFields.add("MinorRev");
    openapiFields.add("LicensedFeatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsLicenseLicenseResponseLicensedProduct is not found in the empty JSON string", KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsLicenseLicenseResponseLicensedProduct` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ProductId") != null && !jsonObj.get("ProductId").isJsonNull()) && !jsonObj.get("ProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductId").toString()));
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("MajorRev") != null && !jsonObj.get("MajorRev").isJsonNull()) && !jsonObj.get("MajorRev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MajorRev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MajorRev").toString()));
      }
      if ((jsonObj.get("MinorRev") != null && !jsonObj.get("MinorRev").isJsonNull()) && !jsonObj.get("MinorRev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinorRev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinorRev").toString()));
      }
      if (jsonObj.get("LicensedFeatures") != null && !jsonObj.get("LicensedFeatures").isJsonNull()) {
        JsonArray jsonArraylicensedFeatures = jsonObj.getAsJsonArray("LicensedFeatures");
        if (jsonArraylicensedFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LicensedFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LicensedFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("LicensedFeatures").toString()));
          }

          // validate the optional field `LicensedFeatures` (array)
          for (int i = 0; i < jsonArraylicensedFeatures.size(); i++) {
            KeyfactorApiModelsLicenseLicenseResponseLicensedFeature.validateJsonObject(jsonArraylicensedFeatures.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsLicenseLicenseResponseLicensedProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsLicenseLicenseResponseLicensedProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsLicenseLicenseResponseLicensedProduct>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsLicenseLicenseResponseLicensedProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsLicenseLicenseResponseLicensedProduct read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsLicenseLicenseResponseLicensedProduct given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
  */
  public static KeyfactorApiModelsLicenseLicenseResponseLicensedProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsLicenseLicenseResponseLicensedProduct to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

