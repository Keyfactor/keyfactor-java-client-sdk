/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsAlertsExpirationExpirationAlertResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T12:22:19.679-07:00[America/Phoenix]")
public class KeyfactorApiModelsAlertsExpirationExpirationAlertResponse {
  public static final String SERIALIZED_NAME_CA_NAME = "CAName";
  @SerializedName(SERIALIZED_NAME_CA_NAME)
  private String caName;

  public static final String SERIALIZED_NAME_CA_ROW = "CARow";
  @SerializedName(SERIALIZED_NAME_CA_ROW)
  private Long caRow;

  public static final String SERIALIZED_NAME_ISSUED_C_N = "IssuedCN";
  @SerializedName(SERIALIZED_NAME_ISSUED_C_N)
  private String issuedCN;

  public static final String SERIALIZED_NAME_EXPIRY = "Expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private String expiry;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RECIPIENTS = "Recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<String> recipients = null;

  public static final String SERIALIZED_NAME_SEND_DATE = "SendDate";
  @SerializedName(SERIALIZED_NAME_SEND_DATE)
  private String sendDate;

  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse() {
  }

  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse caName(String caName) {
    
    this.caName = caName;
    return this;
  }

   /**
   * Get caName
   * @return caName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCaName() {
    return caName;
  }


  public void setCaName(String caName) {
    this.caName = caName;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse caRow(Long caRow) {
    
    this.caRow = caRow;
    return this;
  }

   /**
   * Get caRow
   * @return caRow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getCaRow() {
    return caRow;
  }


  public void setCaRow(Long caRow) {
    this.caRow = caRow;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse issuedCN(String issuedCN) {
    
    this.issuedCN = issuedCN;
    return this;
  }

   /**
   * Get issuedCN
   * @return issuedCN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIssuedCN() {
    return issuedCN;
  }


  public void setIssuedCN(String issuedCN) {
    this.issuedCN = issuedCN;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse expiry(String expiry) {
    
    this.expiry = expiry;
    return this;
  }

   /**
   * Get expiry
   * @return expiry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExpiry() {
    return expiry;
  }


  public void setExpiry(String expiry) {
    this.expiry = expiry;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse recipients(List<String> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<String> recipients) {
    this.recipients = recipients;
  }


  public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse sendDate(String sendDate) {
    
    this.sendDate = sendDate;
    return this;
  }

   /**
   * Get sendDate
   * @return sendDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSendDate() {
    return sendDate;
  }


  public void setSendDate(String sendDate) {
    this.sendDate = sendDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsAlertsExpirationExpirationAlertResponse keyfactorApiModelsAlertsExpirationExpirationAlertResponse = (KeyfactorApiModelsAlertsExpirationExpirationAlertResponse) o;
    return Objects.equals(this.caName, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.caName) &&
        Objects.equals(this.caRow, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.caRow) &&
        Objects.equals(this.issuedCN, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.issuedCN) &&
        Objects.equals(this.expiry, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.expiry) &&
        Objects.equals(this.subject, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.subject) &&
        Objects.equals(this.message, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.message) &&
        Objects.equals(this.recipients, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.recipients) &&
        Objects.equals(this.sendDate, keyfactorApiModelsAlertsExpirationExpirationAlertResponse.sendDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(caName, caRow, issuedCN, expiry, subject, message, recipients, sendDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsAlertsExpirationExpirationAlertResponse {\n");
    sb.append("    caName: ").append(toIndentedString(caName)).append("\n");
    sb.append("    caRow: ").append(toIndentedString(caRow)).append("\n");
    sb.append("    issuedCN: ").append(toIndentedString(issuedCN)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CAName");
    openapiFields.add("CARow");
    openapiFields.add("IssuedCN");
    openapiFields.add("Expiry");
    openapiFields.add("Subject");
    openapiFields.add("Message");
    openapiFields.add("Recipients");
    openapiFields.add("SendDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsAlertsExpirationExpirationAlertResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsAlertsExpirationExpirationAlertResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsAlertsExpirationExpirationAlertResponse is not found in the empty JSON string", KeyfactorApiModelsAlertsExpirationExpirationAlertResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsAlertsExpirationExpirationAlertResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsAlertsExpirationExpirationAlertResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("CAName") != null && !jsonObj.get("CAName").isJsonNull()) && !jsonObj.get("CAName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAName").toString()));
      }
      if ((jsonObj.get("IssuedCN") != null && !jsonObj.get("IssuedCN").isJsonNull()) && !jsonObj.get("IssuedCN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssuedCN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssuedCN").toString()));
      }
      if ((jsonObj.get("Expiry") != null && !jsonObj.get("Expiry").isJsonNull()) && !jsonObj.get("Expiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Expiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Expiry").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Recipients") != null && !jsonObj.get("Recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Recipients` to be an array in the JSON string but got `%s`", jsonObj.get("Recipients").toString()));
      }
      if ((jsonObj.get("SendDate") != null && !jsonObj.get("SendDate").isJsonNull()) && !jsonObj.get("SendDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SendDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SendDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsAlertsExpirationExpirationAlertResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsAlertsExpirationExpirationAlertResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsAlertsExpirationExpirationAlertResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsAlertsExpirationExpirationAlertResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsAlertsExpirationExpirationAlertResponse>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsAlertsExpirationExpirationAlertResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsAlertsExpirationExpirationAlertResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsAlertsExpirationExpirationAlertResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsAlertsExpirationExpirationAlertResponse
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsAlertsExpirationExpirationAlertResponse
  */
  public static KeyfactorApiModelsAlertsExpirationExpirationAlertResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsAlertsExpirationExpirationAlertResponse.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsAlertsExpirationExpirationAlertResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

