/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.command.client.model.KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer;
import com.keyfactor.command.client.model.KeyfactorApiModelsLicenseLicenseResponseLicensedProduct;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * KeyfactorApiModelsLicenseLicenseResponseLicense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class KeyfactorApiModelsLicenseLicenseResponseLicense {
  public static final String SERIALIZED_NAME_LICENSE_ID = "LicenseId";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private String licenseId;

  public static final String SERIALIZED_NAME_CUSTOMER = "Customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer customer;

  public static final String SERIALIZED_NAME_ISSUED_DATE = "IssuedDate";
  @SerializedName(SERIALIZED_NAME_ISSUED_DATE)
  private OffsetDateTime issuedDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "ExpirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_LICENSED_PRODUCTS = "LicensedProducts";
  @SerializedName(SERIALIZED_NAME_LICENSED_PRODUCTS)
  private List<KeyfactorApiModelsLicenseLicenseResponseLicensedProduct> licensedProducts = null;

  public KeyfactorApiModelsLicenseLicenseResponseLicense() {
  }

  public KeyfactorApiModelsLicenseLicenseResponseLicense licenseId(String licenseId) {
    
    this.licenseId = licenseId;
    return this;
  }

   /**
   * Get licenseId
   * @return licenseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLicenseId() {
    return licenseId;
  }


  public void setLicenseId(String licenseId) {
    this.licenseId = licenseId;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicense customer(KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer customer) {
    this.customer = customer;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicense issuedDate(OffsetDateTime issuedDate) {
    
    this.issuedDate = issuedDate;
    return this;
  }

   /**
   * Get issuedDate
   * @return issuedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getIssuedDate() {
    return issuedDate;
  }


  public void setIssuedDate(OffsetDateTime issuedDate) {
    this.issuedDate = issuedDate;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicense expirationDate(OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public KeyfactorApiModelsLicenseLicenseResponseLicense licensedProducts(List<KeyfactorApiModelsLicenseLicenseResponseLicensedProduct> licensedProducts) {
    
    this.licensedProducts = licensedProducts;
    return this;
  }

  public KeyfactorApiModelsLicenseLicenseResponseLicense addLicensedProductsItem(KeyfactorApiModelsLicenseLicenseResponseLicensedProduct licensedProductsItem) {
    if (this.licensedProducts == null) {
      this.licensedProducts = new ArrayList<>();
    }
    this.licensedProducts.add(licensedProductsItem);
    return this;
  }

   /**
   * Get licensedProducts
   * @return licensedProducts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<KeyfactorApiModelsLicenseLicenseResponseLicensedProduct> getLicensedProducts() {
    return licensedProducts;
  }


  public void setLicensedProducts(List<KeyfactorApiModelsLicenseLicenseResponseLicensedProduct> licensedProducts) {
    this.licensedProducts = licensedProducts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyfactorApiModelsLicenseLicenseResponseLicense keyfactorApiModelsLicenseLicenseResponseLicense = (KeyfactorApiModelsLicenseLicenseResponseLicense) o;
    return Objects.equals(this.licenseId, keyfactorApiModelsLicenseLicenseResponseLicense.licenseId) &&
        Objects.equals(this.customer, keyfactorApiModelsLicenseLicenseResponseLicense.customer) &&
        Objects.equals(this.issuedDate, keyfactorApiModelsLicenseLicenseResponseLicense.issuedDate) &&
        Objects.equals(this.expirationDate, keyfactorApiModelsLicenseLicenseResponseLicense.expirationDate) &&
        Objects.equals(this.licensedProducts, keyfactorApiModelsLicenseLicenseResponseLicense.licensedProducts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseId, customer, issuedDate, expirationDate, licensedProducts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyfactorApiModelsLicenseLicenseResponseLicense {\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    issuedDate: ").append(toIndentedString(issuedDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    licensedProducts: ").append(toIndentedString(licensedProducts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseId");
    openapiFields.add("Customer");
    openapiFields.add("IssuedDate");
    openapiFields.add("ExpirationDate");
    openapiFields.add("LicensedProducts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyfactorApiModelsLicenseLicenseResponseLicense
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyfactorApiModelsLicenseLicenseResponseLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyfactorApiModelsLicenseLicenseResponseLicense is not found in the empty JSON string", KeyfactorApiModelsLicenseLicenseResponseLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyfactorApiModelsLicenseLicenseResponseLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyfactorApiModelsLicenseLicenseResponseLicense` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("LicenseId") != null && !jsonObj.get("LicenseId").isJsonNull()) && !jsonObj.get("LicenseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseId").toString()));
      }
      // validate the optional field `Customer`
      if (jsonObj.get("Customer") != null && !jsonObj.get("Customer").isJsonNull()) {
        KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer.validateJsonObject(jsonObj.getAsJsonObject("Customer"));
      }
      if (jsonObj.get("LicensedProducts") != null && !jsonObj.get("LicensedProducts").isJsonNull()) {
        JsonArray jsonArraylicensedProducts = jsonObj.getAsJsonArray("LicensedProducts");
        if (jsonArraylicensedProducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LicensedProducts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LicensedProducts` to be an array in the JSON string but got `%s`", jsonObj.get("LicensedProducts").toString()));
          }

          // validate the optional field `LicensedProducts` (array)
          for (int i = 0; i < jsonArraylicensedProducts.size(); i++) {
            KeyfactorApiModelsLicenseLicenseResponseLicensedProduct.validateJsonObject(jsonArraylicensedProducts.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyfactorApiModelsLicenseLicenseResponseLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyfactorApiModelsLicenseLicenseResponseLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyfactorApiModelsLicenseLicenseResponseLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyfactorApiModelsLicenseLicenseResponseLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyfactorApiModelsLicenseLicenseResponseLicense>() {
           @Override
           public void write(JsonWriter out, KeyfactorApiModelsLicenseLicenseResponseLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyfactorApiModelsLicenseLicenseResponseLicense read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyfactorApiModelsLicenseLicenseResponseLicense given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyfactorApiModelsLicenseLicenseResponseLicense
  * @throws IOException if the JSON string is invalid with respect to KeyfactorApiModelsLicenseLicenseResponseLicense
  */
  public static KeyfactorApiModelsLicenseLicenseResponseLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyfactorApiModelsLicenseLicenseResponseLicense.class);
  }

 /**
  * Convert an instance of KeyfactorApiModelsLicenseLicenseResponseLicense to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

