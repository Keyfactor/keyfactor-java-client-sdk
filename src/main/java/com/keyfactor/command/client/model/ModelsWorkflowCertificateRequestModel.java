/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsWorkflowCertificateRequestModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsWorkflowCertificateRequestModel {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CA_REQUEST_ID = "CARequestId";
  @SerializedName(SERIALIZED_NAME_CA_REQUEST_ID)
  private String caRequestId;

  public static final String SERIALIZED_NAME_COMMON_NAME = "CommonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_DISTINGUISHED_NAME = "DistinguishedName";
  @SerializedName(SERIALIZED_NAME_DISTINGUISHED_NAME)
  private String distinguishedName;

  public static final String SERIALIZED_NAME_SUBMISSION_DATE = "SubmissionDate";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_DATE)
  private OffsetDateTime submissionDate;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY = "CertificateAuthority";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY)
  private String certificateAuthority;

  public static final String SERIALIZED_NAME_TEMPLATE = "Template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_REQUESTER = "Requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private String requester;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8);

    private Integer value;

    StateEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(Integer value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_STRING = "StateString";
  @SerializedName(SERIALIZED_NAME_STATE_STRING)
  private String stateString;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public ModelsWorkflowCertificateRequestModel() {
  }

  
  public ModelsWorkflowCertificateRequestModel(
     String stateString
  ) {
    this();
    this.stateString = stateString;
  }

  public ModelsWorkflowCertificateRequestModel id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ModelsWorkflowCertificateRequestModel caRequestId(String caRequestId) {
    
    this.caRequestId = caRequestId;
    return this;
  }

   /**
   * Get caRequestId
   * @return caRequestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCaRequestId() {
    return caRequestId;
  }


  public void setCaRequestId(String caRequestId) {
    this.caRequestId = caRequestId;
  }


  public ModelsWorkflowCertificateRequestModel commonName(String commonName) {
    
    this.commonName = commonName;
    return this;
  }

   /**
   * Get commonName
   * @return commonName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCommonName() {
    return commonName;
  }


  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public ModelsWorkflowCertificateRequestModel distinguishedName(String distinguishedName) {
    
    this.distinguishedName = distinguishedName;
    return this;
  }

   /**
   * Get distinguishedName
   * @return distinguishedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDistinguishedName() {
    return distinguishedName;
  }


  public void setDistinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
  }


  public ModelsWorkflowCertificateRequestModel submissionDate(OffsetDateTime submissionDate) {
    
    this.submissionDate = submissionDate;
    return this;
  }

   /**
   * Get submissionDate
   * @return submissionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getSubmissionDate() {
    return submissionDate;
  }


  public void setSubmissionDate(OffsetDateTime submissionDate) {
    this.submissionDate = submissionDate;
  }


  public ModelsWorkflowCertificateRequestModel certificateAuthority(String certificateAuthority) {
    
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCertificateAuthority() {
    return certificateAuthority;
  }


  public void setCertificateAuthority(String certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }


  public ModelsWorkflowCertificateRequestModel template(String template) {
    
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemplate() {
    return template;
  }


  public void setTemplate(String template) {
    this.template = template;
  }


  public ModelsWorkflowCertificateRequestModel requester(String requester) {
    
    this.requester = requester;
    return this;
  }

   /**
   * Get requester
   * @return requester
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequester() {
    return requester;
  }


  public void setRequester(String requester) {
    this.requester = requester;
  }


  public ModelsWorkflowCertificateRequestModel state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


   /**
   * Get stateString
   * @return stateString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStateString() {
    return stateString;
  }




  public ModelsWorkflowCertificateRequestModel metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public ModelsWorkflowCertificateRequestModel putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsWorkflowCertificateRequestModel modelsWorkflowCertificateRequestModel = (ModelsWorkflowCertificateRequestModel) o;
    return Objects.equals(this.id, modelsWorkflowCertificateRequestModel.id) &&
        Objects.equals(this.caRequestId, modelsWorkflowCertificateRequestModel.caRequestId) &&
        Objects.equals(this.commonName, modelsWorkflowCertificateRequestModel.commonName) &&
        Objects.equals(this.distinguishedName, modelsWorkflowCertificateRequestModel.distinguishedName) &&
        Objects.equals(this.submissionDate, modelsWorkflowCertificateRequestModel.submissionDate) &&
        Objects.equals(this.certificateAuthority, modelsWorkflowCertificateRequestModel.certificateAuthority) &&
        Objects.equals(this.template, modelsWorkflowCertificateRequestModel.template) &&
        Objects.equals(this.requester, modelsWorkflowCertificateRequestModel.requester) &&
        Objects.equals(this.state, modelsWorkflowCertificateRequestModel.state) &&
        Objects.equals(this.stateString, modelsWorkflowCertificateRequestModel.stateString) &&
        Objects.equals(this.metadata, modelsWorkflowCertificateRequestModel.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, caRequestId, commonName, distinguishedName, submissionDate, certificateAuthority, template, requester, state, stateString, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsWorkflowCertificateRequestModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    caRequestId: ").append(toIndentedString(caRequestId)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    distinguishedName: ").append(toIndentedString(distinguishedName)).append("\n");
    sb.append("    submissionDate: ").append(toIndentedString(submissionDate)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateString: ").append(toIndentedString(stateString)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("CARequestId");
    openapiFields.add("CommonName");
    openapiFields.add("DistinguishedName");
    openapiFields.add("SubmissionDate");
    openapiFields.add("CertificateAuthority");
    openapiFields.add("Template");
    openapiFields.add("Requester");
    openapiFields.add("State");
    openapiFields.add("StateString");
    openapiFields.add("Metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsWorkflowCertificateRequestModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsWorkflowCertificateRequestModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsWorkflowCertificateRequestModel is not found in the empty JSON string", ModelsWorkflowCertificateRequestModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsWorkflowCertificateRequestModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsWorkflowCertificateRequestModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("CARequestId") != null && !jsonObj.get("CARequestId").isJsonNull()) && !jsonObj.get("CARequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CARequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CARequestId").toString()));
      }
      if ((jsonObj.get("CommonName") != null && !jsonObj.get("CommonName").isJsonNull()) && !jsonObj.get("CommonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommonName").toString()));
      }
      if ((jsonObj.get("DistinguishedName") != null && !jsonObj.get("DistinguishedName").isJsonNull()) && !jsonObj.get("DistinguishedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DistinguishedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DistinguishedName").toString()));
      }
      if ((jsonObj.get("CertificateAuthority") != null && !jsonObj.get("CertificateAuthority").isJsonNull()) && !jsonObj.get("CertificateAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateAuthority").toString()));
      }
      if ((jsonObj.get("Template") != null && !jsonObj.get("Template").isJsonNull()) && !jsonObj.get("Template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Template").toString()));
      }
      if ((jsonObj.get("Requester") != null && !jsonObj.get("Requester").isJsonNull()) && !jsonObj.get("Requester").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Requester` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Requester").toString()));
      }
      if ((jsonObj.get("StateString") != null && !jsonObj.get("StateString").isJsonNull()) && !jsonObj.get("StateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsWorkflowCertificateRequestModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsWorkflowCertificateRequestModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsWorkflowCertificateRequestModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsWorkflowCertificateRequestModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsWorkflowCertificateRequestModel>() {
           @Override
           public void write(JsonWriter out, ModelsWorkflowCertificateRequestModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsWorkflowCertificateRequestModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsWorkflowCertificateRequestModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsWorkflowCertificateRequestModel
  * @throws IOException if the JSON string is invalid with respect to ModelsWorkflowCertificateRequestModel
  */
  public static ModelsWorkflowCertificateRequestModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsWorkflowCertificateRequestModel.class);
  }

 /**
  * Convert an instance of ModelsWorkflowCertificateRequestModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

