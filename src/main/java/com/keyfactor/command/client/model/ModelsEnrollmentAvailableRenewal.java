/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsEnrollmentAvailableRenewal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:48:36.483-07:00[America/Phoenix]")
public class ModelsEnrollmentAvailableRenewal {
  /**
   * Gets or Sets availableRenewalType
   */
  @JsonAdapter(AvailableRenewalTypeEnum.Adapter.class)
  public enum AvailableRenewalTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    AvailableRenewalTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableRenewalTypeEnum fromValue(Integer value) {
      for (AvailableRenewalTypeEnum b : AvailableRenewalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailableRenewalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableRenewalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableRenewalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AvailableRenewalTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_RENEWAL_TYPE = "AvailableRenewalType";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_RENEWAL_TYPE)
  private AvailableRenewalTypeEnum availableRenewalType;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public ModelsEnrollmentAvailableRenewal() {
  }

  public ModelsEnrollmentAvailableRenewal availableRenewalType(AvailableRenewalTypeEnum availableRenewalType) {
    
    this.availableRenewalType = availableRenewalType;
    return this;
  }

   /**
   * Get availableRenewalType
   * @return availableRenewalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AvailableRenewalTypeEnum getAvailableRenewalType() {
    return availableRenewalType;
  }


  public void setAvailableRenewalType(AvailableRenewalTypeEnum availableRenewalType) {
    this.availableRenewalType = availableRenewalType;
  }


  public ModelsEnrollmentAvailableRenewal message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsEnrollmentAvailableRenewal modelsEnrollmentAvailableRenewal = (ModelsEnrollmentAvailableRenewal) o;
    return Objects.equals(this.availableRenewalType, modelsEnrollmentAvailableRenewal.availableRenewalType) &&
        Objects.equals(this.message, modelsEnrollmentAvailableRenewal.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableRenewalType, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsEnrollmentAvailableRenewal {\n");
    sb.append("    availableRenewalType: ").append(toIndentedString(availableRenewalType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailableRenewalType");
    openapiFields.add("Message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsEnrollmentAvailableRenewal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsEnrollmentAvailableRenewal.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsEnrollmentAvailableRenewal is not found in the empty JSON string", ModelsEnrollmentAvailableRenewal.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsEnrollmentAvailableRenewal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsEnrollmentAvailableRenewal` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsEnrollmentAvailableRenewal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsEnrollmentAvailableRenewal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsEnrollmentAvailableRenewal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsEnrollmentAvailableRenewal.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsEnrollmentAvailableRenewal>() {
           @Override
           public void write(JsonWriter out, ModelsEnrollmentAvailableRenewal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsEnrollmentAvailableRenewal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsEnrollmentAvailableRenewal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsEnrollmentAvailableRenewal
  * @throws IOException if the JSON string is invalid with respect to ModelsEnrollmentAvailableRenewal
  */
  public static ModelsEnrollmentAvailableRenewal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsEnrollmentAvailableRenewal.class);
  }

 /**
  * Convert an instance of ModelsEnrollmentAvailableRenewal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

