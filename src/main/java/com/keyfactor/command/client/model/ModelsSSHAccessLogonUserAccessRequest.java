/*
 * Keyfactor-v1
 * This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.command.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.command.client.JSON;

/**
 * ModelsSSHAccessLogonUserAccessRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelsSSHAccessLogonUserAccessRequest {
  public static final String SERIALIZED_NAME_LOGON_NAME = "LogonName";
  @SerializedName(SERIALIZED_NAME_LOGON_NAME)
  private String logonName;

  public static final String SERIALIZED_NAME_USERS = "Users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<String> users = null;

  public ModelsSSHAccessLogonUserAccessRequest() {
  }

  public ModelsSSHAccessLogonUserAccessRequest logonName(String logonName) {
    
    this.logonName = logonName;
    return this;
  }

   /**
   * Get logonName
   * @return logonName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLogonName() {
    return logonName;
  }


  public void setLogonName(String logonName) {
    this.logonName = logonName;
  }


  public ModelsSSHAccessLogonUserAccessRequest users(List<String> users) {
    
    this.users = users;
    return this;
  }

  public ModelsSSHAccessLogonUserAccessRequest addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getUsers() {
    return users;
  }


  public void setUsers(List<String> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsSSHAccessLogonUserAccessRequest modelsSSHAccessLogonUserAccessRequest = (ModelsSSHAccessLogonUserAccessRequest) o;
    return Objects.equals(this.logonName, modelsSSHAccessLogonUserAccessRequest.logonName) &&
        Objects.equals(this.users, modelsSSHAccessLogonUserAccessRequest.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logonName, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsSSHAccessLogonUserAccessRequest {\n");
    sb.append("    logonName: ").append(toIndentedString(logonName)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LogonName");
    openapiFields.add("Users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsSSHAccessLogonUserAccessRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsSSHAccessLogonUserAccessRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsSSHAccessLogonUserAccessRequest is not found in the empty JSON string", ModelsSSHAccessLogonUserAccessRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelsSSHAccessLogonUserAccessRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsSSHAccessLogonUserAccessRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("LogonName") != null && !jsonObj.get("LogonName").isJsonNull()) && !jsonObj.get("LogonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogonName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Users") != null && !jsonObj.get("Users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Users` to be an array in the JSON string but got `%s`", jsonObj.get("Users").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsSSHAccessLogonUserAccessRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsSSHAccessLogonUserAccessRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsSSHAccessLogonUserAccessRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsSSHAccessLogonUserAccessRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsSSHAccessLogonUserAccessRequest>() {
           @Override
           public void write(JsonWriter out, ModelsSSHAccessLogonUserAccessRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsSSHAccessLogonUserAccessRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsSSHAccessLogonUserAccessRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsSSHAccessLogonUserAccessRequest
  * @throws IOException if the JSON string is invalid with respect to ModelsSSHAccessLogonUserAccessRequest
  */
  public static ModelsSSHAccessLogonUserAccessRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsSSHAccessLogonUserAccessRequest.class);
  }

 /**
  * Convert an instance of ModelsSSHAccessLogonUserAccessRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

